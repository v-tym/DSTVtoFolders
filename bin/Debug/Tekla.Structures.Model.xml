<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Tekla.Structures.Model</name>
    </assembly>
    <members>
        <member name="T:Tekla.Structures.Model.Assembly">
            <summary>
            The Assembly class defines a single manufacturing unit: objects that are bolted or welded together in the workshop.
            An assembly has a main part and secondary assemblables attached to it. The number of secondaries is limited to 2048.
            Hierarchical assemblies can also have subassemblies attached to them and they can have a parent assembly instance.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures.Geometry3d;
            using System;
            
            public class Example
            {
                   public void Example1()
                   {
                       Beam B1 = new Beam(new Point(0,0,0), new Point(1000,0,0));
                       Beam B2 = new Beam(new Point(0,0,0), new Point(0,0,1000));
            
                       B1.Profile.ProfileString = "380*380";
                       B1.Material.MaterialString = "K40-1";
            
                       B2.Profile.ProfileString = "380*380";
                       B2.Material.MaterialString = "K40-1";
            
                       B1.Insert();
                       B2.Insert();
            
                       Assembly A = B1.GetAssembly();
                       A.Add(B2);
            
                       if(!A.Modify())
                           Console.WriteLine("Assembly Modify Failed!");
                   }
            }
            </code>
            </example>
        </member>
        <member name="T:Tekla.Structures.Model.ModelObject">
            <summary>
            The ModelObject class is an abstract base class for all model objects, such as parts, bolts, 
            welds and reinforcements.
            </summary>
            <remarks>
            One way to find out the correct names of the report properties is to open the Template Editor.
            With the Template Editor you can see the listing of all the properties that can be added to
            report templates. 
            </remarks>
            <example>
            In the following example a connection to the Tekla Structures model has already been established and
            next the values of some user-defined attributes (UDAs) are going to be found out. 
            The UDAs asked are the string value of CHECKED_BY, the double value of CHECKED_DATE,
            and the integer value of OBJECT_LOCKED.
            <code>
            using Tekla.Structures.Model;
            using System;
            using System.Windows.Forms;
            
            public class Example
            {
                   public void Example1()
                   {
                       Model Model = new Model();
            
                       ModelObjectEnumerator ObjectEnum = Model.GetModelObjectSelector().GetAllObjects();
                       ObjectEnum.SelectInstances = false; // Set the "SelectInstances" to false to speed up the enquiry; possible because only report properties are asked.
            
                       string Result = "CHECKED BY, CHECKED DATE, OBJECT LOCKED \n";
                       while(ObjectEnum.MoveNext())
                       {
                           if(ObjectEnum.Current != null)
                           {
                               Beam BeamObject = ObjectEnum.Current as Beam;
                               if(BeamObject != null)
                               {
                                   string CheckedBy = "";
                                   double DateCheckedValue = 0.0;
                                   int LockedStatus = -1;
            
                                   DateTime DateChecked = new System.DateTime(1970, 1, 1);
            
                                   BeamObject.GetUserProperty("CHECKED_BY", ref CheckedBy);
                                   BeamObject.GetUserProperty("CHECKED_DATE", ref DateCheckedValue);
                                   BeamObject.GetUserProperty("OBJECT_LOCKED", ref LockedStatus);
                                   if(CheckedBy.Length > 0 || DateCheckedValue > 0.0 ||
                                       LockedStatus != -1)
            
                                   DateChecked = DateChecked.AddSeconds(DateCheckedValue);
                                   Result += CheckedBy;
                                   Result += ", ";
                                   Result += DateChecked.ToString("dd.MM.yyyy");
                                   if(LockedStatus == 1)
                                   {
                                       Result += ", Locked\n";
                                   }
                                   else
                                   {
                                       Result += ", Not locked\n";
                                   }
                               }
                           }
                       }
                       MessageBox.Show(Result);
                   }
            }
            </code>
            </example>
        </member>
        <member name="T:Tekla.Structures.Model.Object">
            <summary>
            The Object class is an abstract base class for all the objects Tekla Structures has.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Object._Identifier">
            <summary>
            The identifier of the object.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.Object.#ctor">
            <summary>
            Initializes an object with a zero identifier.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Object.Identifier">
            <summary>
            The identifier of the object.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.ModelObject.Insert">
            <summary>
            Inserts the model object instance into the model database.
            </summary>
            The inserted instance must be of real type.
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ModelObject.Select">
            <summary>
            Selects the model object instance from the model database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ModelObject.Modify">
            <summary>
            Modifies the model instance in the model database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ModelObject.Delete">
            <summary>
            Deletes the instance from the model database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ModelObject.GetChildren">
            <summary>
            Returns an enumerator of all the children model objects.
            </summary>
            <returns>A model object enumerator on success, otherwise null.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ModelObject.GetFatherComponent">
            <summary>
            Returns the father component of the model object.
            </summary>
            <returns>A base component on success, otherwise null.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ModelObject.GetHierarchicObjects">
            <summary>
            Returns an enumerator of all the connected hierarchic objects.
            </summary>
            <returns>A model object enumerator on success, otherwise null.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ModelObject.GetAllUserProperties(System.Collections.Hashtable@)">
            <summary>
            Retrieves all properties for the model object in one hashtable.  
            Type for the returned value must be checked using type casting.
            </summary>
            <param name="Values">The return value, a hash table that contains all the values that were retrieved successfully.</param>
            <returns>True if at least one single property was retrieved successfully.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ModelObject.GetIntegerUserProperties(System.Collections.Hashtable@)">
            <summary>
            Retrieves all integer properties for the model object.  
            </summary>
            <param name="Values">The return value, a hash table that contains all the values that were retrieved successfully.</param>
            <returns>True if at least one single property was retrieved successfully.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ModelObject.GetDoubleUserProperties(System.Collections.Hashtable@)">
            <summary>
            Retrieves all double properties for the model object.  
            </summary>
            <param name="Values">The return value, a hash table that contains all the values that were retrieved successfully.</param>
            <returns>True if at least one single property was retrieved successfully.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ModelObject.GetStringUserProperties(System.Collections.Hashtable@)">
            <summary>
            Retrieves all string properties for the model object.  
            </summary>
            <param name="Values">The return value, a hash table that contains all the values that were retrieved successfully.</param>
            <returns>True if at least one single property was retrieved successfully.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ModelObject.GetAllReportProperties(System.Collections.ArrayList,System.Collections.ArrayList,System.Collections.ArrayList,System.Collections.Hashtable@)">
            <summary>
            Retrieves all properties for the model object in one hashtable.  
            Type for the returned value must be checked using type casting.
            </summary>
            <example>
            In the following example a connection to the Tekla Structures model has already been established and
            next the values of some report properties attributes are going to be found out for bolt groups in model. 
            <code>
            using Tekla.Structures.Model;
            using System;
            using System.Windows.Forms;
            
            public class Example
            {
                    public void Example1()
                    {
                        ArrayList sNames = new ArrayList();
                        sNames.Add("NAME");
                        sNames.Add("SCREW_NAME");
                        sNames.Add("SCREW_TYPE");
                        sNames.Add("TYPE");
                        sNames.Add("TYPE1");
                        sNames.Add("TYPE2");
                        sNames.Add("TYPE3");
                        sNames.Add("TYPE4");
                        sNames.Add("STANDARD");
                        sNames.Add("SHORT_NAME");
                        sNames.Add("MATERIAL");
                        sNames.Add("FINISH");
                        sNames.Add("GRADE");
                        ArrayList iNames = new ArrayList();
                        iNames.Add("DATE");
                        iNames.Add("FATHER_ID");
                        iNames.Add("GROUP_ID");
                        iNames.Add("HIERARCHY_LEVEL");
                        iNames.Add("MODEL_TOTAL");
                        ArrayList dNames = new ArrayList();
                        dNames.Add("EXTRA_LENGTH");
                        dNames.Add("FLANGE_THICKNESS");
                        dNames.Add("FLANGE_WIDTH");
                        dNames.Add("HEIGHT");
                        dNames.Add("LENGTH");
                        dNames.Add("PRIMARYWEIGHT");
                        dNames.Add("PROFILE_WEIGHT");
                        dNames.Add("ROUNDING_RADIUS");
                        dNames.Add("LENGTH");
                        dNames.Add("DIAMETER");
                        dNames.Add("WEIGHT");
                        dNames.Add("HEAD_DIAMETER");
                        dNames.Add("THICKNESS");
                        dNames.Add("WASHER.THICKNESS");
                        dNames.Add("WASHER.INNER_DIAMETER");
                        dNames.Add("WASHER.OUTER_DIAMETER");
                        dNames.Add("WASHER.THICKNESS1");
                        dNames.Add("WASHER.INNER_DIAMETER1");
                        dNames.Add("WASHER.OUTER_DIAMETER1");
                        dNames.Add("WASHER.THICKNESS2");
                        dNames.Add("WASHER.INNER_DIAMETER2");
                        dNames.Add("WASHER.OUTER_DIAMETER2");
                        dNames.Add("NUT.THICKNESS");
                        dNames.Add("NUT.INNER_DIAMETER");
                        dNames.Add("NUT.OUTER_DIAMETER");
                        dNames.Add("NUT.THICKNESS2");
                        dNames.Add("NUT.OUTER_DIAMETER2");
                            
                        ModelObjectEnumerator.AutoFetch = true;
                        ModelObjectEnumerator myEnum = myModel.GetModelObjectSelector().GetAllObjectsWithType(new Type[] { typeof(BoltGroup) });
                        while (myEnum.MoveNext())
                        {
                            try
                            {
                                myObject = myEnum.Current as ModelObject;
                                if (myObject != null)
                                {
                                    Hashtable sValues = new Hashtable(sNames.Count + dNames.Count + iNames.Count);
                                    if (myObject.GetAllReportProperties(sNames, dNames, iNames, ref sValues))
                                    {
                                        foreach (DictionaryEntry value in sValues)
                                            Console.WriteLine(value.Key.ToString() + " : " + value.Value.ToString());
                                    }
                                }
                            }
                            catch { }
                         }
                     }
            }
            </code>
            </example>
            <param name="StringNames">An array list containing the names of the string properties.</param>
            <param name="DoubleNames">An array list containing the names of the double properties.</param>
            <param name="IntegerNames">An array list containing the names of the integer properties.</param>
            <param name="Values">The return value, a hash table list  that contains all the values that were retrieved successfully.</param>
            <returns>True if at least one single property was retrieved successfully.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ModelObject.GetIntegerReportProperties(System.Collections.ArrayList,System.Collections.Hashtable@)">
            <summary>
            Retrieves multiple integer report properties for the model object. It is faster 
            to fetch multiple properties at once.
            </summary>
            <param name="Names">An array list containing the names of the properties.</param>
            <param name="Values">The return value, a hash table that contains all the values that were retrieved successfully.</param>
            <returns>True if at least one single property was retrieved successfully.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ModelObject.GetDoubleReportProperties(System.Collections.ArrayList,System.Collections.Hashtable@)">
            <summary>
            Retrieves multiple double report properties for the model object. It is faster 
            to fetch multiple properties at once.
            </summary>
            <param name="Names">An array list containing the names of the properties.</param>
            <param name="Values">The return value, a hash table that contains all the values that were retrieved successfully.</param>
            <returns>True if at least one single property was retrieved successfully.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ModelObject.GetStringReportProperties(System.Collections.ArrayList,System.Collections.Hashtable@)">
            <summary>
            Retrieves multiple string report properties for the model object. It is faster 
            to fetch multiple properties at once.
            </summary>
            <param name="Names">An array list containing the names of the properties.</param>
            <param name="Values">The return value, a hash table that contains all the values that were retrieved successfully.</param>
            <returns>True if at least one single property was retrieved successfully.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ModelObject.GetUserProperty(System.String,System.String@)">
            <summary>
            Retrieves a string property for the model object. 
            </summary>
            <param name="Name">The name of the property to be retrieved.</param>
            <param name="Value">The return value.</param>
            <returns>True if the value was returned successfully.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ModelObject.GetReportProperty(System.String,System.String@)">
            <summary>
            Retrieves a string property of the report for the model object.
            </summary>
            <param name="Name">The name of the property to be retrieved.</param>
            <param name="Value">The return value.</param>
            <returns>True if the value was returned successfully.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ModelObject.GetUserProperty(System.String,System.Double@)">
            <summary>
            Retrieves a double property for the model object.
            </summary>
            <param name="Name">The name of the property to be retrieved.</param>
            <param name="Value">The return value.</param>
            <returns>True if the value was returned successfully.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ModelObject.GetReportProperty(System.String,System.Double@)">
            <summary>
            Retrieves a double property of the report for the model object.
            </summary>
            <param name="Name">The name of the property to be retrieved.</param>
            <param name="Value">The return value.</param>
            <returns>True if the value was returned successfully.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ModelObject.GetUserProperty(System.String,System.Int32@)">
            <summary>
            Retrieves an integer property for the model object.
            </summary>
            <param name="Name">The name of the property to be retrieved.</param>
            <param name="Value">The return value.</param>
            <returns>True if the value was returned successfully.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ModelObject.GetReportProperty(System.String,System.Int32@)">
            <summary>
            Retrieves an integer property of the report for the model object.
            </summary>
            <param name="Name">The name of the property to be retrieved.</param>
            <param name="Value">The return value.</param>
            <returns>True if the value was returned successfully.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ModelObject.SetUserProperty(System.String,System.String)">
            <summary>
            Sets a string property for the model object.
            </summary>
            <param name="Name">The name of the property to be set.</param>
            <param name="Value">The new value for the property.</param>
            <returns>True if the property was set successfully.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ModelObject.SetUserProperty(System.String,System.Double)">
            <summary>
            Sets a double property for the model object.
            </summary>
            <param name="Name">The name of the property to be set.</param>
            <param name="Value">The new value for the property.</param>
            <returns>True if the property was set successfully.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ModelObject.SetUserProperty(System.String,System.Int32)">
            <summary>
            Sets an integer property for the model object.
            </summary>
            <param name="Name">The name of the property to be set.</param>
            <param name="Value">The new value for the property.</param>
            <returns>True if the property was set successfully.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ModelObject.GetCoordinateSystem">
            <summary>
            Returns the coordinate system for the given model object.
            </summary>
            <returns>The coordinate system for the given model object.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ModelObject.SetPhase(Tekla.Structures.Model.Phase)">
            <summary>
            Sets the phase of the model object.
            </summary>
            <param name="Phase">The new phase. A phase with this phase's number must exist in the database.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ModelObject.GetPhase(Tekla.Structures.Model.Phase@)">
            <summary>
            Retrieves the phase of the model object (the phase number, the phase name,
            the phase comment and whether the phase is the current one or not).
            </summary>
            <param name="Phase">The returned phase.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ModelObject.SetLabel(System.String)">
            <summary>
            Sets a label for an object when a new instance is created.
            The label is used in plug-ins for identifying the changed object in modification.
            </summary>
            <param name="Label">The label to set to the model object.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ModelObject.DeleteInstance">
            <summary>
            Deletes the instance from the model.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="P:Tekla.Structures.Model.ModelObject.ObjectLabel">
            <summary>
            Object label.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.ModelObject.ModelObjectEnum">
            <summary>
            All possible concrete model object subclasses are defined here. This enumeration can be used to
            fetch certain types of objects from the Tekla Structures model.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.UNKNOWN">
            <summary>
            The unknown model object.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.BEAM">
            <summary>
            The beam.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.POLYBEAM">
            <summary>
            The polybeam.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.CONTOURPLATE">
            <summary>
            The contour plate.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.BOOLEANPART">
            <summary>
            The boolean part.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.FITTING">
            <summary>
            The fitting.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.CUTPLANE">
            <summary>
            The cutplane.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.SURFACE_TREATMENT">
            <summary>
            The surface treatment.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.WELD">
            <summary>
            The weld.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.ASSEMBLY">
            <summary>
            The assembly.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.SINGLEREBAR">
            <summary>
            The single rebar.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.REBARGROUP">
            <summary>
            The rebar group.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.REBARMESH">
            <summary>
            The rebar mesh.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.REBARSTRAND">
            <summary>
            The rebar strand.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.CONTROL_PLANE">
            <summary>
            The control plane.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.BOLT_ARRAY">
            <summary>
            The bolt array.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.BOLT_CIRCLE">
            <summary>
            The bolt circle.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.BOLT_XYLIST">
            <summary>
            The bolt XY list.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.LOAD_POINT">
            <summary>
            The point load.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.LOAD_LINE">
            <summary>
            The line load.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.LOAD_AREA">
            <summary>
            The area load.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.LOAD_UNIFORM">
            <summary>
            The uniform load.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.GRID">
            <summary>
            The grid.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.GRIDPLANE">
            <summary>
            The grid plane.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.CONNECTION">
            <summary>
            The connection.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.COMPONENT">
            <summary>
            The component.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.SEAM">
            <summary>
            The seam.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.DETAIL">
            <summary>
            The detail.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.REFERENCE_MODEL">
            <summary>
            The reference model.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.REBAR_SPLICE">
            <summary>
            The rebar splice.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.LOAD_GROUP">
            <summary>
            The load group.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.TASK">
            <summary>
            The task.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.TASK_DEPENDENCY">
            <summary>
            The task dependency.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.TASK_WORKTYPE">
            <summary>
            The task worktype.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.POLYGON_WELD">
            <summary>
            The polygon weld.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.LOGICAL_WELD">
            <summary>
            The logical weld.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.CIRCLEREBAR">
            <summary>
            The circle rebar.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.HIERARCHIC_DEFINITION">
            <summary>
            The hierarchic definition.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.HIERARCHIC_OBJECT">
            <summary>
            The hierarchic object.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.ANALYSIS_GEOMETRY">
            <summary>
            The analysis geometry.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.ANALYSIS_PART">
            <summary>
            The analysis part.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.REFERENCE_MODEL_OBJECT">
            <summary>
            The reference model object.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.CUSTOM_PART">
            <summary>
            The custom part object.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.CIRCLE_REBARGROUP">
            <summary>
            The circle rebar group.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.CURVED_REBARGROUP">
            <summary>
            The curved rebar group.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.EDGE_CHAMFER">
            <summary>
            The edge chamfer.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.POUR_OBJECT">
            <summary>
            The pour object.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.POUR_BREAK">
            <summary>
            The pour break.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.CONTROL_LINE">
            <summary>
            The control line.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.LOAD_TEMPERATURE">
            <summary>
            The temperature load.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.BREP">
            <summary>
            The Brep part instance.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.ModelObject.PropertySourceEnum">
            <summary>
            Where to get the property.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Assembly._MainPart">
            <summary>
            The main part of the assembly.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Assembly._MainAssemblyId">
            <summary>
            The main assembly for the assembly, or null if none. 
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Assembly._OtherObjects">
            <summary>
            All the secondary objects of the assembly.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Assembly._SubAssemblies">
            <summary>
            The subassemblies of the assembly.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.Assembly.#ctor">
            <summary>
            Creates a new assembly instance.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.Assembly.GetMainPart">
            <summary>
            Selects and returns the main part of the assembly or null if none.
            </summary>
            <returns>The main part of the assembly or null.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Assembly.SetMainPart(Tekla.Structures.Model.Part)">
            <summary>
            Sets the main part of the assembly.
            </summary>
            <param name="Part">The part to set as the main part of the assembly.</param>
            <returns>True if the part was valid.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Assembly.GetSecondaries">
            <summary>
            Selects and returns all the secondary assemblables belonging to the assembly. The method replaces the
            old GetObjects() method. Notice that the number of secondaries is limited to 2048.
            </summary>
            <returns>An array list containing all the secondary assemblables belonging to the assembly.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Assembly.Add(Tekla.Structures.Model.IAssemblable)">
            <summary>
            Adds the given assemblable instance to the assembly. Notice that adding
            other than assembly instances will assume that you are adding objects to a cast unit assembly.
            </summary>
            <param name="Object">The part instance to add to the assembly.</param>
            <returns>True on success, otherwise false.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Assembly.Add(System.Collections.ArrayList)">
            <summary>
            Adds an array list of given assemblable instances to the assembly. For assemblies use Add(Assembly Assembly). Notice that adding
            other than assembly instances will actually assume that you are adding objects to a cast unit assembly.
            </summary>
            <param name="Assemblables">A list of assemblables to add to the assembly.</param>
            <returns>True on success, otherwise false.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Assembly.Remove(Tekla.Structures.Model.ModelObject)">
            <summary>
            Removes the given instance from the assembly.
            Before removing steel parts from an assembly all connecting workshop welds and bolts must be deleted.
            </summary>
            <param name="Object">The model object to remove from the assembly.</param>
            <returns>True if successfully removed.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Assembly.Insert">
            <summary>
            At the moment assemblies cannot be inserted.
            </summary>
            <returns>False.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Assembly.Select">
            <summary>
            Selects the assembly instance from the model. The identifier of the instance must be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Assembly.Modify">
            <summary>
            Modifies the assembly instance in the model.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Assembly.Delete">
            <summary>
            Explodes the assembly instance.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Assembly.Select(Tekla.Structures.Model.ModelObject)">
            <summary>
            Selects the Assembly based on given part.
            </summary>
            <param name="ObjectInAssembly">A part belonging to the Assembly</param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.Model.Assembly.Add(Tekla.Structures.Model.Assembly)">
            <summary>
            Adds a new subassembly for the assembly instance.
            </summary>
            <param name="Assembly">The assembly instance to be added.</param>
            <returns>True if the subassembly was successfully added.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Assembly.GetAssembly">
            <summary>
            Returns the assembly instance the assembly belongs to (null if none).
            </summary>
            <returns>The assembly instance or null.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Assembly.GetSubAssemblies">
            <summary>
            Selects and returns a list of subassemblies belonging to the assembly.
            </summary>
            <returns>A list of subassemblies.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Assembly.GetAssemblyType">
            <summary>
            Returns the type of the assembly.
            </summary>
            <returns>The type of the assembly.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Assembly.IsAssemblyPartOfAssembly(Tekla.Structures.Model.Assembly)">
            <summary>
            Is the assembly part of the current assembly.
            </summary>
            <param name="Assembly">The assembly to be checked.</param>
            <returns>True if the assembly belongs to the current assembly.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Assembly.IsPartOfAssembly(Tekla.Structures.Model.IAssemblable)">
            <summary>
            Is the assemblable part of the current assembly.
            </summary>
            <param name="Assemblable">The assemblable to be checked.</param>
            <returns>True if the assemblable belongs to the current assembly.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Assembly.CompareTo(Tekla.Structures.Model.Assembly)">
            <summary>
            Compares the instantiated assembly with another one.
            </summary>
            <param name="AssemblyToCompare">The assembly to compare with.</param>
            <returns>True if there are no differences, false otherwise.</returns>
            <remarks>
            If the numbering hasn't been performed the function will also return false.
            </remarks>
        </member>
        <member name="P:Tekla.Structures.Model.Assembly.Name">
            <summary>
            The name of the assembly.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Assembly.AssemblyNumber">
            <summary>
            Defines the numbering in the assembly sense. If the members are empty and zero, the main part attributes are used.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Assembly.AssemblyTypeEnum">
            <summary>
            The assembly types.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Assembly.AssemblyTypeEnum.STEEL_ASSEMBLY">
            <summary>
            The steel assembly type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Assembly.AssemblyTypeEnum.PRECAST_ASSEMBLY">
            <summary>
            The precast assembly type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Assembly.AssemblyTypeEnum.IN_SITU_ASSEMBLY">
            <summary>
            The in-situ assembly type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Assembly.AssemblyTypeEnum.TIMBER_ASSEMBLY">
            <summary>
            The timber assembly type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Assembly.AssemblyTypeEnum.UNKNOWN_ASSEMBLY">
            <summary>
            The unknown assembly type.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotAssembly_t">
            <summary>
            Struct for the Assembly.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotAssembly_t.ModelObject">
            <summary>
            The object we are extending (Inherited from)
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotAssembly_t.AssemblableId">
            <summary>
            The Identifier for the Assemblable we wish to find out the Assembly for (or 0 if none)
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotAssembly_t.MainPart">
            <summary>
            The Main Part of the Assembly.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotAssembly_t.Type">
            <summary>
            The type of the Assembly.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotAssembly_t.nAssemblyOtherParts">
            <summary>
            The number of secondary assemblables in the Assembly
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotAssembly_t.aAssemblyOtherPartsIds">
            <summary>
            All the Secondary assemblables IDs of the Assembly.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotAssembly_t.nAssemblySubAssemblies">
            <summary>
            Number of subassmblies.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotAssembly_t.aAssemblySubAssemblyIds">
            <summary>
            All the subassembly IDs of the Assembly.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotAssembly_t.MainAssembly">
            <summary>
            The main assembly ID (if any) for this assembly
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotAssembly_t.NumberingSeries">
            <summary>
            Numbering of assembly
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotAssembly_t.aName">
            <summary>
            Name of the assembly
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.BoltArray">
            <summary>
            The BoltArray class defines a bolt group with an array shape.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures.Geometry3d;
            using System;
            
            public class Example
            {
                   public void Example1()
                   {
                       ContourPlate cp = new ContourPlate();
                       cp.AddContourPoint(new ContourPoint(new Point( 3000,  6000, 0),null));
                       cp.AddContourPoint(new ContourPoint(new Point( 6000,  6000, 0),null));
                       cp.AddContourPoint(new ContourPoint(new Point( 6000, 12000, 0),null));
                       cp.AddContourPoint(new ContourPoint(new Point( 3000, 12000, 0),null));
            
                       if (!cp.Insert())
                           Console.WriteLine("ContourPlate Insert failed!");
            
                       BoltArray B = new BoltArray();
            
                       B.PartToBeBolted = cp;
                       B.PartToBoltTo   = cp;
            
                       B.FirstPosition  = new Point(3000,  6000, 0);
                       B.SecondPosition = new Point(6000, 12000, 0);
            
                       B.BoltSize     = 16;
                       B.Tolerance    = 3.00;
                       B.BoltStandard = "NELSON";
                       B.BoltType     = BoltGroup.BoltTypeEnum.BOLT_TYPE_WORKSHOP;
                       B.CutLength    = 105;
            
                       B.Length       = 100;
                       B.ExtraLength  = 15;
                       B.ThreadInMaterial = BoltGroup.BoltThreadInMaterialEnum.THREAD_IN_MATERIAL_NO;
            
                       B.Position.Depth          = Position.DepthEnum.MIDDLE;
                       B.Position.Plane          = Position.PlaneEnum.MIDDLE;
                       B.Position.Rotation       = Position.RotationEnum.FRONT;
            
                       B.Bolt    = true;
                       B.Washer1 = true;
                       B.Washer2 = true;
                       B.Washer3 = true;
                       B.Nut1    = true;
                       B.Nut2    = true;
            
                       B.Hole1   = true;
                       B.Hole2   = true;
                       B.Hole3   = true;
                       B.Hole4   = true;
                       B.Hole5   = true;
            
                       B.AddBoltDistX(100);
                       B.AddBoltDistX(90);
                       B.AddBoltDistX(80);
            
                       B.AddBoltDistY(70);
                       B.AddBoltDistY(60);
                       B.AddBoltDistY(50);
            
                       if (!B.Insert())
                           Console.WriteLine("BoltArray Insert failed!");
                   }
            }
            </code>
            </example>
        </member>
        <member name="T:Tekla.Structures.Model.BoltGroup">
            <summary>
            The BoltGroup class is an abstract base class for all bolt shapes, such as array, circle and XY list.
            See the Tekla Structures help file for further information about the attributes.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BoltGroup._BoltPositions">
            <summary>
            Real bolt positions in selection plane
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.BoltGroup.#ctor">
            <summary>
            Creates a new bolt group instance with the given shape.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.BoltGroup.AddOtherPartToBolt(Tekla.Structures.Model.Part)">
            <summary>
            Adds the given part to the list of the other parts that should be bolted.
            </summary>
            <param name="M">The part to add.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.BoltGroup.RemoveOtherPartToBolt(Tekla.Structures.Model.Part)">
            <summary>
            Removes the given part from the list of the other bolted parts.
            </summary>
            <param name="M">The part to remove.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.BoltGroup.GetOtherPartsToBolt">
            <summary>
            Returns an array list containing all the other parts that are bolted.
            </summary>
            <returns>An array list of parts containing all the other parts that are bolted.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.BoltGroup.GetSolid">
            <summary>
            Method for getting the solid information of the bolt group.
            </summary>
            <returns>The solid instance of the bolt group.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.BoltGroup.GetSolid(System.Boolean)">
            <summary>
            Method for getting the solid information of the bolt group.
            </summary>
            <param name="withHighAccuracy">Boolean value which defines if the solid is created with high accuracy</param>
            <returns>The solid instance of the bolt group.</returns>
        </member>
        <member name="P:Tekla.Structures.Model.BoltGroup.BoltSize">
            <summary>
            The size of the bolts in the group.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BoltGroup.BoltStandard">
            <summary>
            The standard of the bolt group.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BoltGroup.BoltType">
            <summary>
            The type of the bolt group.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BoltGroup.ThreadInMaterial">
            <summary>
            Whether the thread goes inside the materal or not.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BoltGroup.Length">
            <summary>
            The length. An extra variable that is only set when the bolt group is made of studs instead of bolts.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BoltGroup.CutLength">
            <summary>
            The cut length.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BoltGroup.ExtraLength">
            <summary>
            The extra length for the bolts.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BoltGroup.Shape">
            <summary>
            The shape of the bolt group.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BoltGroup.Tolerance">
            <summary>
            The hole tolerance.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BoltGroup.HoleType">
            <summary>
            The hole type: oversized or slotted.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BoltGroup.SlottedHoleX">
            <summary>
            The X allowance of the slotted hole.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BoltGroup.SlottedHoleY">
            <summary>
            The Y allowance of the slotted hole.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BoltGroup.RotateSlots">
            <summary>
            The rotation of the slots: odd, even or parallel.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BoltGroup.Position">
            <summary>
            The position attributes.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BoltGroup.StartPointOffset">
            <summary>
            The start point offset values of the bolt group.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BoltGroup.EndPointOffset">
            <summary>
            The end point offset values of the bolt group.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BoltGroup.Washer1">
            <summary>
            Indicates whether the washer 1 is used in the assembly.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BoltGroup.Washer2">
            <summary>
            Indicates whether the washer 2 is used in the assembly.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BoltGroup.Washer3">
            <summary>
            Indicates whether the washer 3 is used in the assembly.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BoltGroup.Nut1">
            <summary>
            Indicates whether the nut 1 is used in the assembly.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BoltGroup.Nut2">
            <summary>
            Indicates whether the nut 2 is used in the assembly.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BoltGroup.Bolt">
            <summary>
            Indicates whether the instance is a bolt or just a hole.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BoltGroup.Hole1">
            <summary>
            Indicates whether the hole 1 is used.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BoltGroup.Hole2">
            <summary>
            Indicates whether the hole 2 is used.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BoltGroup.Hole3">
            <summary>
            Indicates whether the hole 3 is used.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BoltGroup.Hole4">
            <summary>
            Indicates whether the hole 4 is used.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BoltGroup.Hole5">
            <summary>
            Indicates whether the hole 5 is used.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BoltGroup.PartToBoltTo">
            <summary>
            The part to bolt to.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BoltGroup.PartToBeBolted">
            <summary>
            The part to be bolted.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BoltGroup.OtherPartsToBolt">
            <summary>
            The other parts to be bolted (read-only).
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BoltGroup.FirstPosition">
            <summary>
            The first position point.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BoltGroup.SecondPosition">
            <summary>
            The second position point.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BoltGroup.ConnectAssemblies">
            <summary> Defines whether to connect a part or an assembly as a secondary part (false) or as a sub-assembly (true). </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BoltGroup.BoltPositions">
            <summary>
            Gets the single bolt positions.
            All the bolt positions are in the XY-plane defined by the bolt group coordinate
            system. The given positions are in relation to the transformation plane
            in which the bolt group was selected.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.BoltGroup.BoltTypeEnum">
            <summary>
            The type of the bolt.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BoltGroup.BoltTypeEnum.BOLT_TYPE_SITE">
            <summary>
            The site bolt type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BoltGroup.BoltTypeEnum.BOLT_TYPE_WORKSHOP">
            <summary>
            The workshop bolt type.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.BoltGroup.BoltThreadInMaterialEnum">
            <summary>
            The thread in the material.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BoltGroup.BoltThreadInMaterialEnum.THREAD_IN_MATERIAL_NO">
            <summary>
            No thread inside the material (the part).
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BoltGroup.BoltThreadInMaterialEnum.THREAD_IN_MATERIAL_YES">
            <summary>
            Thread inside the material (the part).
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.BoltGroup.BoltShapeEnum">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.Model.BoltGroup.BoltShapeEnum.SHAPE_ARRAY">
            <summary>
            The array shape.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BoltGroup.BoltShapeEnum.SHAPE_CIRCLE">
            <summary>
            The circle shape.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BoltGroup.BoltShapeEnum.SHAPE_XY_LIST">
            <summary>
            The XY list.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.BoltGroup.BoltHoleTypeEnum">
            <summary>
            The hole type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BoltGroup.BoltHoleTypeEnum.HOLE_TYPE_OVERSIZED">
            <summary>
            The oversized hole type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BoltGroup.BoltHoleTypeEnum.HOLE_TYPE_SLOTTED">
            <summary>
            The slotted hole type.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.BoltGroup.BoltRotateSlotsEnum">
            <summary>
            The rotation of the slots (the holes).
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BoltGroup.BoltRotateSlotsEnum.ROTATE_SLOTS_ODD">
            <summary>
            The slots are crossed to odd parts.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BoltGroup.BoltRotateSlotsEnum.ROTATE_SLOTS_EVEN">
            <summary>
            The slots are crossed to even parts.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BoltGroup.BoltRotateSlotsEnum.ROTATE_SLOTS_PARALLEL">
            <summary>
            The slots are rotated to be parallel.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BoltArray._BoltDistX">
            <summary>
            Array Bolt Dist X values (double).
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BoltArray._BoltDistY">
            <summary>
            Array Bolt Dist Y values (double).
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.BoltArray.#ctor">
            <summary>
            Creates a new bolt array instance.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.BoltArray.AddBoltDistX(System.Double)">
            <summary>
            Adds an X distance to the bolt array.
            </summary>
            <param name="DistX">The X distance to be added.</param>
            <returns>True if the distance was added. Throws an OverflowException if there was no more space for the distance.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.BoltArray.AddBoltDistY(System.Double)">
            <summary>
            Adds a Y distance to the bolt array.
            </summary>
            <param name="DistY">The Y distance to be added.</param>
            <returns>True if the distance was added. Throws an OverflowException if there was no more space for the distance.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.BoltArray.RemoveBoltDistX(System.Int32)">
            <summary>
            Removes an X distance from the bolt array in the index position.
            </summary>
            <param name="Index">The position to remove from.</param>
            <returns>True if the distance was removed. False if the index is out of range.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.BoltArray.RemoveBoltDistY(System.Int32)">
            <summary>
            Removes a Y distance from the bolt array in the index position.
            </summary>
            <param name="Index">The position to remove from.</param>
            <returns>True if the distance was removed. False if the index is out of range.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.BoltArray.GetBoltDistXCount">
            <summary>
            Returns the amount of X distances in the bolt array.
            </summary>
            <returns>The amount of X distances.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.BoltArray.GetBoltDistYCount">
            <summary>
            Returns the amount of Y distances in the bolt array.
            </summary>
            <returns>The amount of Y distances.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.BoltArray.GetBoltDistX(System.Int32)">
            <summary>
            Returns the X distance defined by the argument.
            </summary>
            <param name="Index">The index to the distance list.</param>
            <returns>The distance defined by the argument.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.BoltArray.GetBoltDistY(System.Int32)">
            <summary>
            Returns the Y distance defined by the argument.
            </summary>
            <param name="Index">The index to the distance list.</param>
            <returns>The distance defined by the argument.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.BoltArray.SetBoltDistX(System.Int32,System.Double)">
            <summary>
            Sets the X distance at the index defined by the argument.
            </summary>
            <param name="Index">The index to the distance list.</param>
            <param name="DistX">The X distance to be used.</param>
            <returns>True if the distance was modified. False if the index is out of range.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.BoltArray.SetBoltDistY(System.Int32,System.Double)">
            <summary>
            Sets the Y distance at the index defined by the argument.
            </summary>
            <param name="Index">The index to the distance list.</param>
            <param name="DistY">The Y distance to be used.</param>
            <returns>True if the distance was modified. False if the index is out of range.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.BoltArray.Insert">
            <summary>
            Inserts the bolt array into the model database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.BoltArray.Select">
            <summary>
            Selects a bolt array from the model database. The ID must be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.BoltArray.Modify">
            <summary>
            Modifies the existing bolt array in the model database to match the current one.
            <para>Note, the IDs of Part To Bolt To, Part To Be Bolted and OtherParts cannot be modified.</para>
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.BoltArray.Delete">
            <summary>
            Deletes the bolt array instance with the given ID from the model database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="T:Tekla.Structures.Model.BoltCircle">
            <summary>
            The BoltCircle class defines a bolt group with a circle shape.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures.Geometry3d;
            using System;
            
            public class Example
            {
                   public void Example1()
                   {
                       ContourPlate cp = new ContourPlate();
                       cp.AddContourPoint(new ContourPoint(new Point( 9000,  6000, 0),null));
                       cp.AddContourPoint(new ContourPoint(new Point(12000,  6000, 0),null));
                       cp.AddContourPoint(new ContourPoint(new Point(12000, 12000, 0),null));
                       cp.AddContourPoint(new ContourPoint(new Point( 9000, 12000, 0),null));
            
                       if (!cp.Insert())
                           Console.WriteLine("ContourPlate Insert failed!");
            
                       BoltCircle B = new BoltCircle();
            
                       B.PartToBeBolted = cp;
                       B.PartToBoltTo   = cp;
            
                       B.FirstPosition  = new Point( 9000,  6000, 0);
                       B.SecondPosition = new Point(12000, 12000, 0);
            
                       B.BoltSize     = 16;
                       B.Tolerance    = 3.00;
                       B.BoltStandard = "7968";
                       B.BoltType     = BoltGroup.BoltTypeEnum.BOLT_TYPE_WORKSHOP;
                       B.CutLength    = 105;
            
                       B.Length       = 100;
                       B.ExtraLength  = 15;
                       B.ThreadInMaterial = BoltGroup.BoltThreadInMaterialEnum.THREAD_IN_MATERIAL_NO;
            
                       B.Position.Depth          = Position.DepthEnum.MIDDLE;
                       B.Position.Plane          = Position.PlaneEnum.MIDDLE;
                       B.Position.Rotation       = Position.RotationEnum.FRONT;
            
                       B.Bolt    = true;
                       B.Washer1 = true;
                       B.Washer2 = true;
                       B.Washer3 = true;
                       B.Nut1    = true;
                       B.Nut2    = true;
            
                       B.Hole1   = true;
                       B.Hole2   = true;
                       B.Hole3   = true;
                       B.Hole4   = true;
                       B.Hole5   = true;
            
                       B.NumberOfBolts = 7;
                       B.Diameter      = 160;
            
                       if (!B.Insert())
                           Console.WriteLine("BoltCircle Insert failed!");
                   }
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.Structures.Model.BoltCircle.#ctor">
            <summary>
            Creates a new bolt circle instance.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.BoltCircle.Insert">
            <summary>
            Inserts the bolt circle into the model database. All the attributes must be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.BoltCircle.Select">
            <summary>
            Selects a bolt circle from the model database. The ID must be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.BoltCircle.Modify">
            <summary>
            Modifies the existing bolt circle in the model database to match the current one.
            <para>Note, the IDs of Part To Bolt To, Part To Be Bolted and OtherParts cannot be modified.</para>
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.BoltCircle.Delete">
            <summary>
            Deletes the bolt circle instance with the given ID from the model database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="P:Tekla.Structures.Model.BoltCircle.NumberOfBolts">
            <summary>
            The number of bolts in the circle.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BoltCircle.Diameter">
            <summary>
            The diameter of the circle.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotBoltGroup_t">
            <summary>
            Serialization structure for BoltGroup.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBoltGroup_t.ModelObject">
            <summary>
            Base class.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBoltGroup_t.BoltSize">
            <summary>
            Bolt Size.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBoltGroup_t.aBoltStandard">
            <summary>
            Bolt Standard.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBoltGroup_t.BoltType">
            <summary>
            Bolt Type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBoltGroup_t.ThreadInMaterial">
            <summary>
            Thread In Material.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBoltGroup_t.Length">
            <summary>
            Length, Used for Nelson Standards.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBoltGroup_t.CutLength">
            <summary>
            Cut Length.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBoltGroup_t.ExtraLength">
            <summary>
            Extra Length.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBoltGroup_t.Shape">
            <summary>
            _Shape.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBoltGroup_t.Tolerance">
            <summary>
            Tolerance.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBoltGroup_t.HoleType">
            <summary>
            HoleType.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBoltGroup_t.SlottedHoleX">
            <summary>
            Slotted Hole X.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBoltGroup_t.SlottedHoleY">
            <summary>
            Slotted Hole Y.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBoltGroup_t.RotateSlots">
            <summary>
            Rotate Slots.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBoltGroup_t.Position">
            <summary>
            Position.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBoltGroup_t.StartPointOffset">
            <summary>
            Defines the bolt group start point offset.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBoltGroup_t.EndPointOffset">
            <summary>
            Defines the bolt group end point offset.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBoltGroup_t.Washer1">
            <summary>
            Washers, 1-3
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBoltGroup_t.Washer2">
            <summary>
            Washers, 1-3
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBoltGroup_t.Washer3">
            <summary>
            Washers, 1-3
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBoltGroup_t.Nut1">
            <summary>
            Nuts, 1-2
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBoltGroup_t.Nut2">
            <summary>
            Nuts, 1-2
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBoltGroup_t.Bolt">
            <summary>
            Bolt
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBoltGroup_t.Hole1">
            <summary>
            Holes, 1-5
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBoltGroup_t.Hole2">
            <summary>
            Holes, 1-5
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBoltGroup_t.Hole3">
            <summary>
            Holes, 1-5
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBoltGroup_t.Hole4">
            <summary>
            Holes, 1-5
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBoltGroup_t.Hole5">
            <summary>
            Holes, 1-5
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBoltGroup_t.PartToBoltToId">
            <summary>
            Part to bolt to
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBoltGroup_t.PartToBeBoltedId">
            <summary>
            Part to be bolted
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBoltGroup_t.nOtherPartsToBolt">
            <summary>
            How many other parts to be bolted
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBoltGroup_t.aOtherPartsToBolt">
            <summary>
            Ids of the other parts to be bolted
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBoltGroup_t.FirstPosition">
            <summary>
            First position point
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBoltGroup_t.SecondPosition">
            <summary>
            Second position point
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBoltGroup_t.BoltPositions">
            <summary>
            Real bolt positions in current plane
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBoltGroup_t.ConnectAssemblies">
            <summary> 
            Defines connect as secondary part (false) or as sub-assembly (true). 
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotBoltShapeData_t">
            <summary>
            Serialization structure for the Bolt _Shape specific attributes.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBoltShapeData_t.nBoltDistX">
            <summary>
            How many Bolt DistX attributes are there. This is used for the Array and XY Bolt groups
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBoltShapeData_t.aBoltDistX">
            <summary>
            The Bolt DistX attributes
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBoltShapeData_t.nBoltDistY">
            <summary>
            How many Bolt DistY attributes are there. This is used for the Array and XY Bolt groups
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBoltShapeData_t.aBoltDistY">
            <summary>
            The Bolt DistY attributes
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBoltShapeData_t.NumberOfBolts">
            <summary>
            How many bolts there are for the Circle
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBoltShapeData_t.Diameter">
            <summary>
            Diameter of the Circle
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.BoltPolygon">
            <summary> Bolt Polygon represents a polygon object that has its corners at the given points. </summary>
        </member>
        <member name="M:Tekla.Structures.Model.BoltPolygon.#ctor">
            <summary> Initializes a new instance of the Bolt Polygon class with empty attributes. </summary>
        </member>
        <member name="M:Tekla.Structures.Model.BoltPolygon.ToStruct(Tekla.Structures.ModelInternal.dotBoltPolygon_t@)">
            <summary> 
            </summary>
            <param name="P"></param>
        </member>
        <member name="M:Tekla.Structures.Model.BoltPolygon.FromStruct(Tekla.Structures.ModelInternal.dotBoltPolygon_t@)">
            <summary> 
            </summary>
            <param name="Polygon"></param>
        </member>
        <member name="P:Tekla.Structures.Model.BoltPolygon.Points">
            <summary> The corners of the bolt polygon. </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotBoltPolygon_t">
            <summary>
            Serialization structure for Bolt Polygon.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBoltPolygon_t.nPoints">
            <summary>
            Number of cornerpoints in bolt polygon.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBoltPolygon_t.aX">
            <summary>
            The x-coordinates of all points.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBoltPolygon_t.aY">
            <summary>
            The y-coordinates of all points.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBoltPolygon_t.aZ">
            <summary>
            The z-coordinates of all points.
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.dotBoltPolygon_t.#ctor(System.Int32)">
            <summary>
            Instantiates a bolt polygon structure with given arguments.
            </summary>
            <param name="Size">Number of points in bolt polygon.</param>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.dotBoltPolygon_t.GetPoints">
            <summary>
            Get bolt polygon points in ArrayList.
            </summary>
            <returns>ArrayList of bolt polygon Points</returns>
        </member>
        <member name="T:Tekla.Structures.Model.BoltXYList">
            <summary>
            The BoltXYList class defines a bolt group with an XY list shape. The bolt group is the most generic one
            of the bolt groups.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures.Geometry3d;
            using System;
            
            public class Example
            {
                   public void Example1()
                   {
                       ContourPlate cp = new ContourPlate();
                       cp.AddContourPoint(new ContourPoint(new Point( 6000,  6000, 0),null));
                       cp.AddContourPoint(new ContourPoint(new Point( 9000,  6000, 0),null));
                       cp.AddContourPoint(new ContourPoint(new Point( 9000, 12000, 0),null));
                       cp.AddContourPoint(new ContourPoint(new Point( 6000, 12000, 0),null));
            
                       if (!cp.Insert())
                           Console.WriteLine("ContourPlate Insert failed!");
            
                       BoltXYList B = new BoltXYList();
            
                       B.PartToBeBolted = cp;
                       B.PartToBoltTo   = cp;
            
                       B.FirstPosition =  new Point(6000,  6000, 0);
                       B.SecondPosition = new Point(9000, 12000, 0);
            
                       B.BoltSize     = 16;
                       B.Tolerance    = 3.00;
                       B.BoltStandard = "7968";
                       B.BoltType     = BoltGroup.BoltTypeEnum.BOLT_TYPE_WORKSHOP;
                       B.CutLength    = 105;
            
                       B.Length       = 50;
                       B.ExtraLength  = 15;
                       B.ThreadInMaterial = BoltGroup.BoltThreadInMaterialEnum.THREAD_IN_MATERIAL_NO;
            
                       B.Position.Depth          = Position.DepthEnum.MIDDLE;
                       B.Position.Plane          = Position.PlaneEnum.MIDDLE;
                       B.Position.Rotation       = Position.RotationEnum.FRONT;
            
                       B.Bolt    = true;
                       B.Washer1 = true;
                       B.Washer2 = true;
                       B.Washer3 = true;
                       B.Nut1    = true;
                       B.Nut2    = true;
            
                       B.Hole1   = true;
                       B.Hole2   = true;
                       B.Hole3   = true;
                       B.Hole4   = true;
                       B.Hole5   = true;
            
                       B.AddBoltDistX(100);
                       B.AddBoltDistX(200);
                       B.AddBoltDistX(300);
            
                       B.AddBoltDistY(100);
                       B.AddBoltDistY(200);
                       B.AddBoltDistY(300);
            
                       if (!B.Insert())
                           Console.WriteLine("BoltXYList Insert failed!");
                   }
            }
            </code>
            </example>
        </member>
        <member name="F:Tekla.Structures.Model.BoltXYList._BoltDistX">
            <summary>
            Bolt Dist X
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BoltXYList._BoltDistY">
            <summary>
            Bolt Dist Y
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.BoltXYList.#ctor">
            <summary>
            Creates a new bolt XY list instance.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.BoltXYList.AddBoltDistX(System.Double)">
            <summary>
            Adds an X distance to the bolt XY list.
            </summary>
            <param name="DistX">The X distance to be added.</param>
            <returns>True if the distance was added. Throws an OverflowException if there was no more space for the distance.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.BoltXYList.AddBoltDistY(System.Double)">
            <summary>
            Adds a Y distance to the bolt XY list.
            </summary>
            <param name="DistY">The Y distance to be added.</param>
            <returns>True if the distance was added. Throws an OverflowException if there was no more space for the distance.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.BoltXYList.GetBoltDistXCount">
            <summary>
            Returns the amount of X distances in the bolt XY list.
            </summary>
            <returns>The amount of X distances.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.BoltXYList.GetBoltDistYCount">
            <summary>
            Returns the amount of Y distances in the bolt XY list.
            </summary>
            <returns>The amount of Y distances.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.BoltXYList.GetBoltDistX(System.Int32)">
            <summary>
            Returns the X distance defined by the argument.
            </summary>
            <param name="Index">The index to the distance list.</param>
            <returns>The distance defined by the argument.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.BoltXYList.GetBoltDistY(System.Int32)">
            <summary>
            Returns the Y distance defined by the argument.
            </summary>
            <param name="Index">The index to the distance list.</param>
            <returns>The distance defined by the argument.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.BoltXYList.Insert">
            <summary>
            Inserts the bolt XY list into the model database. All the attributes must be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.BoltXYList.Select">
            <summary>
            Selects a bolt XY list from the model database. The ID must be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.BoltXYList.Modify">
            <summary>
            Modifies the existing bolt XY list in the model database to match the current one.
            <para>Note, the IDs of Part To Bolt To, Part To Be Bolted and OtherParts cannot be modified.</para>
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.BoltXYList.Delete">
            <summary>
            Deletes the bolt XY list instance with the given ID from the model database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="T:Tekla.Structures.Model.Boolean">
            <summary>
            The Boolean class is an abstract base class for boolean operations such as a part cut, an add, a fitting or
            a cut plane.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.Boolean.#ctor">
            <summary>
            Constructs an empty boolean.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Boolean.Father">
            <summary>
            The father object of the boolean operation; the model object instance to operate on.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotBoolean_t">
            <summary>
            Boolean class serialization structure
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBoolean_t.ModelObject">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBoolean_t.Father">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.BooleanPart">
            <summary>
            The BooleanPart class represents a part cut or an add. This means that a model object is, for example,
            cut with a part instance to create a void to the father part. Typically the operative part is deleted after
            the operation.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures.Geometry3d;
            using System;
            
            public class Example
            {
                   public void Example1()
                   {
                       Point point = new Point(0, 7000, 0);
                       Point point2 = new Point(1000, 7000, 0);
                       Beam Beam1 = new Beam();
                       Beam1.StartPoint = point;
                       Beam1.EndPoint = point2;
                       Beam1.Insert();
            
                       Beam Beam2 = new Beam();
                       Beam2.StartPoint = new Point(500, 6000, 0);
                       Beam2.EndPoint = new Point(500, 8000, 0);
                       Beam2.Class = BooleanPart.BooleanOperativeClassName;
                       Beam2.Insert();
            
                       BooleanPart Beam = new BooleanPart();
                       Beam.Father = Beam1;
                       Beam.SetOperativePart(Beam2);
                       if(!Beam.Insert())
                           Console.WriteLine("Insert failed!");
                       Beam2.Delete();
                   }
            }
            </code>
            </example>
        </member>
        <member name="F:Tekla.Structures.Model.BooleanPart.BooleanOperativeClassName">
            <summary>
            A constant string that defines a part class name to be the boolean
            operative part. This class must be used when inserting the operative part to
            the database.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.BooleanPart.#ctor">
            <summary>
            Instantiates an empty cut operation.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.BooleanPart.SetOperativePart(Tekla.Structures.Model.Part)">
            <summary>
            Sets the part to operate with. The operative part's
            class member must be defined to be BooleanOperativeClass.
            </summary>
            <param name="Part">The operative part for the boolean.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.BooleanPart.Insert">
            <summary>
            Inserts the boolean part into the model database. All the attributes must be set.
            The operative part is overwritten by a copy of the original part.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.BooleanPart.Select">
            <summary>
            Selects a boolean part from the model database. The part ID must be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.BooleanPart.Modify">
            <summary>
            Currently it is not possible to modify the boolean part as there is nothing
            that can be modified for it. Calling this function will actually call modify for 
            the operative part member.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.BooleanPart.Delete">
            <summary>
            Deletes the boolean part instance with the given ID from the model database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="P:Tekla.Structures.Model.BooleanPart.Type">
            <summary>
            Defines the boolean operation: an add or a cut.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BooleanPart.OperativePart">
            <summary>
            The part that does the boolean operation. When Insert() is called, this field is overwritten 
            with a new part instance which is a copy of the original operative part. This part has the
            same identifier as the boolean part. Modifications (such as profile change) have
            to be made through the part instance and not the boolean part instance. The operative part's
            class must be BooleanOperativeClass.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.BooleanPart.BooleanTypeEnum">
            <summary>
            Defines the boolean operation: an add or a cut.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BooleanPart.BooleanTypeEnum.BOOLEAN_ADD">
            <summary>
            Defines the add part. Typically the add part type is not used.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BooleanPart.BooleanTypeEnum.BOOLEAN_CUT">
            <summary>
            Defines the cut part.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotBooleanPart_t">
            <summary>
            Boolean part serialization structure.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBooleanPart_t.Boolean">
            <summary>
            Base class
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBooleanPart_t.Type">
            <summary>
            BooleanTypeEnum
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBooleanPart_t.OperativePart">
            <summary>
            Cutting/Adding part
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.CutPlane">
            <summary>
            The CutPlane class defines how the end of a part is cut with a plane. A cut plane differs from a fitting because
            a cut can never extend the boundaries of the original part.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures.Geometry3d;
            
            public class Example
            {
                   public void Example1()
                   {
                       Point Point = new Point(0, 0, 0);
                       Point Point2 = new Point(1000, 0, 0);
            
                       Beam Beam = new Beam();
                       Beam.StartPoint = Point;
                       Beam.EndPoint = Point2;
                       Beam.Profile.ProfileString = "HEA400";
                       Beam.Finish = "PAINT";
                       Beam.Insert();
            
                       CutPlane CutPlane = new CutPlane();
                       CutPlane.Plane = new Plane();
                       CutPlane.Plane.Origin = new Point(0, 0, 0);
                       CutPlane.Plane.AxisX = new Vector(0, 1000, 0);
                       CutPlane.Plane.AxisY = new Vector(0, 0, -1000);
                       CutPlane.Father = Beam;
                       CutPlane.Insert();
                   }
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.Structures.Model.CutPlane.#ctor">
            <summary>
            Initializes a new instance of the CutPlane class with empty attributes.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.CutPlane.Insert">
            <summary>
            Inserts the cut plane into the model database. All the attributes must be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.CutPlane.Select">
            <summary>
            Selects a cut plane from the model database. The part ID must be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.CutPlane.Modify">
            <summary>
            Modifies the existing cut plane in the model database to match the current one.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.CutPlane.Delete">
            <summary>
            Deletes the cut plane instance with the given ID from the model database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.CutPlane.CreateInstance">
            <summary>
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.CutPlane.ModifyInstance">
            <summary>
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.CutPlane.SelectInstance">
            <summary>
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.CutPlane.ToStruct(Tekla.Structures.ModelInternal.dotFittingOrCutPlane_t@)">
            <summary>
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.CutPlane.FromStruct(Tekla.Structures.ModelInternal.dotFittingOrCutPlane_t@)">
            <summary>
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.CutPlane.Plane">
            <summary>
            The plane that cuts the part.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.EdgeChamfer">
            <summary>
            The EdgeChamfer class defines how the part edge is chamfered.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures.Geometry3d;
            
            public class Example
            {
                   public void Example1()
                   {
                       Point Point = new Point(0, 0, 0);
                       Point Point2 = new Point(1000, 0, 0);
            
                       Beam Beam = new Beam();
                       Beam.StartPoint = Point;
                       Beam.EndPoint = Point2;
                       Beam.Profile.ProfileString = "400*400";
                       Beam.Finish = "PAINT";
                       Beam.Insert();
            
                       EdgeChamfer EdgeChamfer = new EdgeChamfer(new Point(0, -100, 0), new Point(0, 200, 0));
                       EdgeChamfer.FirstChamferEndType = EdgeChamfer.ChamferEndTypeEnum.BEVELLED;
                       EdgeChamfer.FirstBevelDimension = 50;
                       EdgeChamfer.Chamfer.X = 20;
                       EdgeChamfer.Chamfer.Y = 20;
                       EdgeChamfer.Father = Beam;
                       EdgeChamfer.Insert();
                   }
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.Structures.Model.EdgeChamfer.#ctor">
            <summary> Initializes a new instance of the EdgeChamfer class with empty attributes. </summary>
        </member>
        <member name="M:Tekla.Structures.Model.EdgeChamfer.#ctor(Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point)">
            <summary> Initializes a new instance of the EdgeChamfer class. </summary>
            <param name="FirstEnd">The first end point of the edge chamfer.</param>
            <param name="SecondEnd">The second end point of the edge chamfer.</param>
        </member>
        <member name="M:Tekla.Structures.Model.EdgeChamfer.Insert">
            <summary> Inserts the edge chamfer into the model database. All the attributes must be set. </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.EdgeChamfer.Select">
            <summary> Selects an edge chamfer from the model database. The edge chamfer ID must be set. </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.EdgeChamfer.Modify">
            <summary>
            Modifies the existing edge chamfer in the model database to match the current one.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.EdgeChamfer.Delete">
            <summary>
            Deletes the edge chamfer instance with the given ID from the model database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="P:Tekla.Structures.Model.EdgeChamfer.Chamfer">
            <summary> The chamfer values for the EdgeChamfer. </summary>
        </member>
        <member name="P:Tekla.Structures.Model.EdgeChamfer.FirstEnd">
            <summary> The start point of the EdgeChamfer. </summary>
        </member>
        <member name="P:Tekla.Structures.Model.EdgeChamfer.SecondEnd">
            <summary> The end point of the EdgeChamfer. </summary>
        </member>
        <member name="P:Tekla.Structures.Model.EdgeChamfer.FirstChamferEndType">
            <summary> The ChamferEndTypeEnum of the first end. </summary>
        </member>
        <member name="P:Tekla.Structures.Model.EdgeChamfer.SecondChamferEndType">
            <summary> The ChamferEndTypeEnum of the second end. </summary>
        </member>
        <member name="P:Tekla.Structures.Model.EdgeChamfer.SecondBevelDimension">
            <summary> The bevel dimension if the second end is bevelled. </summary>
        </member>
        <member name="P:Tekla.Structures.Model.EdgeChamfer.FirstBevelDimension">
            <summary> The bevel dimension if the first end is bevelled. </summary>
        </member>
        <member name="P:Tekla.Structures.Model.EdgeChamfer.Name">
            <summary> The name of the EdgeChamfer instance. </summary>
        </member>
        <member name="T:Tekla.Structures.Model.EdgeChamfer.ChamferEndTypeEnum">
            <summary> The end type of the edge chamfer. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.EdgeChamfer.ChamferEndTypeEnum.FULL">
            <summary> The chamfer continues to the end of the edge. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.EdgeChamfer.ChamferEndTypeEnum.STRAIGHT">
            <summary> The chamfer end is straight at the given point. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.EdgeChamfer.ChamferEndTypeEnum.BEVELLED">
            <summary> The chamfer end is bevelled at the given point. </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotEdgeChamfer_t">
            <summary>
            Serialization structure for EdgeChamfer.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotEdgeChamfer_t.Boolean">
            <summary>
            Boolean is the base class for operation. It defines e.g. the father part of the operation.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotEdgeChamfer_t.Chamfer">
            <summary>
            Chamfer values for edge chamfer.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotEdgeChamfer_t.FirstEnd">
            <summary>
            The first input point.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotEdgeChamfer_t.SecondEnd">
            <summary>
            The first input point.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotEdgeChamfer_t.FirstChamferEndType">
            <summary>
            The first input point.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotEdgeChamfer_t.FirstBevelDimension">
            <summary>
            The first input point.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotEdgeChamfer_t.SecondChamferEndType">
            <summary>
            The first input point.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotEdgeChamfer_t.SecondBevelDimension">
            <summary>
            The first input point.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotEdgeChamfer_t.aName">
            <summary>
            The name of the edge chamfer.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Fitting">
            <summary>
            The Fitting class defines how the part end fits to a plane.  A fitting can make the part either longer or shorter.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures.Geometry3d;
            
            public class Example
            {
                   public void Example1()
                   {
                       Point Point = new Point(0, 0, 0);
                       Point Point2 = new Point(1000, 0, 0);
            
                       Beam Beam = new Beam();
                       Beam.StartPoint = Point;
                       Beam.EndPoint = Point2;
                       Beam.Profile.ProfileString = "HEA400";
                       Beam.Finish = "PAINT";
                       Beam.Insert();
            
                       Fitting Fitting = new Fitting();
                       Fitting.Plane = new Plane();
                       Fitting.Plane.Origin = new Point(500, 0, 0);
                       Fitting.Plane.AxisX = new Vector(0, 1000, 0);
                       Fitting.Plane.AxisY = new Vector(0, 0, -1000);
                       Fitting.Father = Beam;
                       Fitting.Insert();
                   }
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.Structures.Model.Fitting.#ctor">
            <summary>
            Initializes a new instance of the Fitting class with empty attributes.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.Fitting.Insert">
            <summary>
            Inserts the fitting into the model database. All the attributes must be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Fitting.Select">
            <summary>
            Selects a fitting from the model database. The fitting ID must be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Fitting.Modify">
            <summary>
            Modifies the existing fitting in the model database to match the current one.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Fitting.Delete">
            <summary>
            Deletes the fitting instance with the given ID from the model database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Fitting.CreateInstance">
            <summary>
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.Fitting.ModifyInstance">
            <summary>
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.Fitting.SelectInstance">
            <summary>
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.Fitting.ToStruct(Tekla.Structures.ModelInternal.dotFittingOrCutPlane_t@)">
            <summary>
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.Fitting.FromStruct(Tekla.Structures.ModelInternal.dotFittingOrCutPlane_t@)">
            <summary>
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Fitting.Plane">
            <summary>
            The plane that fits the part.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotFittingOrCutPlane_t">
            <summary>
            Serialization structure for Fitting and CutPlane.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotFittingOrCutPlane_t.Boolean">
            <summary>
            Boolean is the base class for operation. It defines e.g. the father part of the operation.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotFittingOrCutPlane_t.Plane">
            <summary>
            The plane.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotFittingOrCutPlane_t.Type">
            <summary>
            Type of the operation.
            <list type="bullet"> 
            <listheader><description> Options are: </description></listheader>
            <item><description>FITTING</description></item> 
            <item><description>CUTPLANE</description></item> 
            </list>
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.ClashChecker.ClashChekerEvent">
            <summary>
            The ClashChekerEvent class contains methods related to clash check events.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.ClashChecker.ClashChekerEvent.GetClashCheckHandler">
            <summary>
            Returns a new clash check handler.
            </summary>
            <returns>The new clash check handler instance.</returns>
        </member>
        <member name="T:Tekla.Structures.Model.ClashChecker.ClashChekerEvent.ClashCheckDoneDelegate">
            <summary>
            The delegate to use for clash check completion.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.ClashChecker.ClashChekerEvent.ClashDetectedDelegate">
            <summary>
            The delegate to use for clash detection.
            Encapsulates any method that takes a clash check data object as a parameter.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.BaseComponent">
            <summary>
            The BaseComponent class is an abstract base class that represents generic components. The generic components
            derived from the base component are the component, the connection, the detail and the seam.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseComponent.CUSTOM_OBJECT_NUMBER">
            <summary>
            The component number to be used when calling a custom component.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseComponent.PLUGIN_OBJECT_NUMBER">
            <summary>
            The component number to be used when calling a plug-in or a type derived from the connection base.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseComponent.ConnectionCodeFromAttributeFile">
            <summary>
            A constant string defining that the connection code is to be read from the attribute file. The
            connection code must be set to this constant value before inserting the component.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseComponent.ClassFromAttributeFile">
            <summary>
            A constant integer defining that the class is to be read from the attribute file. The
            class must be set to this constant value before inserting the component.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseComponent._InputPolygon">
            <summary>
            Contains the reference point for the detail or the input polygon
            for the seam.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseComponent._Attributes">
            <summary>
            Stores all the attributes that the user has set.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.BaseComponent.#ctor">
            <summary>
            Creates a base component instance with default attributes.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.BaseComponent.SetAttribute(System.String,System.String)">
            <summary>
            Sets the attribute's value to the given value.
            </summary>
            <param name="AttrName">The name of the attribute.</param>
            <param name="StrValue">The string value of the attribute.</param>
        </member>
        <member name="M:Tekla.Structures.Model.BaseComponent.SetAttribute(System.String,System.Int32)">
            <summary>
            Sets the attribute's value to the given value.
            </summary>
            <param name="AttrName">The name of the attribute.</param>
            <param name="Value">The integer value of the attribute.</param>
        </member>
        <member name="M:Tekla.Structures.Model.BaseComponent.SetAttribute(System.String,System.Double)">
            <summary>
            Sets the attribute's value to the given value.
            </summary>
            <param name="AttrName">The name of the attribute.</param>
            <param name="DValue">The double value of the attribute.</param>
        </member>
        <member name="M:Tekla.Structures.Model.BaseComponent.GetAttribute(System.String,System.String@)">
            <summary>
            Retrieves the attribute with the given name.
            </summary>
            <param name="AttrName">The name of the attribute.</param>
            <param name="StrValue">A string for the return value.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.BaseComponent.GetAttribute(System.String,System.Int32@)">
            <summary>
            Retrieves the attribute with the given name.
            </summary>
            <param name="AttrName">The name of the attribute.</param>
            <param name="Value">An integer for the return value.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.BaseComponent.GetAttribute(System.String,System.Double@)">
            <summary>
            Retrieves the attribute with the given name.
            </summary>
            <param name="AttrName">The name of the attribute.</param>
            <param name="DValue">A double for the return value.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.BaseComponent.AddAttributesToStack">
            <summary>
            Adds all the attributes to the stack in Tekla Structures, one attribute is added at a time.
            </summary>
            <returns>True if no errors occured while adding the attributes.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.BaseComponent.LoadAttributesFromFile(System.String)">
            <summary>
            Loads the attributes for the component from the given file. These attributes
            will be loaded before all the attributes that have been set with the SetAttribute
            methods, so any attributes that are set with SetAttribute will override those
            loaded from the given standard file.
            </summary>
            <param name="Filename">The name of the file.</param>
            <returns>True if a file name is specified.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.BaseComponent.LoadComponentAttributes">
            <summary>
            Loads the component attributes to the stack. This needs to be run before
            the attributes the user sets are added to the stack.
            </summary>
            <returns>True if the file name was set and the attributes were correctly loaded.</returns>
        </member>
        <member name="P:Tekla.Structures.Model.BaseComponent.Name">
            <summary>
            The name of the component. The name identifies custom components or plug-ins.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BaseComponent.Number">
            <summary>
            The number of the component. A number greater than zero identifies system components, 
            for custom components the number is CUSTOM_OBJECT_NUMBER, and for plug-ins the number is PLUGIN_OBJECT_NUMBER.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BaseComponent.PrimaryObject">
            <summary>
            The primary object of the detail, seam and connection.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BaseComponent.SecondaryObjects">
            <summary>
            The secondary objects for the detail, seam and connection.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BaseComponent.InputPolygon">
            <summary>
            An input polygon for the seam and the custom part.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotBaseComponent_t">
            <summary>
            Serialization structure for BaseComponent.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBaseComponent_t.ModelObject">
            <summary>
            Base class
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBaseComponent_t.aName">
            <summary>
            Name of the component
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBaseComponent_t.Number">
            <summary>
            Number of the component
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBaseComponent_t.aAttributeFilename">
            <summary>
            Name of the attribute file we wish to load
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBaseComponent_t.aConnectionCode">
            <summary>
            Connection code
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBaseComponent_t.UpVector">
            <summary>
            UpVector
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBaseComponent_t.AutoDirectionType">
            <summary>
            Auto direction type
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBaseComponent_t.PositionType">
            <summary>
            Position type
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBaseComponent_t.DetailType">
            <summary>
            Detail type
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBaseComponent_t.AutoPosition">
            <summary>
            Auto position type
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBaseComponent_t.ErrorStatus">
            <summary>
            Error status for connection, seam or detail.
            Visible in symbol color.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBaseComponent_t.Class">
            <summary>
            Class of connection/detail/seam.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBaseComponent_t.PrimaryObjectId">
            <summary>
            Primary object id
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBaseComponent_t.nSecondaryObjectIds">
            <summary>
            Number of secondary object ids
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBaseComponent_t.aSecondaryObjectIds">
            <summary>
            Secondary object ids
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBaseComponent_t.nPositions">
            <summary>
            Number of polygon positions
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBaseComponent_t.aX">
            <summary>
            polygon x coordinates
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBaseComponent_t.aY">
            <summary>
            polygon y coordinates
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBaseComponent_t.aZ">
            <summary>
            polygon z coordinates
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBaseComponent_t.CustomPartPosition">
            <summary>
            The way the custom part is positioned in the model.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotComponentAttribute_t">
            <summary>
            Struct for the ComponentAttribute.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotComponentAttribute_t.aName">
            <summary>
            Name of the attribute
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotComponentAttribute_t.AttributeType">
            <summary>
            Type of the attribute, int, double or string
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotComponentAttribute_t.IValue">
            <summary>
            int value
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotComponentAttribute_t.DValue">
            <summary>
            double value
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotComponentAttribute_t.aStrValue">
            <summary>
            string value
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Component">
            <summary>
            The Component class represents a component. A component is a modelling tool that typically
            assembles multiple parts to build some type of a structure, for example a hall macro or at a 
            smaller scale a reinforcement component (a macro). Also, a custom part is a component.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures.Geometry3d;
            using System;
            
            public class Example
            {
                   public void Example1()
                   {
                       Beam B = new Beam(new Point(12000, 0, 0), new Point(12000, 0, 6000));
                       B.Profile.ProfileString = "380*380";
                       B.Material.MaterialString = "K40-1";
                       if (B.Insert())
                       {
                           Component C = new Component();
                           C.Name = "Component Test";
                           C.Number = 30000063;
            
                           ComponentInput CI = new ComponentInput();
                           CI.AddInputObject(B);
            
                           C.SetComponentInput(CI);
            
                           C.LoadAttributesFromFile("standard");
            
                           C.SetAttribute("side_bar_space", 333.0);
            
                           if (!C.Insert())
                           {
                               Console.WriteLine("Component Insert failed");
                           }
                           else
                           {
                               Console.WriteLine(C.Identifier.ID);
            
                               Double DValue = 0.0;
                               if (!C.GetAttribute("side_bar_space", ref DValue) || DValue != 333)
                                   Console.WriteLine("Component GetAttribute failed");
                           }
                       }
                   }
            }
            </code>
            </example>
        </member>
        <member name="T:Tekla.Structures.Model.IAssemblable">
            <summary>
            The IAssemblable interface dictates which model objects are capabable of belonging to an assembly at the leaf level.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.IAssemblable.GetAssembly">
            <summary>
            Returns the assembly that the assemblable belongs to.
            </summary>
            <returns>The assembly that the assemblable belongs to.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Component.#ctor">
            <summary>
            Creates a new component instance.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.Component.#ctor(Tekla.Structures.Model.ComponentInput)">
            <summary>
            Creates a new component instance with the given component input.
            </summary>
            <param name="I">The component input to be used for the component.</param>
        </member>
        <member name="M:Tekla.Structures.Model.Component.SetComponentInput(Tekla.Structures.Model.ComponentInput)">
            <summary>
            Sets the component input object for the component. The component input object
            contains all the input objects and positions that are needed for the
            component creation.
            </summary>
            <param name="I">The component input object.</param>
            <returns>True if the input is received.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Component.GetComponentInput">
            <summary>
            Returns the component input object.
            </summary>
            <returns>The component input object.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Component.GetAssembly">
            <summary>
            Returns the assembly that the component belongs to.
            </summary>
            <returns>The assembly that the component belongs to.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Component.Insert">
            <summary>
            Inserts the component into the model database. The component input needs to be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Component.Select">
            <summary>
            Selects a component from the model database. The component ID must be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Component.Modify">
            <summary>
            Modifies the existing component in the model database to match the current one.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Component.Delete">
            <summary>
            Deletes the component instance with the given ID from the model database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Component.GetComponents">
            <summary>
            Returns an enumerator of all the connected components.
            </summary>
            <returns>A ModelObjectEnumerator on success, otherwise null.</returns>
        </member>
        <member name="T:Tekla.Structures.Model.ComponentInput">
            <summary>
            The ComponentInput class handles the input of component objects and positions. A component has one component input.
            The component input must include all the needed input objects and points in the correct order. For example,
            an input with a point and a part is different from an input of a part and a point.
            The maximum number of different input items in the collection is 10.
            </summary>
            <example>
            The following example creates a component with a given component input:
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures.Geometry3d;
            using System;
            
            public class Example
            {
                   public void Example1()
                   {
                       Beam Beam = new Beam(new Point(12000, 0, 0), new Point(12000, 0, 6000));
                       Beam.Profile.ProfileString = "380*380";
                       Beam.Material.MaterialString = "K40-1";
                       Beam.Insert();
            
                       Component Component = new Component();
                       Component.Name = "Component Test";
                       Component.Number = 30000063;
            
                       ComponentInput ComponentInput = new ComponentInput();
                       ComponentInput.AddInputObject(Beam);
            
                       Component.SetComponentInput(ComponentInput);
            
                       Component.LoadAttributesFromFile("standard");
            
                       Component.SetAttribute("side_bar_space", 333.0);
            
                       if (!Component.Insert())
                       {
                           Console.WriteLine("Component Insert failed");
                       }
                   }
            }
            </code>
            </example>
        </member>
        <member name="F:Tekla.Structures.Model.ComponentInput.MAX_INPUTITEMS">
            <summary>
            Max number of input sequences
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ComponentInput._InputObjects">
            <summary>
            Contains all the Inputs, in the same order as they were entered
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.ComponentInput.#ctor">
            <summary>
            Creates a new component input object.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.ComponentInput.GetInputObjectItemCount">
            <summary>
            Returns the number of input object sequences.
            </summary>
            <returns>The number of input object sequences.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ComponentInput.GetInputObjectItem(System.Int32)">
            <summary>
            Returns the input object item at the given index.
            </summary>
            <param name="Index">A zero based index of the input object sequence.</param>
            <returns>The input object item.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ComponentInput.AddOneInputPosition(Tekla.Structures.Geometry3d.Point)">
            <summary>
            Adds an input position to the component input.
            </summary>
            <param name="P">The position to be added.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ComponentInput.AddTwoInputPositions(Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point)">
            <summary>
            Adds two input positions to the component input.
            </summary>
            <param name="Position1">The first position to be added.</param>
            <param name="Position2">The second position to be added.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ComponentInput.AddInputPolygon(Tekla.Structures.Model.Polygon)">
            <summary>
            Adds a polygon to the component input.
            </summary>
            <param name="P">The polygon to be added.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ComponentInput.AddInputObject(Tekla.Structures.Model.ModelObject)">
            <summary>
            Adds a model object to the component input.
            </summary>
            <param name="M">The model object to be added.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ComponentInput.AddInputObjects(System.Collections.ArrayList)">
            <summary>
            Adds an array list of  model objects to the component input.
            </summary>
            <param name="Objects">A list of model objects in the correct order.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ComponentInput.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"></see> to
            an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from
            the <see cref="T:System.Collections.ICollection"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.
            </param>
            <param name="index">The zero-based index in the array at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">The array is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The index is less than zero.</exception>
            <exception cref="T:System.ArgumentException">
            The array is multidimensional, or the index is equal to or greater than the length of the array, or the number of elements
            in the source <see cref="T:System.Collections.ICollection"></see> is greater than the available space from the index to
            the end of the destination array.
            </exception>
            <exception cref="T:System.InvalidCastException">
            The type of the source <see cref="T:System.Collections.ICollection"></see> cannot be cast automatically to the type of
            the destination array.
            </exception>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Tekla.Structures.Model.ComponentInput.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.</returns>
            <filterpriority>2</filterpriority>
            <example>
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures.Geometry3d;
            using System;
            using System.Collections;
            
            public class Example
            {
                public void Example1()
                {
                    Beam B = new Beam(new Point(12000, 0, 0), new Point(12000, 0, 6000));
                    B.Profile.ProfileString = "380*380";
                    B.Material.MaterialString = "K40-1";
                    if (B.Insert())
                    {
                        Component C = new Component();
                        C.Name = "Component Test";
                        C.Number = 30000063;
            
                        ComponentInput CI = new ComponentInput();
                        CI.AddInputObject(B);
            
                        C.SetComponentInput(CI);
            
                        C.LoadAttributesFromFile("standard");
            
                        C.SetAttribute("side_bar_space", 333.0);
            
                        if (!C.Insert())
                        {
                            Console.WriteLine("Component Insert failed");
                        }
                        else
                        {
                            // test fetching component input
                            ComponentInput ComponentSel = C.GetComponentInput();
                            IEnumerator Enumerator = ComponentSel.GetEnumerator();
                            while (Enumerator.MoveNext())
                            {
                                InputItem ObjectInput = Enumerator.Current as InputItem;
                                if (ObjectInput.GetInputType() == InputItem.InputTypeEnum.INPUT_1_OBJECT)
                                {
                                    Beam BeamInput = ObjectInput.GetData() as Beam;
                                }
                            }
                        }
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="P:Tekla.Structures.Model.ComponentInput.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.ICollection"></see>.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Tekla.Structures.Model.ComponentInput.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe).
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Tekla.Structures.Model.ComponentInput.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:Tekla.Structures.Model.ComponentInputObject">
            <summary>
            Internal class that deals with single ComponentInputObjects (A ComponentInput consists of 
            multiple ComponentInputObjects)
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotComponentInputObject_t">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotComponentInputObject_t.InputType">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotComponentInputObject_t.nPoints">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotComponentInputObject_t.aX">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotComponentInputObject_t.aY">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotComponentInputObject_t.aZ">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotComponentInputObject_t.nObjects">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotComponentInputObject_t.aObjects">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotComponentInputObject_t.ComponentId">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotComponentInputObject_t.InputNumber">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Connection">
            <summary>
            The Connection class represents a connection. A connection is something that connects two or more parts together.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures.Geometry3d;
            using Tekla.Structures;
            using System;
            
            public class Example
            {
                   public void Example1()
                   {
                       Beam B1 = new Beam(new Point(15000,0,-500), new Point(15000,0,6000));
                       B1.Profile.ProfileString = "HEA400";
                       B1.Material.MaterialString = "S235JR";
            
                       Beam B2 = new Beam(new Point(15000,0,0), new Point(18000,0,0));
                       B2.Profile.ProfileString = "HEA400";
                       B2.Material.MaterialString = "S235JR";
            
                       B1.Insert();
                       B2.Insert();
            
                       Connection C = new Connection();
                       C.Name = "Test End Plate";
                       C.Number = 144;
                       C.LoadAttributesFromFile("standard");
                       C.UpVector = new Vector(0,0,1000);
                       C.PositionType = PositionTypeEnum.COLLISION_PLANE;
            
                       C.SetPrimaryObject(B1);
                       C.SetSecondaryObject(B2);
            
                       C.SetAttribute("e2", 10.0);
                       C.SetAttribute("e1", 10.0);
            
                       if(!C.Insert())
                       {
                           Console.WriteLine("Connection Insert failed");
                       }
                       else
                       {
                           Console.WriteLine(C.Identifier.ID);
            
                           Double DValue = 0.0;
                           if(!C.GetAttribute("e2", ref DValue) || DValue != 10)
                               Console.WriteLine("Connection GetAttribute failed");
                       }
                   }
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.Structures.Model.Connection.#ctor">
            <summary>
            Creates a new connection instance.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.Connection.SetPrimaryObject(Tekla.Structures.Model.ModelObject)">
            <summary>
            Sets the primary object of the connection.
            </summary>
            <param name="M">The primary object.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Connection.GetPrimaryObject">
            <summary>
            Returns the primary object of the connection.
            </summary>
            <returns>The primary object.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Connection.SetSecondaryObject(Tekla.Structures.Model.ModelObject)">
            <summary>
            Sets the secondary object of the connection. Use this
            method if you wish to add only one secondary object
            to the connection.
            </summary>
            <param name="M">The secondary object.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Connection.SetSecondaryObjects(System.Collections.ArrayList)">
            <summary>
            Sets an array list of model objects as the secondary objects of the connection.
            </summary>
            <param name="Secondaries">An array list containing the secondary objects.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Connection.GetSecondaryObjects">
            <summary>
            Returns the secondary objects.
            </summary>
            <returns>An array list containing all the secondary objects.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Connection.Insert">
            <summary>
            Inserts the connection into the model database. All the attributes must be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Connection.Select">
            <summary>
            Selects a connection from the model database. The connection ID must be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Connection.Modify">
            <summary>
            Modifies the existing connection in the model database to match the current one.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Connection.Delete">
            <summary>
            Deletes the connection instance with the given ID from the model database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="P:Tekla.Structures.Model.Connection.Class">
            <summary>
            The class of the connection.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Connection.UpVector">
            <summary>
            A vector indicating which direction is considered the up direction for the connection.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Connection.AutoDirectionType">
            <summary>
            The auto direction type.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Connection.PositionType">
            <summary>
            The position type.
            <para>When creating custom connections this attribute is not applied,
            instead the position type used when creating the custom connection
            is used.</para>
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Connection.Code">
            <summary>
            The code of the connection. The code can be used to classify the connection.
            The code of the connection can be reported and shown in drawings.
            The maximum length of the string is 20 characters.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Connection.Status">
            <summary>
            The read only status of the connection. 
            The status can be reported and shown in drawings.
            The color of the connection symbol in the model indicates the status of the connection.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.CustomPart">
            <summary>
            The CustomPart class represents a custom part object in the Tekla Structures model.
            A custom part is a modeling tool that typically assembles multiple parts to build some
            type of a beam-like structure, for example a tapered beam or a sandwich panel.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures.Geometry3d;
            
            public class Example
            {
                   public void Example1()
                   {
                       CustomPart CPart = new CustomPart();
                       CPart.Name = "HPKM39";
                       CPart.Number = BaseComponent.CUSTOM_OBJECT_NUMBER;
                       CPart.Position.Plane = Position.PlaneEnum.LEFT;
                       CPart.Position.PlaneOffset = 10;
                       CPart.Position.Depth = Position.DepthEnum.BEHIND;
                       CPart.Position.DepthOffset = 30;
                       CPart.Position.RotationOffset = 45;
                       CPart.Position.Rotation = Position.RotationEnum.TOP;
                       CPart.SetInputPositions(new Point(100, 0, 0), new Point(300, 0, 0));
                       CPart.SetAttribute("P2a", "TEST");
                       CPart.Insert();
                   }
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.Structures.Model.CustomPart.#ctor">
            <summary>
            Creates a new custom part instance.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.CustomPart.#ctor(Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point)">
            <summary>
            Creates a new custom part instance with the given input.
            </summary>
            <param name="StartPoint">The start point of the custom part.</param>
            <param name="EndPoint">The end point of the custom part.</param>
        </member>
        <member name="M:Tekla.Structures.Model.CustomPart.SetInputPositions(Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point)">
            <summary>
            Sets the start and end point of the custom part.
            </summary>
            <param name="StartPoint">The start point of the custom part.</param>
            <param name="EndPoint">The end point of the custom part.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.CustomPart.GetStartAndEndPositions(Tekla.Structures.Geometry3d.Point@,Tekla.Structures.Geometry3d.Point@)">
            <summary>
            Returns the start and end points of the custom part.
            </summary>
            <param name="StartPoint">The start point of the custom part.</param>
            <param name="EndPoint">The end point of the custom part.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.CustomPart.GetAssembly">
            <summary>
            Returns the assembly that the custom part belongs to.
            </summary>
            <returns>The assembly that the custom part belongs to.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.CustomPart.Insert">
            <summary>
            Inserts the custom part into the model database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.CustomPart.Select">
            <summary>
            Selects a custom part from the model database. The custom part identifier must be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.CustomPart.Modify">
            <summary>
            Modifies the existing custom part in the model database to match the current one.
            </summary>
            <remarks>Currently position attributes cannot be changed with Modify().</remarks>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.CustomPart.Delete">
            <summary>
            Deletes the custom part instance with the given identifier from the model database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.CustomPart.GetComponents">
            <summary>
            Returns an enumerator of all the connected components.
            </summary>
            <returns>A ModelObjectEnumerator on success, otherwise null.</returns>
        </member>
        <member name="P:Tekla.Structures.Model.CustomPart.Position">
            <summary>
            The way the custom part is positioned in the model.
            </summary>
            <remarks>Currently position attributes cannot be changed with Modify().</remarks>
        </member>
        <member name="T:Tekla.Structures.Model.Detail">
            <summary>
            The Detail class represents a detail. A detail is different from a connection since the detail only connects to one part.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures.Geometry3d;
            using Tekla.Structures;
            using System;
            
            public class Example
            {
                   public void Example1()
                   {
                       Beam B = new Beam(new Point(13000,3000,-500), new Point(13000,3000,6000));
                       B.Profile.ProfileString = "HEA400";
                       B.Material.MaterialString = "S235JR";
            
                       if(B.Insert())
                       {
                           Detail D = new Detail();
                           D.Name = "Test End Plate Detail";
                           D.Number = 1002;
                           D.LoadAttributesFromFile("standard");
                           D.UpVector = new Vector(0,0,0);
                           D.PositionType = PositionTypeEnum.MIDDLE_PLANE;
                           D.AutoDirectionType = AutoDirectionTypeEnum.AUTODIR_DETAIL;
                           D.DetailType = DetailTypeEnum.END;
            
                           D.SetPrimaryObject(B);
                           D.SetReferencePoint(new Point(13000,3000,3000));
            
                           D.SetAttribute("el", 33.0);
                           D.SetAttribute("er", 33.0);
            
                           if(!D.Insert())
                           {
                               Console.WriteLine("Detail Insert failed");
                           }
                           else
                           {
                               Console.WriteLine(D.Identifier.ID);
            
                               Double DValue = 0.0;
                               if(!D.GetAttribute("er", ref DValue) || DValue != 33)
                                   Console.WriteLine("Detail GetAttribute failed");
                           }
                       }
                   }
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.Structures.Model.Detail.#ctor">
            <summary>
            Creates a new detail instance.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.Detail.SetPrimaryObject(Tekla.Structures.Model.ModelObject)">
            <summary>
            Sets the detail's primary object.
            </summary>
            <param name="M">The primary object.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Detail.GetPrimaryObject">
            <summary>
            Returns the primary object.
            </summary>
            <returns>The primary object of the detail.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Detail.SetReferencePoint(Tekla.Structures.Geometry3d.Point)">
            <summary>
            Sets the reference point; the point the user would pick for the detail to appear to.
            </summary>
            <param name="ReferencePoint">The reference point.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Detail.GetReferencePoint">
            <summary>
            Returns the reference point.
            </summary>
            <returns>The reference point.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Detail.Insert">
            <summary>
            Inserts the detail into the model database. All the attributes must be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Detail.Select">
            <summary>
            Selects a detail from the model database. The detail ID must be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Detail.Modify">
            <summary>
            Modifies the existing detail in the model database to match the current one.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Detail.Delete">
            <summary>
            Deletes the detail instance with the given ID from the model database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="P:Tekla.Structures.Model.Detail.Class">
            <summary>
            The class of the detail.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Detail.UpVector">
            <summary>
            A vector indicating which direction is considered the up direction.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Detail.AutoDirectionType">
            <summary>
            The auto direction type.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Detail.PositionType">
            <summary>
            The position type.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Detail.DetailType">
            <summary>
            The detail type.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Detail.Code">
            <summary>
            The code of the detail. The code can be used to classify the detail.
            The code can be reported and shown in drawings.
            The maximum length of the string is 20 characters.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Detail.Status">
            <summary>
            The read only status of the detail.
            The status can be reported and shown in drawings.
            The color of the detail symbol in the model indicates the status of the detail.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Seam">
            <summary>
            The Seam class represents a seam. A seam is something that connects a main part to other parts along an edge.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures.Geometry3d;
            using Tekla.Structures;
            using System;
            
            public class Example
            {
                   public void Example1()
                   {
                       Beam B1 = new Beam(new Point(15000,3000,0), new Point(21000,3000,0));
                       B1.Profile.ProfileString = "780*380";
                       B1.Material.MaterialString = "K40-1";
                       B1.Class = "5";
                       B1.Position.Plane = Position.PlaneEnum.MIDDLE;
                       B1.Position.Rotation = Position.RotationEnum.TOP;
                       B1.Position.Depth = Position.DepthEnum.BEHIND;
            
                       Beam B2 = new Beam(new Point(15000,3000,0), new Point(21000,3000,0));
                       B2.Profile.ProfileString = "780*380";
                       B2.Material.MaterialString = "K40-1";
                       B2.Class = "6";
                       B2.Position.Plane = Position.PlaneEnum.MIDDLE;
                       B2.Position.Rotation = Position.RotationEnum.TOP;
                       B2.Position.Depth = Position.DepthEnum.FRONT;
            
                       B1.Insert();
                       B2.Insert();
            
                       Seam S = new Seam();
                       S.Name = "seamdm";
                       S.Number = -1;
                       S.LoadAttributesFromFile("standard");
                       S.UpVector = new Vector(0,0,0);
                       S.AutoDirectionType = AutoDirectionTypeEnum.AUTODIR_BASIC;
                       S.AutoPosition = true;
            
                       S.SetPrimaryObject(B1);
                       S.SetSecondaryObject(B2);
            
                       S.SetInputPositions(new Point(15000,3000,0), new Point(21000,3000,0));
            
                       if(!S.Insert())
                           Console.WriteLine("Seam Insert failed");
                       else
                           Console.WriteLine(S.Identifier.ID);
                   }
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.Structures.Model.Seam.#ctor">
            <summary>
            Creates a new seam instance.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.Seam.SetPrimaryObject(Tekla.Structures.Model.ModelObject)">
            <summary>
            Sets the primary object.
            </summary>
            <param name="M">The primary object.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Seam.GetPrimaryObject">
            <summary>
            Returns the primary object.
            </summary>
            <returns>The primary object.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Seam.SetSecondaryObject(Tekla.Structures.Model.ModelObject)">
            <summary>
            Sets the secondary object of the seam. Use this
            method if you wish to add only one secondary object
            to the seam.
            </summary>
            <param name="M">The secondary object.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Seam.SetSecondaryObjects(System.Collections.ArrayList)">
            <summary>
            Sets the secondary objects.
            </summary>
            <param name="Secondaries">An array list containing all the secondary objects.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Seam.GetSecondaryObjects">
            <summary>
            Returns an array list containing all the secondary objects.
            </summary>
            <returns>An array list containing the secondary objects.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Seam.SetInputPositions(Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point)">
            <summary>
            Sets the start and end point of the seam.
            </summary>
            <param name="StartPoint">The start point of the seam.</param>
            <param name="EndPoint">The end point of the seam.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Seam.GetStartAndEndPositions(Tekla.Structures.Geometry3d.Point@,Tekla.Structures.Geometry3d.Point@)">
            <summary>
            Returns the start and end points of the seam.
            </summary>
            <param name="StartPoint">The start point of the seam.</param>
            <param name="EndPoint">The end point of the seam.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Seam.SetInputPolygon(Tekla.Structures.Model.Polygon)">
            <summary>
            Sets the input polygon of the seam.
            </summary>
            <param name="InputPolygon">The input polygon of the seam.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Seam.GetInputPolygon">
            <summary>
            Returns the input polygon of the seam.
            </summary>
            <returns>The input polygon of the seam instance.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Seam.Insert">
            <summary>
            Inserts the seam into the model database. All the attributes must be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Seam.Select">
            <summary>
            Selects a seam from the model database. The seam ID must be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Seam.Modify">
            <summary>
            Modifies the existing seam in the model database to match the current one.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Seam.Delete">
            <summary>
            Deletes the seam instance with the given ID from the model database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="P:Tekla.Structures.Model.Seam.UpVector">
            <summary>
            A vector indicating which direction is considered the up direction for the seam.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Seam.AutoDirectionType">
            <summary>
            The auto direction type.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Seam.AutoPosition">
            <summary>
            The auto position type. Defines that the seam will internally evaluate the final position more accurately. The input 
            positions are still needed for reference.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Seam.Code">
            <summary>
            The code of the seam. The code can be used to classify the seam.
            The code can be reported and shown in drawings.
            The maximum length of the string is 20 characters.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Seam.Class">
            <summary>
            The class of the seam.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Seam.Status">
            <summary>
            The read only status of the seam. 
            The status can be reported and shown in drawings.
            The color of the connection symbol in the model indicates the status of the seam.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Contour">
            <summary>
            The Contour class defines a possibly chamfered contour. Contours must not have loops.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.Contour.#ctor">
            <summary>
            Instantiates an empty contour.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.Contour.AddContourPoint(Tekla.Structures.Model.ContourPoint)">
            <summary>
            Adds a new contour point to the contour. Do not add the same contour point twice.
            Throws an exception if the point can't be added.
            </summary>
            <param name="Point">The contour point to add.</param>
        </member>
        <member name="P:Tekla.Structures.Model.Contour.ContourPoints">
            <summary>
            The contour points belonging to the contour.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotContour_t">
            <summary>
            Serialization structure for Contour
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotContour_t.nContourPoints">
            <summary>
            How many ContourPoints the Contour has.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotContour_t.aX">
            <summary>
            Array that contains the X coordinates for the ContourPoints
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotContour_t.aY">
            <summary>
            Array that contains the Y coordinates for the ContourPoints
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotContour_t.aZ">
            <summary>
            Array that contains the Z coordinates for the ContourPoints
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotContour_t.aChamferType">
            <summary>
            Array that contains the Chamfer Types for the ContourPoints
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotContour_t.aChamferX">
            <summary>
            Array that contains the Chamfer X-Values for the ContourPoints
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotContour_t.aChamferY">
            <summary>
            Array that contains the Chamfer Y-Values for the ContourPoints
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotContour_t.aChamferDZ1">
            <summary>
            Array that contains the Chamfer DZ1-Values for the ContourPoints
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotContour_t.aChamferDZ2">
            <summary>
            Array that contains the Chamfer DZ2-Values for the ContourPoints
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.dotContour_t.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="Size">How big we wish the struct to be</param>
        </member>
        <member name="T:Tekla.Structures.Model.ContourPoint">
            <summary>
            The ContourPoint class defines a point with possible chamfering information,
            used, for example, to define a contour plate.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.ContourPoint.#ctor">
            <summary>
            Creates a new contour point instance.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.ContourPoint.#ctor(Tekla.Structures.Geometry3d.Point,Tekla.Structures.Model.Chamfer)">
            <summary>
            Creates a new contour point using the given point and chamfer.
            </summary>
            <param name="P">The point (with X, Y and Z coordinates) to be used.</param>
            <param name="C">The chamfer to be used.</param>
        </member>
        <member name="M:Tekla.Structures.Model.ContourPoint.SetPoint(Tekla.Structures.Geometry3d.Point)">
            <summary>
            Sets the point's coordinates for the contour point.
            </summary>
            <param name="P">The point.</param>
        </member>
        <member name="P:Tekla.Structures.Model.ContourPoint.Chamfer">
            <summary>
            The chamfer for the contour point.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotContourPoint_t">
            <summary>
            Struct for the ContourPoint.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotContourPoint_t.Point">
            <summary>
            The point for the ContourPoint.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotContourPoint_t.Chamfer">
            <summary>
            The Chamfer for the ContourPoint
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Plane">
            <summary>
            The Plane class defines a plane in space using an origin, an X-axis and a Y-axis. 
            </summary>
            <example>
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures.Geometry3d;
            
            public class Example
            {
                   public void Example1()
                   {
                       Plane Plane = new Plane();
                       Plane.Origin = new Point(500, 0, 0);
                       Plane.AxisX = new Vector(500, 1000, 0);
                       Plane.AxisY = new Vector(500, 0, -1000);
                   }
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.Structures.Model.Plane.#ctor">
            <summary>
            Initializes a new plane instance.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.Plane.ToStruct(Tekla.Structures.ModelInternal.dotPlane_t@)">
            <summary>
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.Plane.FromStruct(Tekla.Structures.ModelInternal.dotPlane_t@)">
            <summary>
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Plane.Origin">
            <summary>
            The origin of the plane.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Plane.AxisX">
            <summary>
            The X-axis of the plane.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Plane.AxisY">
             <summary>
            The Y-axis of the plane.
             </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotPlane_t">
            <summary>
            Serialization structure for Plane.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPlane_t.Origin">
            <summary>
            Origin of the plane.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPlane_t.AxisX">
            <summary>
            The x-axis of the plane.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPlane_t.AxisY">
            <summary>
            The y-axis of the plane.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Polygon">
            <summary> The Polygon class represents a polygon object that has its corners at the given points. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Polygon.MAX_POLYGON_POINTS">
            <summary>
            The maximum number of polygon points that is typically valid in Tekla Structures.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Polygon.MIN_POLYGON_POINTS">
            <summary>
            The minimum number of polygon points that is typically valid in Tekla Structures.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.Polygon.#ctor">
            <summary> Initializes a new polygon instance with empty attributes. </summary>
        </member>
        <member name="M:Tekla.Structures.Model.Polygon.ToStruct(Tekla.Structures.ModelInternal.dotPolygon_t@)">
            <summary> 
            </summary>
            <param name="DotPolygon"></param>
        </member>
        <member name="M:Tekla.Structures.Model.Polygon.FromStruct(Tekla.Structures.ModelInternal.dotPolygon_t@)">
            <summary> 
            </summary>
            <param name="DotPolygon"></param>
        </member>
        <member name="P:Tekla.Structures.Model.Polygon.Points">
            <summary> The corners of the polygon. </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotPolygon_t">
            <summary>
            Serialization structure for Polygon.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPolygon_t.nPoints">
            <summary>
            Number of cornerpoints in polygon.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPolygon_t.aX">
            <summary>
            The x-coordinates of all points.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPolygon_t.aY">
            <summary>
            The y-coordinates of all points.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPolygon_t.aZ">
            <summary>
            The z-coordinates of all points.
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.dotPolygon_t.#ctor(System.Int32)">
            <summary>
            Instantiates a polygon structure with given arguments.
            </summary>
            <param name="Size">Number of points in polygon.</param>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.dotPolygon_t.GetPoints">
            <summary>
            Get polygon points in ArrayList.
            </summary>
            <returns>ArrayList of polygon Points</returns>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.PolygonExtensions">
            <summary>
            The <see cref="T:Tekla.Structures.ModelInternal.PolygonExtensions"/> class provides a set of Tekla-internal extension methods
            for <see cref="T:Tekla.Structures.Model.Polygon"/> related types.
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.PolygonExtensions.ToPolygon(Tekla.Structures.ModelInternal.dotPolygon_t)">
            <summary>
            Converts the <see cref="T:Tekla.Structures.ModelInternal.dotPolygon_t"/> value to a <see cref="T:Tekla.Structures.Model.Polygon"/> instance.
            </summary>
            <param name="dotPolygon">The <see cref="T:Tekla.Structures.ModelInternal.dotPolygon_t"/> value to convert.</param>
            <returns>The converted <see cref="T:Tekla.Structures.Model.Polygon"/> instance.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.PolygonExtensions.ToDotPolygon(Tekla.Structures.Model.Polygon)">
            <summary>
            Converts the given <see cref="T:Tekla.Structures.Model.Polygon"/> instance to a value of <see cref="T:Tekla.Structures.ModelInternal.dotPolygon_t"/>.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown when the instance to convert from is null.</exception>
            <param name="polygon">The <see cref="T:Tekla.Structures.Model.Polygon"/> to convert.</param>
            <returns>The converted <see cref="T:Tekla.Structures.ModelInternal.dotPolygon_t"/> value.</returns>
        </member>
        <member name="T:Tekla.Structures.Model.TransformationPlane">
            <summary>
            The TransformationPlane class describes a transformation from global model coordinates
            to local and back to global.
            </summary>
            <example>
            The following example shows how to use transformation planes for transforming points:
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures.Geometry3d;
            
            public class Example
            {
                   public void Example1()
                   {
                       Model myModel = new Model();
                       WorkPlaneHandler myWorkPlaneHandler = myModel.GetWorkPlaneHandler();
                       Beam myBeam = new Beam();
                       Point Point1 = new Point();
                       Point Point2 = new Point();
            
                       TransformationPlane currentPlane = myWorkPlaneHandler.GetCurrentTransformationPlane();
                       TransformationPlane beamPlane = new TransformationPlane(myBeam.GetCoordinateSystem());
                       Point lPoint1 = beamPlane.TransformationMatrixToLocal.Transform(currentPlane.TransformationMatrixToGlobal.Transform(Point1));
                       Point lPoint2 = beamPlane.TransformationMatrixToLocal.Transform(currentPlane.TransformationMatrixToGlobal.Transform(Point2));
                   }
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.Structures.Model.TransformationPlane.#ctor">
            <summary>
            Creates a new identity transformation using the global coordinate system.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.TransformationPlane.#ctor(Tekla.Structures.Geometry3d.CoordinateSystem)">
            <summary>
            Creates a new transformation plane defined by the given coordinate system.
            </summary>
            <param name="CoordinateSystem">The coordinate system to be used.</param>
        </member>
        <member name="M:Tekla.Structures.Model.TransformationPlane.#ctor(Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Vector,Tekla.Structures.Geometry3d.Vector)">
            <summary>
            Creates a new transformation plane defined by the given origin and two vectors.
            </summary>
            <param name="Origo">The origin to be used.</param>
            <param name="Xvector">The X vector to be used.</param>
            <param name="Yvector">The Y vector to be used.</param>
        </member>
        <member name="M:Tekla.Structures.Model.TransformationPlane.ToString">
            <summary>
            Returns a string representation of the matrices that transform to local and global coordinates.
            </summary>
            <returns>A string representation of the matrices that transform to local and global coordinates.</returns>
        </member>
        <member name="P:Tekla.Structures.Model.TransformationPlane.TransformationMatrixToGlobal">
            <summary>
            Gives a transformation matrix for converting local points in the transformation plane to global coordinates.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.TransformationPlane.TransformationMatrixToLocal">
            <summary>
            Gives a transformation matrix for converting points in the global plane to local coordinates in the transformation plane.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotTransformationPlane_t">
            <summary>
            Serialization structure for Plane.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotTransformationPlane_t.MatrixToLocal">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotTransformationPlane_t.MatrixToGlobal">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotTransformationPlane_t.QueryType">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotTransformationPlane_t.ReturnValue">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.dotTransformationPlane_t.#ctor(System.Int32)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="Size"></param>
        </member>
        <member name="T:Tekla.Structures.Model.ControlLine">
            <summary>
            The ControlLine class defines a user defined (possibly magnetic) line helping in modeling work.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures.Geometry3d;
            
            public class Example
            {
                   public void Example1()
                   {
                       ControlLine controlLine = new ControlLine();
            
                       LineSegment line = new LineSegment();
                       line.Point1 = new Point(6000,6000,0);
                       line.Point2 = new Point(6000,12000,0);
            
                       controlLine.IsMagnetic = true;
            
                       bool Result = false;
                       Result = controlLine.Insert();
                   }
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.Structures.Model.ControlLine.#ctor">
            <summary>
            Creates a new control line instance.
            <para>The default values are as follows:
            <list type="bullet">
            <item>Line = new LineSegment();</item>
            <item>IsMagnetic = false;</item>
            <item>Color = ControlLineColorEnum.YELLOW;</item>
            <item>Extension = 0.0;</item>
            </list>
            </para>
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.ControlLine.#ctor(Tekla.Structures.Geometry3d.LineSegment,System.Boolean)">
            <summary>
            Creates a new control line instance taking the line segment and magnetism as input.
            </summary>
            <param name="Line">The line segment to be used.</param>
            <param name="IsMagnetic">Determines whether the line is magnetic or not.</param>
        </member>
        <member name="M:Tekla.Structures.Model.ControlLine.Insert">
            <summary>
            Inserts the control line into the model.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ControlLine.Select">
            <summary>
            Selects the control line with the given Identifier.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ControlLine.Modify">
            <summary>
            Modifies the control line with the given Identifier.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ControlLine.Delete">
            <summary>
            Deletes the control line with the given Identifier.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="P:Tekla.Structures.Model.ControlLine.Line">
            <summary>
            The line segment defining the position of the control line.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.ControlLine.IsMagnetic">
            <summary>
            Determines whether the line is magnetic or not.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.ControlLine.Extension">
            <summary>
            The extension of the control line.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.ControlLine.Color">
            <summary>
            The color of the control line.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.ControlLine.ControlLineColorEnum">
            <summary>
            The different line colors.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ControlLine.ControlLineColorEnum.YELLOW_RED">
            <summary>
            The yellow/red color.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ControlLine.ControlLineColorEnum.BLACK">
            <summary>
            The black color.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ControlLine.ControlLineColorEnum.WHITE">
            <summary>
            The white color.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ControlLine.ControlLineColorEnum.RED">
            <summary>
            The red color.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ControlLine.ControlLineColorEnum.GREEN">
            <summary>
            The green color.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ControlLine.ControlLineColorEnum.BLUE">
            <summary>
            The blue color.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ControlLine.ControlLineColorEnum.CYAN">
            <summary>
            The cyan color.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ControlLine.ControlLineColorEnum.YELLOW">
            <summary>
            The yellow color.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ControlLine.ControlLineColorEnum.MAGENTA">
            <summary>
            The magenta color.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.ControlPlane">
            <summary>
            The ControlPlane class defines a user defined (possibly magnetic) plane helping in modeling work.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures.Geometry3d;
            
            public class Example
            {
                   public void Example1()
                   {
                       ControlPlane controlPlane = new ControlPlane();
            
                       Plane plane = new Plane();
                       plane.Origin = new Point(6000,6000,0);
                       plane.AxisX = new Vector(-3000,0,0);
                       plane.AxisY = new Vector(0,6000,0);
            
                       controlPlane.Plane = plane;
                       controlPlane.IsMagnetic = true;
            
                       bool Result = false;
                       Result = controlPlane.Insert();
                   }
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.Structures.Model.ControlPlane.#ctor">
            <summary>
            Creates a new control plane instance.
            <para>The default values are as follows:
            <list type="bullet">
            <item>Plane = new Plane();</item>
            <item>IsMagnetic = false;</item>
            <item>Name = "Plane";</item>
            </list>
            </para>
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.ControlPlane.#ctor(Tekla.Structures.Model.Plane,System.Boolean)">
            <summary>
            Creates a new control plane instance taking the plane and magnetism as input.
            </summary>
            <param name="P">The plane to be used.</param>
            <param name="IsMagnetic">Determines whether the plane is magnetic or not.</param>
        </member>
        <member name="M:Tekla.Structures.Model.ControlPlane.Insert">
            <summary>
            Inserts the control plane into the model.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ControlPlane.Select">
            <summary>
            Selects the control plane with the given ID.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ControlPlane.Modify">
            <summary>
            Modifies the control plane with the given ID.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ControlPlane.Delete">
            <summary>
            Deletes the control plane with the given ID.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="P:Tekla.Structures.Model.ControlPlane.Plane">
            <summary>
            The plane defining the position of the control plane.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.ControlPlane.IsMagnetic">
            <summary>
            Determines whether the plane is magnetic or not.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.ControlPlane.Name">
            <summary>
            The name of the control plane.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotControlObject_t">
            <summary>
            Struct for the ControlPlane.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotControlObject_t.ModelObject">
            <summary>
            The object we are extending (Inherited from)
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotControlObject_t.Plane">
            <summary>
            The Plane
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotControlObject_t.Color">
            <summary>
            The Color
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotControlObject_t.IsMagnetic">
            <summary>
            Determines if the Plane is Magnetic or not
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotControlObject_t.Extension">
            <summary>
            The line extension
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotControlObject_t.aName">
            <summary>
            The Name of the ControlPlane
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Grid">
            <summary>
            The Grid class defines a user defined (possibly magnetic) set of planes helping in modeling work. A grid has grid plane
            instances as children.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Model;
            
            public class Example
            {
                   public void Example1()
                   {
                       Grid Grid = new Grid();
            
                       Grid.IsMagnetic = true;
            
                       bool Result = false;
                       Result = Grid.Insert();
                   }
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.Structures.Model.Grid.#ctor">
            <summary>
            Creates a new grid instance.
            <para>The default values are as follows:
            <list type="bullet">
            <item>Name = "Grid";</item>
            <item>CoordinateX = "0.00 4*3000.00";</item>
            <item>CoordinateY = "0.00 5*6000.00";</item>
            <item>CoordinateZ = "0.00 6000.00 8000.00 9000.00";</item>
            <item>LabelX = "A B C D E";</item>
            <item>LabelY = "1 2 3 4 5 6";</item>
            <item>LabelZ = "+0 +6000 +8000 +9000";</item>
            <item>ExtensionLeftX = 2000.0;</item>
            <item>ExtensionLeftY = 2000.0;</item>
            <item>ExtensionLeftZ = 2000.0;</item>
            <item>ExtensionRightX = 2000.0;</item>
            <item>ExtensionRightY = 2000.0;</item>
            <item>ExtensionRightZ = 2000.0;</item>
            <item>IsMagnetic = false;</item>
            <item>ExtensionForMagneticArea = 0.0;</item>
            <item>Color = 1;</item>
            </list>
            </para>
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.Grid.Insert">
            <summary>
            Inserts the grid into the model.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Grid.Select">
            <summary>
            Selects the grid with the given ID.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Grid.Modify">
            <summary>
            Modifies the grid with the given ID.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Grid.Delete">
            <summary>
            Deletes the grid with the given ID.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="P:Tekla.Structures.Model.Grid.Name">
            <summary>
            The name of the grid.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Grid.CoordinateX">
            <summary>
            The coordinates for the X-axis.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Grid.CoordinateY">
            <summary>
            The coordinates for the Y-axis.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Grid.CoordinateZ">
            <summary>
            The coordinates for the Z-axis.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Grid.LabelX">
            <summary>
            The labels for the X-axis.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Grid.LabelY">
            <summary>
            The labels for the Y-axis.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Grid.LabelZ">
            <summary>
            The labels for the Z-axis.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Grid.ExtensionLeftX">
            <summary>
            The extension to the left X-axis.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Grid.ExtensionLeftY">
            <summary>
            The extension to the left Y-axis.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Grid.ExtensionLeftZ">
            <summary>
            The extension to the left Z-axis.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Grid.ExtensionRightX">
            <summary>
            The extension to the right X-axis.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Grid.ExtensionRightY">
            <summary>
            The extension to the right Y-axis.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Grid.ExtensionRightZ">
            <summary>
            The extension to the right Z-axis.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Grid.IsMagnetic">
            <summary>
            Determines whether the grid is magnetic or not.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Grid.ExtensionForMagneticArea">
            <summary>
            The extension for the magnetic area.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Grid.Color">
            <summary>
            Determines the color of the grid. This works only in wireframe views.
            The color of grids in rendered views can be changed using the advanced option XS_GRID_COLOR.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotGrid_t">
            <summary>
            Struct for the Grid
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGrid_t.ModelObject">
            <summary>
            The object we are extending (Inherited from)
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGrid_t.aCoordinateX">
            <summary>
            Coordinates for the X-axel
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGrid_t.aCoordinateY">
            <summary>
            Coordinates for the Y-axel
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGrid_t.aCoordinateZ">
            <summary>
            Coordinates for the Z-axel
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGrid_t.aLabelX">
            <summary>
            Labels for the X-axel
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGrid_t.aLabelY">
            <summary>
            Labels for the Y-axel
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGrid_t.aLabelZ">
            <summary>
            Labels for the Z-axel
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGrid_t.ExtensionLeftX">
            <summary>
            Extension to left X-axis
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGrid_t.ExtensionLeftY">
            <summary>
            Extension to left Y-axis
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGrid_t.ExtensionLeftZ">
            <summary>
            Extension to left Z-axis
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGrid_t.ExtensionRightX">
            <summary>
            Extension to right X-axis
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGrid_t.ExtensionRightY">
            <summary>
            Extension to right Y-axis
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGrid_t.ExtensionRightZ">
            <summary>
            Extension to right Z-axis
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGrid_t.IsMagnetic">
            <summary>
            Determines if the Grid is Magnetic or not
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGrid_t.ExtensionForMagneticArea">
            <summary>
            Extension for magnetic area
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGrid_t.Color">
            <summary>
            Determines the Color of the Grid. This works only in wireframe views.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.GridPlane">
            <summary>
            The GridPlane class defines a user defined (possibly magnetic) plane helping in modeling work. A grid plane must
            always belong to a father grid instance.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures.Geometry3d;
            
            public class Example
            {
                   public void Example1()
                   {
                       GridPlane GridPlane = new GridPlane();
            
                       Plane plane = new Plane();
                       plane.Origin = new Point(6000,6000,0);
                       plane.AxisX = new Vector(-3000,0,0);
                       plane.AxisY = new Vector(0,6000,0);
            
                       GridPlane.Plane = plane;
                       GridPlane.IsMagnetic = true;
            
                       bool Result = false;
                       Result = GridPlane.Insert();
                   }
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.Structures.Model.GridPlane.#ctor">
            <summary>
            Creates a new grid plane instance.
            <para>The default values are as follows:
            <list type="bullet">
            <item>Plane = new Plane();</item>
            <item>Plane.Origin = new Point(500.0, 500.0, 0.0);</item>
            <item>Plane.AxisX  = new Vector(2000.0, 0.0, 0.0);</item>
            <item>Plane.AxisY  = new Vector(0.0, 0.0, 2000.0);</item>
            <item>Label = "Default";</item>
            <item>Color = 1;</item>
            <item>IsMagnetic = false;</item>
            <item>ExtensionForMagneticArea = 0.0;</item>
            <item>ExtensionLeft  = 2000.0;</item>
            <item>ExtensionRight = 2000.0;</item>
            <item>ExtensionBelow = 2000.0;</item>
            <item>ExtensionAbove = 2000.0;</item>
            <item>DrawingVisibility = false;</item>
            </list>
            </para>
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.GridPlane.#ctor(Tekla.Structures.Model.Plane,System.String)">
            <summary>
            Creates a new grid plane instance taking the plane and label as input.
            </summary>
            <param name="Plane">The plane that defines the grid plane.</param>
            <param name="Label">The label for the grid plane.</param>
        </member>
        <member name="M:Tekla.Structures.Model.GridPlane.Insert">
            <summary>
            Inserts the grid plane into the model.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.GridPlane.Select">
            <summary>
            Selects the grid plane with the given ID.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.GridPlane.Modify">
            <summary>
            Modifies the grid plane with the given ID.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.GridPlane.Delete">
            <summary>
            Deletes the grid plane with the given ID.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="P:Tekla.Structures.Model.GridPlane.Plane">
            <summary>
            The plane defining the position of the grid plane.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.GridPlane.Father">
            <summary>
            The father grid of the grid plane.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.GridPlane.Label">
            <summary>
            The label for the grid plane.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.GridPlane.Color">
            <summary>
            The color of the grid plane. This works only in wireframe views.
            The color of grid planes in rendered views can be changed using the advanced option XS_GRID_COLOR.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.GridPlane.IsMagnetic">
            <summary>
            Whether the grid plane is magnetic or not.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.GridPlane.ExtensionForMagneticArea">
            <summary>
            The extension for the magnetic area.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.GridPlane.ExtensionLeft">
            <summary>
            The line extension on the left.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.GridPlane.ExtensionRight">
            <summary>
            The line extension on the right.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.GridPlane.ExtensionBelow">
            <summary>
            The line extension below.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.GridPlane.ExtensionAbove">
            <summary>
            The line extension above.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.GridPlane.DrawingVisibility">
            <summary>
            The visibility of the grid plane in drawings.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotGridPlane_t">
            <summary>
            Struct for the GridPlane
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGridPlane_t.ModelObject">
            <summary>
            The object we are extending (Inherited from)
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGridPlane_t.Plane">
            <summary>
            The plane
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGridPlane_t.FatherId">
            <summary>
            ID of the father grid
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGridPlane_t.aLabel">
            <summary>
            The Label of the GridPlane
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGridPlane_t.Color">
            <summary>
            Determines the Color of the GridPlane. This works only in wireframe views.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGridPlane_t.IsMagnetic">
            <summary>
            Determines if the Plane is Magnetic or not
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGridPlane_t.ExtensionForMagneticArea">
            <summary>
            Extension for magnetic area
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGridPlane_t.ExtensionLeft">
            <summary>
            Line extension left
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGridPlane_t.ExtensionRight">
            <summary>
            Line extension right
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGridPlane_t.ExtensionBelow">
            <summary>
            Line extension below
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGridPlane_t.ExtensionAbove">
            <summary>
            Line extension above
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGridPlane_t.DrawingVisibility">
            <summary>
            Determines if the GridPlane is visible in drawings or not
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.HierarchicDefinitionTypeEnum">
            <summary>
            Defines the different types of classification hierarchies.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.HierarchicDefinitionTypeEnum.DOT_HIERARCHIC_CUSTOM_TYPE">
            <summary>
            The custom type classification hierarchy.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.HierarchicDefinitionTypeEnum.DOT_HIERARCHIC_LOGICAL_BUILDING_AREA">
            <summary>
            The logical building area classification hierarchy.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.HierarchicDefinitionTypeEnum.DOT_HIERARCHIC_OBJECT_TYPE">
            <summary>
            The object type classification hierarchy.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.HierarchicDefinitionTypeEnum.DOT_HIERARCHIC_TASK_WORK_TYPE">
            <summary>
            The task work type classification hierarchy.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.HierarchicDefinitionTypeEnum.DOT_HIERARCHIC_TASK_SCENARIO">
            <summary>
            The task scenario classification hierarchy.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.HierarchicDefinition">
            <summary>
            The HierarchicDefinition class defines a hierarchy structure. This hierarchy structure can 
            be instantiated and extended by hierarchical objects.
            </summary>
            <seealso cref="T:Tekla.Structures.Model.HierarchicObject"/>
            <example>
            <code>
            using Tekla.Structures.Model;
            
            public class Example
            {
                   public void Example1()
                   {
                       HierarchicDefinition scenarioDefinition = new HierarchicDefinition();
                       scenarioDefinition.Name = "Scenario type";
                       scenarioDefinition.HierarchyType = HierarchicDefinitionTypeEnum.DOT_HIERARCHIC_TASK_SCENARIO;
                       scenarioDefinition.Insert();
                   }
            }
            </code>
            </example>
        </member>
        <member name="F:Tekla.Structures.Model.HierarchicDefinition.MAX_HIERARCHIC_LIST_OBJECTS">
            <summary>
            Maximum number of hierarchical definition resources.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.HierarchicDefinition.#ctor">
            <summary>
            Creates a new hierarchical definition instance.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.HierarchicDefinition.#ctor(Tekla.Structures.Identifier)">
            <summary>
            Instantiates a hierarchical definition with a known identifier. The instantiation has to be done
            before the hierarchical definition instance can be selected.
            </summary>
            <param name="ID">The identifier of an existing hierarchical definition.</param>
            <example>
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures;
            
            public class Example
            {
                   public void Example1()
                   {
                       Identifier id = new Identifier(357);
            
                       HierarchicDefinition hierarchicalDefinition = new HierarchicDefinition(id);
                   }
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.Structures.Model.HierarchicDefinition.AddObjects(System.Collections.ArrayList)">
            <summary>
            Associates hierarchical objects with the hierarchical definition. 
            Fails if the hierarchical definition doesn't exist in the model.
            </summary>
            <param name="Objects">The hierarchical objects.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.HierarchicDefinition.RemoveObjects(System.Collections.ArrayList)">
            <summary>
            Removes associations to the given list of hierarchical objects.
            Fails if the hierarchical definition doesn't exist in the model.
            </summary>
            <param name="Objects">The hierarchical objects.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.HierarchicDefinition.Insert">
            <summary>
            Inserts the hierarchical definition instance in the model.
            </summary>
            <returns>True if the insertion was successful.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.HierarchicDefinition.Select">
            <summary>
            Selects the hierarchical definition instance from the model. The ID must be set.
            </summary>
            <returns>True if the selection was successful.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.HierarchicDefinition.Modify">
            <summary>
            Modifies the hierarchical definition instance in the model. The ID must be set.
            </summary>
            <returns>True if the modification was successful.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.HierarchicDefinition.Delete">
            <summary>
            Deletes the hierarchical definition instance from the model. The ID must be set.
            </summary>
            <returns>True if the deletion was successful.</returns>
        </member>
        <member name="P:Tekla.Structures.Model.HierarchicDefinition.Name">
            <summary>
            The name of the hierarchical definition.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.HierarchicDefinition.CustomType">
            <summary>
            The custom type of the hierarchical definition.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.HierarchicDefinition.HierarchyType">
            <summary>
            The type of the hierarchical definition.
            </summary>
            <seealso cref="T:Tekla.Structures.Model.HierarchicDefinitionTypeEnum"/>
        </member>
        <member name="P:Tekla.Structures.Model.HierarchicDefinition.Father">
            <summary>
            The father of the hierarchical definition.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.HierarchicDefinition.HierarchyIdentifier">
            <summary>
            The GUID of the hierarchical definition.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.HierarchicDefinition.Drawable">
            <summary>
            Defines whether the hierarchical definition is a drawable area in the model.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.HierarchicDefinition.HierarchicChildren">
            <summary>
            An array list that contains the hierarchical definition's children.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotHierarchicDefinition_t">
            <summary>
            Serialization structure for hierarchical definition.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotHierarchicDefinition_t.ModelObject">
            <summary>
            The object we are extending (Inherited from).
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotHierarchicDefinition_t.OperationType">
            <summary>
            Operation type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotHierarchicDefinition_t.aName">
            <summary>
            Name of the hierarchical definition.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotHierarchicDefinition_t.aCustomType">
            <summary>
            Custom type of the hierarchical definition.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotHierarchicDefinition_t.aHierarchyIdentifier">
            <summary>
            Guid of the hierarchical definition.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotHierarchicDefinition_t.HierarchyType">
            <summary>
            Definition type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotHierarchicDefinition_t.Drawable">
            <summary>
            Defines if the definition is a drawable area in the model.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotHierarchicDefinition_t.ObjectParent">
            <summary>
            Id of the Father object.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotHierarchicDefinition_t.nSubHierarchyIds">
            <summary>
            How many objects the hierarchical definition has.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotHierarchicDefinition_t.aSubHierarchyIds">
            <summary>
            Array that contains object ids of the hierarchical definition.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.HierarchicObject">
            <summary>
            The HierarchicObject class defines an object in a tree-structured hierarchy. The hierarchy structure is defined
            by hierarchical definitions which the hierarchical objects instantiate. Hierarchical objects may contain
            other hierarchical objects, thus forming a sub-hierarchy, or model objects.
            </summary>
            <seealso cref="T:Tekla.Structures.Model.HierarchicDefinition"/>
            <example>
            <code>
            using Tekla.Structures.Model;
            
            public class Example
            {
                   public void Example1()
                   {
                       HierarchicDefinition scenarioDefinition = new HierarchicDefinition();
                       scenarioDefinition.Name = "Scenario type";
                       scenarioDefinition.HierarchyType = HierarchicDefinitionTypeEnum.DOT_HIERARCHIC_TASK_SCENARIO;
                       scenarioDefinition.Insert();
            
                       HierarchicObject scenario = new HierarchicObject();
                       scenario.Name = "First scenario";
                       scenario.Definition = scenarioDefinition;
                       scenario.Insert();
                   }
            }
            </code>
            </example>
        </member>
        <member name="F:Tekla.Structures.Model.HierarchicObject.MAX_HIERARCHIC_CHILDREN">
            <summary>
            Maximum number of hierarchical object resources.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.HierarchicObject.#ctor">
            <summary>
            Creates a new hierarchical object instance.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.HierarchicObject.#ctor(Tekla.Structures.Identifier)">
            <summary>
            Instantiates a hierarchical object with a known identifier. The instantiation has to be done
            before the hierarchical definition instance can be selected.
            </summary>
            <param name="ID">The identifier of an existing hierarchical object.</param>
            <example>
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures;
            
            public class Example
            {
                   public void Example1()
                   {
                       Identifier id = new Identifier(357);
            
                       HierarchicObject hierarchicalObject = new HierarchicObject(id);
                   }
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.Structures.Model.HierarchicObject.Insert">
            <summary>
            Inserts the hierarchical object instance in the model.
            </summary>
            <returns>True if the insertion was successful.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.HierarchicObject.Select">
            <summary>
            Selects the hierarchical object instance from the model. The ID must be set.
            </summary>
            <returns>True if the selection was successful.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.HierarchicObject.Modify">
            <summary>
            Modifies the hierarchical object instance in the model. The ID must be set.
            </summary>
            <returns>True if the modification was successful.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.HierarchicObject.Delete">
            <summary>
            Deletes the hierarchical object instance from the model. The ID must be set.
            </summary>
            <returns>True if the deletion was successful.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.HierarchicObject.AddObjects(System.Collections.ArrayList)">
            <summary>
            Associates model objects with the hierarchical object.
            Fails if the hierarchical definition doesn't exist in the model.
            </summary>
            <param name="Objects">The model objects.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.HierarchicObject.RemoveObjects(System.Collections.ArrayList)">
            <summary>
            Removes associations to the given list of model objects.
            Fails if the hierarchical definition doesn't exist in the model.
            </summary>
            <param name="Objects">The model objects.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="P:Tekla.Structures.Model.HierarchicObject.Name">
            <summary>
            The name of the hierarchical object.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.HierarchicObject.Definition">
            <summary>
            The hierarchical definition which the hierarchical object is associated with.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.HierarchicObject.Father">
            <summary>
            The father of the hierarchical object.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.HierarchicObject.HierarchicChildren">
            <summary>
            An array list that contains the hierarchical object's hierarchical children (of the type hierarchical object).
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotHierarchicObject_t">
            <summary>
            Serialization structure for hierarchical definition.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotHierarchicObject_t.ModelObject">
            <summary>
            The object we are extending (Inherited from).
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotHierarchicObject_t.OperationType">
            <summary>
            Operation type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotHierarchicObject_t.aName">
            <summary>
            Name of the hierarchical definition.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotHierarchicObject_t.Type">
            <summary>
            Type of the hierarchical object.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotHierarchicObject_t.Definition">
            <summary>
            The hierarchical definition that this object is an instance of.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotHierarchicObject_t.Parent">
            <summary>
            Id of the Father object.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotHierarchicObject_t.nSubHierarchyIds">
            <summary>
            How many objects the hierarchical definition has.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotHierarchicObject_t.aSubHierarchyIds">
            <summary>
            Array that contains object ids of the hierarchical definition.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotHierarchicList_t">
            <summary>
            Serialization structure for adding and removing relations between model objects and hierarchic objects.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotHierarchicList_t.ModelFatherObject">
            <summary>
            The father (hierarchic) object of this operation
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotHierarchicList_t.OperationType">
            <summary>
            Defines if this is an add or delete operation
            <seealso cref="T:Tekla.Structures.ModelInternal.dotObjectOperationsEnum"/>
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotHierarchicList_t.ObjectsLeftToGet">
            <summary>
            How many objects left to get on next command
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotHierarchicList_t.nObjects">
            <summary>
            Number of objects in this struct
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotHierarchicList_t.aObjects">
            <summary>
            Object ids
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotObjectOperationsEnum">
            <summary>
            Defines operations done on Tekla Structures core side
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotObjectOperationsEnum.DOT_CREATE_OBJECT">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotObjectOperationsEnum.DOT_MODIFY_OBJECT">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotObjectOperationsEnum.DOT_SELECT_OBJECT">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotObjectOperationsEnum.DOT_DELETE_OBJECT">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.History.ModelHistory">
            <summary>
            The ModelHistory class provides history information about the objects of the model
            that is currently open in Tekla Structures.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures.Model.History;
            using System;
            using System.Diagnostics;
            
            public class Example
            {
                   public void Example1()
                   {
                       ModificationStamp ModStamp = new ModificationStamp();
                       bool SuccessFlag = true;
                       ModelObjectEnumerator modelEnum = ModelHistory.GetModifiedObjects(ModStamp);
                       while (modelEnum.MoveNext())
                       {
                           ModelObject mo = modelEnum.Current;
                           if (mo.Identifier.ID &lt; ModStamp.LocalStamp)
                           {
                               SuccessFlag = false;
                               Console.WriteLine("!!!Wrong modified id: " + mo.Identifier.ID);
                           }
                           else
                           {
                               Console.WriteLine("Next correct modified id: " + mo.Identifier.ID);
                           }
                       }
                       ModStamp = ModelHistory.GetCurrentModificationStamp();
                       Console.WriteLine("Current ModStamp: {0}", ModStamp.LocalStamp);
                       Debug.Assert(Equals(SuccessFlag, true), "Incorrect modified id came up.");
                       Debug.Assert(ModStamp != null, "Modification stamp does not exist.");
                   }
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.Structures.Model.History.ModelHistory.GetModifiedObjects(Tekla.Structures.Model.History.ModificationStamp)">
            <summary>
            Gets a list of the objects that have been added or modified after the modification stamp.
            </summary>
            <param name="ModStamp">The modification stamp.</param>
            <returns>A list of the objects that have been modified after the given modification stamp.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.History.ModelHistory.GetModifiedObjectsWithType(Tekla.Structures.Model.History.ModificationStamp,Tekla.Structures.Model.ModelObject.ModelObjectEnum)">
            <summary>
            Gets based on type a list of the objects that have been added or modified after the modification stamp.
            </summary>
            <param name="ModStamp">The modification stamp.</param>
            <param name="Enum">The type of the objects to return.</param>
            <returns>A list of the objects that have been modified after the given modification stamp.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.History.ModelHistory.GetDeletedObjects(Tekla.Structures.Model.History.ModificationStamp)">
            <summary>
            Gets a list of the objects that have been deleted after the modification stamp.
            </summary>
            <param name="ModStamp">The modification stamp.</param>
            <returns>A list of the objects that have been deleted after the given modification stamp.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.History.ModelHistory.GetDeletedObjectsWithType(Tekla.Structures.Model.History.ModificationStamp,Tekla.Structures.Model.ModelObject.ModelObjectEnum)">
            <summary>
            Gets based on type a list of the objects that have been deleted after the modification stamp.
            </summary>
            <param name="ModStamp">The modification stamp.</param>
            <param name="Enum">The type of the objects to return.</param>
            <returns>A list of the objects that have been deleted after the given modification stamp.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.History.ModelHistory.GetCurrentModificationStamp">
            <summary>
            Gets the current modification stamp from the model.
            </summary>
            <returns>The current modification stamp.</returns>
        </member>
        <member name="T:Tekla.Structures.Model.History.ModificationStamp">
            <summary>
            The ModificationStamp class provides the modification stamp for the objects of the model
            that is currently open in Tekla Structures.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.History.ModificationStamp._CurrentModStamp">
            <summary>
            Current Stamp for modified or new objects
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.History.ModificationStamp._CurrentSaveStamp">
            <summary>
            Current SaveStamp for multi-user model
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.History.ModificationStamp.#ctor">
            <summary>
            Creates a new modification stamp instance where the current modification stamp is 0.
            Can be used for fetching all the created or deleted model objects from the model history.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.History.ModificationStamp.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new modification stamp instance with the given local and server stamps.
            Can be used for fetching from the model history all the model objects that have been created
            or deleted after the specified stamp.
            </summary>
            <param name="LocalStamp">The local stamp to be used for fetching the model changes after the stamp.</param>
            <param name="ServerStamp">The server stamp for fetching the external multi-user or synchronized
            model changes after the stamp.</param>
        </member>
        <member name="P:Tekla.Structures.Model.History.ModificationStamp.LocalStamp">
            <summary>
            The modification stamp for the local changes.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.History.ModificationStamp.ServerStamp">
            <summary>
            The modification stamp from the multi-user server for the external changes caused by
            the saving of the multi-user model.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotModificationStamp_t">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotModificationStamp_t.CurrentModStamp">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotModificationStamp_t.CurrentSaveStamp">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.dotModificationStamp_t.ToStruct(System.Int32,System.Int32)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="I"></param>
            <param name="S"></param>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.dotModificationStamp_t.FromStruct(Tekla.Structures.Model.History.ModificationStamp)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="I"></param>
        </member>
        <member name="T:Tekla.Structures.Model.Load">
            <summary>
            The Load class is an abstract base class for all loads.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Load._Group">
            <summary>
            Load _Group object for this load. Id contains the db id in ts side
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.Load.#ctor">
            <summary>
            Creates a new load instance.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Load.FatherId">
            <summary>
            The identifier of the father object that the load is attached to.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Load.Spanning">
            <summary>
            The load spanning.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Load.PrimaryAxisDirection">
            <summary>
            The vector for the primary axis direction.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Load.AutomaticPrimaryAxisWeight">
            <summary>
            The automatic primary axis weight.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Load.Weight">
            <summary>
            The weight.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Load.LoadDispersionAngle">
            <summary>
            The load dispersion angle.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Load.CreateFixedSupportConditionsAutomatically">
            <summary>
            Indicates whether fixed support conditions are created automatically.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Load.LoadAttachment">
            <summary>
            The load attachment.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Load.PartNames">
            <summary>
            The part names.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Load.PartFilter">
            <summary>
            The part filter.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Load.BoundingBoxDx">
            <summary>
            The dimension of the bounding box in the X direction.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Load.BoundingBoxDy">
            <summary>
            The dimension of the bounding box in the Y direction.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Load.BoundingBoxDz">
            <summary>
            The dimension of the bounding box in the Z direction.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Load.Group">
            <summary>
            The load group object for the load.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Load.LoadSpanningEnum">
            <summary>
            The load spanning.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Load.LoadSpanningEnum.LOAD_SPANNING_SINGLE">
            <summary>
            Single spanning.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Load.LoadSpanningEnum.LOAD_SPANNING_DOUBLE">
            <summary>
            Double spanning.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Load.LoadAttachmentEnum">
            <summary>
            The load attachment.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Load.LoadAttachmentEnum.LOAD_ATTACHMENT_ATTACH_TO_MEMBER">
            <summary>
            Attach to member.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Load.LoadAttachmentEnum.LOAD_ATTACHMENT_DONT_ATTACH">
            <summary>
            Don't attach.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Load.LoadPartNamesEnum">
            <summary>
            The load part names.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Load.LoadPartNamesEnum.LOAD_PART_NAMES_EXCLUDE">
            <summary>
            Exclude parts by name.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Load.LoadPartNamesEnum.LOAD_PART_NAMES_INCLUDE">
            <summary>
            Include parts by name.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotLoadCommonAttributes_t">
            <summary>
            Serialization structure for the Load.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotLoadCommonAttributes_t.ModelObject">
            <summary>
            Base class.
            </summary>
            
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotLoadCommonAttributes_t.FatherId">
            <summary>
            Id of the Father for the Load.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotLoadCommonAttributes_t.Spanning">
            <summary>
            Spanning.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotLoadCommonAttributes_t.PrimaryAxisDirection">
            <summary>
            Vector for the Primary Axis Direction.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotLoadCommonAttributes_t.AutomaticPrimaryAxisWeight">
            <summary>
            Whether to use Automatic Primary Axis Weight or not.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotLoadCommonAttributes_t.Weight">
            <summary>
            Weight.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotLoadCommonAttributes_t.LoadDispersionAngle">
            <summary>
            Load Dispersion Angle.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotLoadCommonAttributes_t.CreateFixedSupportConditionsAutomatically">
            <summary>
            Whether to Create Fixed Support Conditions Automatically or not.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotLoadCommonAttributes_t.LoadAttachment">
            <summary>
            Attach To Member or Don't Attach
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotLoadCommonAttributes_t.PartNames">
            <summary>
            Include or Exclude Parts
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotLoadCommonAttributes_t.aPartFilter">
            <summary>
            Part Filter.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotLoadCommonAttributes_t.BoundingBoxDx">
            <summary>
            Bounding Box X.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotLoadCommonAttributes_t.BoundingBoxDy">
            <summary>
            Bounding Box Y.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotLoadCommonAttributes_t.BoundingBoxDz">
            <summary>
            Bounding Box Z.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotLoadCommonAttributes_t.LoadGroupId">
            <summary>
            Load group attribute for loads
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotLoadClassAttributes_t">
            <summary>
            Serialization structure for LoadPoint.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotLoadClassAttributes_t.Position">
            <summary>
            The Position for the Load. Contains 1 -> n points, depending on the type of Load
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotLoadClassAttributes_t.P1">
            <summary>
            The P Vectors for the load.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotLoadClassAttributes_t.P2">
            <summary>
            The P Vectors for the load.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotLoadClassAttributes_t.P3">
            <summary>
            The P Vectors for the load.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotLoadClassAttributes_t.P4">
            <summary>
            The P Vectors for the load.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotLoadClassAttributes_t.Moment">
            <summary>
            The Moment Vector for the Load.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotLoadClassAttributes_t.Torsion1">
            <summary>
            Torsion 1.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotLoadClassAttributes_t.Torsion2">
            <summary>
            Torsion 2.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotLoadClassAttributes_t.DistanceA">
            <summary>
            Distance a.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotLoadClassAttributes_t.DistanceB">
            <summary>
            Distance b.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotLoadClassAttributes_t.LoadForm">
            <summary>
            Load Form type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotLoadClassAttributes_t.TemperatureChangeForAxialElongation">
            <summary>
            Temperature change for axial elongation.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotLoadClassAttributes_t.TemperatureDifferentialTopToBottom">
            <summary>
            Temperature differential top to bottom.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotLoadClassAttributes_t.TemperatureDifferentialSideToSide">
            <summary>
            Temperature differential side to side.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotLoadClassAttributes_t.InitialAxialElongation">
            <summary>
            Initial axial elongation.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.LoadArea">
            <summary>
            The LoadArea class defines a linearly-distributed force bound by a triangle or a quadrangle.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures.Geometry3d;
            using System;
            
            public class Example
            {
                   public void Example1()
                   {
                       LoadArea L = new LoadArea();
                       L.P1 = new Vector(1000,2000,3000);
                       L.P2 = new Vector(4000,5000,6000);
                       L.P3 = new Vector(7000,8000,9000);
                       L.DistanceA = 5;
                       L.Position1 = new Point(6000,6000,0);
                       L.Position2 = new Point(8000,6000,0);
                       L.Position3 = new Point(8000,9000,0);
                       L.LoadForm = LoadArea.AreaLoadFormEnum.LOAD_FORM_AREA_PARALLELOGRAM;
            
                       L.AutomaticPrimaryAxisWeight = true;
                       L.BoundingBoxDx = 500;
                       L.BoundingBoxDy = 500;
                       L.BoundingBoxDz = 500;
                       L.LoadDispersionAngle = 5;
                       L.PartFilter = "testing";
                       L.PartNames = Load.LoadPartNamesEnum.LOAD_PART_NAMES_INCLUDE;
                       L.PrimaryAxisDirection = new Vector(1000, 500, 0);
                       L.Spanning = Load.LoadSpanningEnum.LOAD_SPANNING_SINGLE;
                       L.Weight = 2;
                       L.CreateFixedSupportConditionsAutomatically = true;
            
                       if (!L.Insert())
                           Console.WriteLine("LoadArea Insert failed!");
                   }
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.Structures.Model.LoadArea.#ctor">
            <summary>
            Creates a new load area instance.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.LoadArea.Insert">
            <summary>
            Inserts the load area into the model database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.LoadArea.Select">
            <summary>
            Selects a load area from the model database. The ID must be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.LoadArea.Modify">
            <summary>
            Modifies the existing load area in the model database to match the current one.
            At the moment it is not possible to change the load attachment or the father.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.LoadArea.Delete">
            <summary>
            Deletes the load area instance with the given ID from the model database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="P:Tekla.Structures.Model.LoadArea.Position1">
            <summary>
            The first position point.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.LoadArea.Position2">
            <summary>
            The second position point.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.LoadArea.Position3">
            <summary>
            The third position point.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.LoadArea.P1">
            <summary>
            The load magnitude vector P1.
            The values are given in the local coordinate system of the load (not in the current coordinate system).
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.LoadArea.P2">
            <summary>
            The load magnitude vector P2.
            The values are given in the local coordinate system of the load (not in the current coordinate system).
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.LoadArea.P3">
            <summary>
            The load magnitude vector P3.
            The values are given in the local coordinate system of the load (not in the current coordinate system).
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.LoadArea.P4">
            <summary>
            The load magnitude vector P4. This one cannot be set.
            The values are given in the local coordinate system of the load (not in the current coordinate system).
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.LoadArea.LoadForm">
            <summary>
            The load form.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.LoadArea.DistanceA">
            <summary>
            The distance a (for enlarging or reducing the loaded area).
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.LoadArea.AreaLoadFormEnum">
            <summary>
            The area load form.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadArea.AreaLoadFormEnum.LOAD_FORM_AREA_PARALLELOGRAM">
            <summary>
            The area load form is a parallelogram.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadArea.AreaLoadFormEnum.LOAD_FORM_AREA_TRIANGLE">
            <summary>
            The area load form is a triangle.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.LoadGroup">
            <summary>
            The LoadGroup class implements grouping functionality related to all loads.
            Each load should be assigned to a load group. Each load group contains loads 
            caused by the same action and to which you want to refer collectively.
            <para>
            Tekla Structures assumes that all loads in a group
            <list type="bullet">
            <item>Have the same partial safety and other combination factors</item>
            <item>Have the same action direction</item>
            <item>Occur at the same time and all together</item>
            </list>
            </para>
            <para>
            You may create new load groups, modify existing ones and delete 
            load groups via the .NET interface. You may also change the assigned load group 
            of a load and list all the load groups found in the model via the 
            ModelObjectSelector interface. The model always has at least one load group.
            </para>
            </summary>
            <example>
            Creating a new load group:
            <code>
            using Tekla.Structures.Model;
            
            public class Example
            {
                   public void Example1()
                   {
                       LoadGroup WindLoads = new LoadGroup();
            
                       WindLoads.GroupName = "ExtremeNorthWind";
                       WindLoads.GroupType = LoadGroup.LoadGroupType.EUROCODE_WIND_LOAD;
                       WindLoads.Direction = LoadGroup.LoadGroupDirection.DIR_Y;
                       WindLoads.Compatible = 2;
                       WindLoads.Incompatible = 15;
                       WindLoads.Color = LoadGroup.Colors.RED;  
            
                       WindLoads.Insert();
                   }
            }
            </code>
            Selecting and browsing through all load groups:
            <code>
            using Tekla.Structures.Model;
            using System;
            
            public class Example
            {
                   public void Example1()
                   {
                       Model Model = new Model();
            
                       ModelObjectEnumerator LoadGroups = 
                           Model.GetModelObjectSelector().GetAllObjectsWithType(ModelObject.ModelObjectEnum.LOAD_GROUP);
                       foreach (LoadGroup group in LoadGroups)
                       {
                           Console.WriteLine("Group: " + group.GroupName + "(ID " + group.Identifier.ID + ")");
                       }
                   }
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.Structures.Model.LoadGroup.#ctor">
            <summary>
            Creates a new load group instance.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.LoadGroup.CheckVariables">
            <summary>
            Checks that all variables have a value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.Model.LoadGroup.Insert">
            <summary>
            Inserts the load group into the model database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.LoadGroup.Select">
            <summary>
            Selects a load group from the model database. The ID must be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.LoadGroup.Modify">
            <summary>
            Modifies the existing load group in the model database to match the current one.
            At the moment it is not possible to change the load attachment or the father.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.LoadGroup.Delete">
            <summary>
            Deletes the load group instance with the given ID from the model database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="P:Tekla.Structures.Model.LoadGroup.GroupName">
            <summary>
            The load group name. The maximum size is 126 characters.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.LoadGroup.GroupType">
            <summary>
            The load group type.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.LoadGroup.Direction">
            <summary>
            The load group direction.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.LoadGroup.Compatible">
            <summary>
            This variable is used to store information on which groups are compatible 
            with each other in structural analysis load combination.
            
            Load combination is a process in which some simultaneously acting load groups 
            are multiplied by their partial safety factors and combined with each other 
            according to specific rules. 
            To accurately combine loads which have the same load group type, 
            you need to identify which load groups can occur at the same time,
            i.e. are <i>compatible</i>.
            This variable stores one integer, and all groups who have this same integer 
            are known to be compatible with each other. Depending on the analysis needs,
            they may be calculated together, in smaller combinations, or separately.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.LoadGroup.Incompatible">
            <summary>
            This variable is used to store information on which groups exclude each other
            in structural analysis load combination.
            
            Load combination is a process in which some simultaneously acting load groups 
            are multiplied by their partial safety factors and combined with each other 
            according to specific rules. 
            To accurately combine loads which have the same load group type, 
            you need to identify which load groups exclude each other,
            i.e. are <i>incompatible</i>.
            This variable stores one integer, and all groups who have this same integer 
            are known to be incompatible with each other.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.LoadGroup.Color">
            <summary>
            The load group color. This variable indicates the color with which all 
            loads that belong to this same group are drawn in Tekla Structures views.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.LoadGroup.LoadGroupType">
            <summary>
            The possible types for load groups.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.EUROCODE_DEFAULT_GROUP">
            <summary>
            The Eurocode default group type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.EUROCODE_SELF_WEIGHT">
            <summary>
            The Eurocode self weight type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.EUROCODE_PERMANENT_LOAD">
            <summary>
            The Eurocode permanent load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.EUROCODE_PRE_STRESS_LOAD">
            <summary>
            The Eurocode pre-stress load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.EUROCODE_LIVE_LOAD_HOUSING">
            <summary>
            The Eurocode live load housing type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.EUROCODE_LIVE_LOAD_PUBLIC_BUILDINGS">
            <summary>
            The Eurocode live load public buildings type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.EUROCODE_LIVE_LOAD_THEATRES_RESTAURANTS">
            <summary>
            The Eurocode live load theatres, restaurants type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.EUROCODE_LIVE_LOAD_WAREHOUSES">
            <summary>
            The Eurocode live load warehouses type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.EUROCODE_LIVE_LOAD_STORAGE_BUILDINGS">
            <summary>
            The Eurocode live load storage buildings type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.EUROCODE_TRAFFIC_LOAD_LIGHT_VEHICLES">
            <summary>
            The Eurocode traffic load light vehicles type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.EUROCODE_TRAFFIC_LOAD_HEAVY_VEHICLES">
            <summary>
            The Eurocode traffic load heavy vehicles type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.EUROCODE_TRAFFIC_LOAD_ROOFS">
            <summary>
            The Eurocode traffic load roofs type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.EUROCODE_SNOW_LOAD">
            <summary>
            The Eurocode snow load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.EUROCODE_WIND_LOAD">
            <summary>
            The Eurocode wind load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.EUROCODE_FORCES_DUE_TO_TEMPERATURE_EFFECTS">
            <summary>
            The Eurocode forces due to temperature effects type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.EUROCODE_IMPERFECTION_LOAD_DUE_TO_DEAD_LOADS">
            <summary>
            The Eurocode imperfection load due to dead loads type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.EUROCODE_IMPERFECTION_LOAD_DUE_TO_LIVE_LOADS">
            <summary>
            The Eurocode imperfection load due to live loads type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.EUROCODE_IMPERFECTION_LOAD_DUE_TO_SNOW_LOADS">
            <summary>
            The Eurocode imperfection load due to snow loads type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.EUROCODE_ACCIDENTAL_LOAD">
            <summary>
            The Eurocode accidental load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.EUROCODE_EARTHQUAKE_LOAD">
            <summary>
            The Eurocode earthquake load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.BRITISH_CODE_DEAD_LOAD_ALONE">
            <summary>
            The British code dead load alone type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.BRITISH_CODE_DEADLOAD">
            <summary>
            The British code dead load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.BRITISH_CODE_IMPOSED_LOAD">
            <summary>
            The British code imposed load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.BRITISH_CODE_WIND_LOAD">
            <summary>
            The British code wind load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.BRITISH_CODE_TEMPERATURE_LOAD">
            <summary>
            The British code temperature load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.BRITISH_CODE_VERTICAL_CRANE_LOAD">
            <summary>
            The British code vertical crane load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.BRITISH_CODE_HORIZONTAL_CRANE_LOAD">
            <summary>
            The British code horizontal crane load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.AISC_DEAD_LOAD_ALONE">
            <summary>
            The AISC dead load alone type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.AISC_DEAD_LOAD">
            <summary>
            The AISC dead load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.AISC_LIVE_LOAD">
            <summary>
            The AISC live load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.AISC_ROOF_LIVE_LOAD">
            <summary>
            The AISC roof live load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.AISC_WIND_LOAD">
            <summary>
            The AISC wind load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.AISC_SNOW_LOAD">
            <summary>
            The AISC snow load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.AISC_RAINWATER_LOAD">
            <summary>
            The AISC rainwater load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.AISC_EARTHQUAKE_LOAD">
            <summary>
            The AISC earthquake load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.CM66_PERMANENT_LOAD_FR">
            <summary>
            The CM66 permanent load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.CM66_EXPLOITATION_LOAD_FR">
            <summary>
            The CM66 exploitation load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.CM66_TEMPERATURE_LOAD_FR">
            <summary>
            The CM66 temperature load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.CM66_WIND_LOAD_FR">
            <summary>
            The CM66 wind load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.CM66_SNOW_LOAD_FR">
            <summary>
            The CM66 snow load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.CM66_SEISMIC_LOAD_HORIZONTAL_FR">
            <summary>
            The CM66 seismic load horizontal type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.CM66_SEISMIC_LOAD_VERTICAL_FR">
            <summary>
            The CM66 seismic load vertical type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.BAEL91_PERMANENT_LOAD_FR">
            <summary>
            The BAEL91 permanent load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.BAEL91_EXPLOITATION_LOAD_FR">
            <summary>
            The BAEL91 exploitation load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.BAEL91_TEMPERATURE_LOAD_FR">
            <summary>
            The BAEL91 temperature load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.BAEL91_WIND_LOAD_FR">
            <summary>
            The BAEL91 wind load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.BAEL91_SNOW_LOAD_FR">
            <summary>
            The BAEL91 snow load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.BAEL91_SEISMIC_LOAD_FR">
            <summary>
            The BAEL91 seismic load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.BAEL91_ACCIDENTAL_LOAD_FR">
            <summary>
            The BAEL91 accidental load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.UBC_DEAD_LOAD">
            <summary>
            The UBC dead load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.UBC_LIVE_LOAD">
            <summary>
            The UBC live load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.UBC_ROOF_LIVE_LOAD">
            <summary>
            The UBC roof live load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.UBC_WIND_LOAD">
            <summary>
            The UBC wind load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.UBC_SNOW_LOAD">
            <summary>
            The UBC snow load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.UBC_TEMPERATURE_LOAD">
            <summary>
            The UBC temperature load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.UBC_FLUIDS_LOAD">
            <summary>
            The UBC fluids load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.UBC_SOIL_LOAD">
            <summary>
            The UBC soil load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.UBC_PONDING_LOAD">
            <summary>
            The UBC ponding load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.UBC_SEISMIC_LOAD">
            <summary>
            The UBC seismic load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.IBC_DEAD_LOAD">
            <summary>
            The IBC dead load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.IBC_LIVE_LOAD">
            <summary>
            The IBC live load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.IBC_ROOF_LIVE_LOAD">
            <summary>
            The IBC roof live load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.IBC_WIND_LOAD">
            <summary>
            The IBC wind load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.IBC_SNOW_LOAD">
            <summary>
            The IBC snow load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.IBC_TEMPERATURE_LOAD">
            <summary>
            The IBC temperature load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.IBC_FLUIDS_LOAD">
            <summary>
            The IBC fluids load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.IBC_SOIL_LOAD">
            <summary>
            The IBC soil load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.IBC_RAIN_LOAD">
            <summary>
            The IBC rain load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.IBC_PONDING_LOAD">
            <summary>
            The IBC ponding load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.IBC_SEISMIC_LOAD">
            <summary>
            The IBC seismic load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.ACI_DEAD_LOAD">
            <summary>
            The ACI dead load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.ACI_LIVE_LOAD">
            <summary>
            The ACI live load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.ACI_ROOF_LIVE_LOAD">
            <summary>
            The ACI roof live load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.ACI_WIND_LOAD">
            <summary>
            The ACI wind load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.ACI_SEISMIC_LOAD">
            <summary>
            The ACI seismic load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.ACI_SNOW_LOAD">
            <summary>
            The ACI snow load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.ACI_FLUIDS_LOAD">
            <summary>
            The ACI fluids load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.ACI_SOIL_LOAD">
            <summary>
            The ACI soil load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.ACI_RAIN_LOAD">
            <summary>
            The ACI rain load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.ACI_TEMPERATURE_LOAD">
            <summary>
            The ACI temperature load type.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.LoadGroup.Colors">
            <summary>
            The possible display colors for loads in a load group.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.Colors.BLACK">
            <summary>
            The black display color.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.Colors.WHITE">
            <summary>
            The white display color.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.Colors.RED">
            <summary>
            The red display color.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.Colors.GREEN">
            <summary>
            The green display color.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.Colors.BLUE">
            <summary>
            The blue display color.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.Colors.CYAN">
            <summary>
            The cyan display color.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.Colors.YELLOW">
            <summary>
            The yellow display color.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.Colors.MAGENTA">
            <summary>
            The magenta display color.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.LoadGroup.LoadGroupDirection">
            <summary>
            The possible directions.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupDirection.DIR_X">
            <summary>
            The X direction.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupDirection.DIR_Y">
            <summary>
            The Y direction.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupDirection.DIR_Z">
            <summary>
            The Z direction.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupDirection.DIR_NEG_X">
            <summary>
            The negative X direction.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupDirection.DIR_NEG_Y">
            <summary>
            The negative Y direction.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupDirection.DIR_NEG_Z">
            <summary>
            The negative Z direction.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotLoadGroup_t">
            <summary>
            Serialization structure for the LoadGroup.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotLoadGroup_t.ModelObject">
            <summary>
            Base class that also contains the Identifier for this object.
            </summary>
            
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotLoadGroup_t.GroupName">
            <summary>
            Load group name, maximum length 126 characters.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotLoadGroup_t.GroupType">
            <summary>
            Load group type 
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotLoadGroup_t.Direction">
            <summary>
            Direction of the load.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotLoadGroup_t.Compatible">
            <summary>
            Identifies groups that are compatible, i.e. may be combined 
            with this one during structural analysis phase. All groups 
            that have the same Compatible tag are considered to be 
            compatible with each other.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotLoadGroup_t.Incompatible">
            <summary>
            Groups with which this group is incompatible, i.e. which cannot 
            be combined with each other during structural analysis phase.
            All groups that have the same Incompatible tag are considered to be 
            incompatible with each other.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotLoadGroup_t.Color">
            <summary>
            Color with which all Loads that belong to this group are drawn in the Tekla Structures view.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.LoadLine">
            <summary>
            The LoadLine class defines a linearly-distributed force or torsion.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures.Geometry3d;
            using System;
            
            public class Example
            {
                   public void Example1()
                   {
                       LoadLine L = new LoadLine();
                       L.P1 = new Vector(0000,0000,-1000);
                       L.P2 = new Vector(0000,0000,-1000);
                       L.DistanceA = 5;
                       L.DistanceB = 6;
                       L.Torsion1 = 1000;
                       L.Torsion2 = 2000;
                       L.Position1 = new Point(3000,12000,0);
                       L.Position2 = new Point(4000,12000,0);
                       L.LoadForm = LoadLine.LineLoadFormEnum.LOAD_FORM_LINE_1;
            
                       L.AutomaticPrimaryAxisWeight = true;
                       L.BoundingBoxDx = 500;
                       L.BoundingBoxDy = 500;
                       L.BoundingBoxDz = 500;
                       L.LoadDispersionAngle = 5;
                       L.PartFilter = "testing";
                       L.PartNames = Load.LoadPartNamesEnum.LOAD_PART_NAMES_INCLUDE;
                       L.PrimaryAxisDirection = new Vector(1000, 500, 0);
                       L.Spanning = Load.LoadSpanningEnum.LOAD_SPANNING_SINGLE;
                       L.Weight = 2;
                       L.CreateFixedSupportConditionsAutomatically = true;
            
                       if (!L.Insert())
                           Console.WriteLine("LoadLine Insert failed!");
                   }
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.Structures.Model.LoadLine.#ctor">
            <summary>
            Creates a new load line instance.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.LoadLine.Insert">
            <summary>
            Inserts the load line into the model database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.LoadLine.Select">
            <summary>
            Selects a load line from the model database. The ID must be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.LoadLine.Modify">
            <summary>
            Modifies the existing load line in the model database to match the current one.
            At the moment it is not possible to change the load attachment or the father.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.LoadLine.Delete">
            <summary>
            Deletes the load line instance with the given ID from the model database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="P:Tekla.Structures.Model.LoadLine.Position1">
            <summary>
            The first input position point.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.LoadLine.Position2">
            <summary>
            The second input position point.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.LoadLine.P1">
            <summary>
            The load magnitude vector at the start position.
            The values are given in the local coordinate system of the load (not in the current coordinate system).
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.LoadLine.P2">
            <summary>
            The load magnitude vector at the end position.
            The values are given in the local coordinate system of the load (not in the current coordinate system).
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.LoadLine.Torsion1">
            <summary>
            The first torsion.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.LoadLine.Torsion2">
            <summary>
            The second torsion.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.LoadLine.LoadForm">
            <summary>
            The load form.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.LoadLine.DistanceA">
            <summary>
            The distance a (for shortening or dividing the length of a line load).
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.LoadLine.DistanceB">
            <summary>
            The distance b (for shortening or dividing the length of a line load).
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.LoadLine.LineLoadFormEnum">
            <summary>
            The line load form.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadLine.LineLoadFormEnum.LOAD_FORM_LINE_1">
            <summary>
            The load magnitude is uniform across the loaded length.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadLine.LineLoadFormEnum.LOAD_FORM_LINE_2">
            <summary>
            The load has different magnitudes at the ends of the loaded length.
            The magnitude changes linearly between the ends.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadLine.LineLoadFormEnum.LOAD_FORM_LINE_3">
            <summary>
            The load magnitude changes linearly, from zero at the ends of the loaded length,
            to a fixed value in the middle of the loaded length.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadLine.LineLoadFormEnum.LOAD_FORM_LINE_4">
            <summary>
            The load magnitude changes linearly, from zero at one end of the loaded length,
            through two (different) values, back to zero at the other end.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.LoadPoint">
            <summary>
            The LoadPoint class defines a concentrated force or a bending moment.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures.Geometry3d;
            using System;
            
            public class Example
            {
                   public void Example1()
                   {
                       Beam FatherBeam = new Beam(new Point(3000,6000,0), new Point(4000,6000,0));
                       if (!FatherBeam.Insert())
                           Console.WriteLine("Father Beam Insert failed!");
            
                       LoadPoint L = new LoadPoint();
                       L.P = new Vector(3000,4000,5000);
                       L.Moment = new Vector(6000,7000,8000);
                       L.Position = new Point(3000,6000,0);
            
                       L.FatherId = FatherBeam.Identifier;
            
                       L.AutomaticPrimaryAxisWeight = true;
                       L.BoundingBoxDx = 500;
                       L.BoundingBoxDy = 500;
                       L.BoundingBoxDz = 500;
                       L.LoadDispersionAngle = 1;
                       L.PartFilter = "testing";
                       L.PartNames = Load.LoadPartNamesEnum.LOAD_PART_NAMES_INCLUDE;
                       L.PrimaryAxisDirection = new Vector(1000, 500, 0);
                       L.Spanning = Load.LoadSpanningEnum.LOAD_SPANNING_SINGLE;
                       L.Weight = 2;
                       L.CreateFixedSupportConditionsAutomatically = true;
            
                       if (!L.Insert())
                           Console.WriteLine("LoadPoint Insert failed!");
                   }
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.Structures.Model.LoadPoint.#ctor">
            <summary>
            Creates a new load point instance.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.LoadPoint.Insert">
            <summary>
            Inserts the load point into the model database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.LoadPoint.Select">
            <summary>
            Selects a load point from the model database. The ID must be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.LoadPoint.Modify">
            <summary>
            Modifies the existing load point in the model database to match the current one.
            At the moment it is not possible to change the load attachment or the father.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.LoadPoint.Delete">
            <summary>
            Deletes the load point instance with the given ID from the model database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="P:Tekla.Structures.Model.LoadPoint.Position">
            <summary>
            The position.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.LoadPoint.P">
            <summary>
            The load vector.
            The values are given in the local coordinate system of the load (not in the current coordinate system).
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.LoadPoint.Moment">
            <summary>
            The moment vector.
            The values are given in the local coordinate system of the load (not in the current coordinate system).
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.LoadTemperature">
             <summary>
             The <see cref="T:Tekla.Structures.Model.LoadTemperature"/> class defines a temperature change in a part, or a temperature difference between two part surfaces.
             </summary>
             <example>
             <code>
             using System;
             using Tekla.Structures.Geometry3d;
             using Tekla.Structures.Model;
            
             public class Example
             {
                    public void Example1()
                    {
                        LoadTemperature temperatureLoad = new LoadTemperature();
                        temperatureLoad.Position1 = new Point(0, 0, 0);
                        temperatureLoad.Position2 = new Point(1000, 0, 0);
                        temperatureLoad.BoundingBoxDx = 500;
                        temperatureLoad.BoundingBoxDy = 500;
                        temperatureLoad.BoundingBoxDz = 500;
                        temperatureLoad.PartNames = Load.LoadPartNamesEnum.LOAD_PART_NAMES_INCLUDE;
                        temperatureLoad.PartFilter = "example";
                        temperatureLoad.TemperatureChangeForAxialElongation = 1.0;
                        temperatureLoad.TemperatureDifferentialSideToSide = 2.0;
                        temperatureLoad.TemperatureDifferentialTopToBottom = 3.0;
                        temperatureLoad.InitialAxialElongation = 4.0;
             
                        if (!temperatureLoad.Insert())
                        {
                            Console.WriteLine("Temperature load insert failed!");
                        }
                    }
             }
             </code>
             </example>
        </member>
        <member name="M:Tekla.Structures.Model.LoadTemperature.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Model.LoadTemperature"/> class.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.LoadTemperature.Insert">
            <summary>
            Inserts the load temperature into the model database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.LoadTemperature.Select">
            <summary>
            Selects a load temperature from the model database. The ID must be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.LoadTemperature.Modify">
            <summary>
            Modifies the existing load temperature in the model database to match the current one.
            At the moment it is not possible to change the load attachment or the father.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.LoadTemperature.Delete">
            <summary>
            Deletes the load temperature instance with the given ID from the model database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.LoadTemperature.CreateInstance">
            <summary>
            Inserts the load temperature into the model database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.LoadTemperature.SelectInstance">
            <summary>
            Selects the load temperature from the model database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.LoadTemperature.ModifyInstance">
            <summary>
            Modifies the existing load temperature in the model database to match the current one.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.LoadTemperature.ToStruct(Tekla.Structures.ModelInternal.dotLoadCommonAttributes_t@,Tekla.Structures.ModelInternal.dotLoadClassAttributes_t@)">
            <summary>
            Method for populating struct values from corresponding object.
            </summary>
            <param name="commonAttributes">Reference to a struct which will be populated with common load attributes.</param>
            <param name="classAttributes">Reference to a struct which will be populated with class load attributes.</param>
        </member>
        <member name="M:Tekla.Structures.Model.LoadTemperature.FromStruct(Tekla.Structures.ModelInternal.dotLoadCommonAttributes_t@,Tekla.Structures.ModelInternal.dotLoadClassAttributes_t@)">
            <summary>
            Method for getting object values from corresponding struct.
            </summary>
            <param name="commonAttributes">Reference to struct which contains common load attributes.</param>
            <param name="classAttributes">Reference to struct which contains class load attributes.</param>
        </member>
        <member name="P:Tekla.Structures.Model.LoadTemperature.Spanning">
            <summary>
            Property not supported in <see cref="T:Tekla.Structures.Model.LoadTemperature"/> class.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.LoadTemperature.PrimaryAxisDirection">
            <summary>
            Property not supported in <see cref="T:Tekla.Structures.Model.LoadTemperature"/> class.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.LoadTemperature.AutomaticPrimaryAxisWeight">
            <summary>
            Property not supported in <see cref="T:Tekla.Structures.Model.LoadTemperature"/> class.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.LoadTemperature.Weight">
            <summary>
            Property not supported in <see cref="T:Tekla.Structures.Model.LoadTemperature"/> class.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.LoadTemperature.LoadDispersionAngle">
            <summary>
            Property not supported in <see cref="T:Tekla.Structures.Model.LoadTemperature"/> class.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.LoadTemperature.CreateFixedSupportConditionsAutomatically">
            <summary>
            Property not supported in <see cref="T:Tekla.Structures.Model.LoadTemperature"/> class.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.LoadTemperature.Position1">
            <summary>
            Gets or sets the first input position point.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.LoadTemperature.Position2">
            <summary>
            Gets or sets the second input position point.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.LoadTemperature.TemperatureChangeForAxialElongation">
            <summary>
            Gets or sets the temperature change for axial elongation.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.LoadTemperature.TemperatureDifferentialTopToBottom">
            <summary>
            Gets or sets the temperature differential from top to bottom.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.LoadTemperature.TemperatureDifferentialSideToSide">
            <summary>
            Gets or sets the temperature differential from side to side.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.LoadTemperature.InitialAxialElongation">
            <summary>
            Gets or sets the initial axial elongation.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.LoadUniform">
            <summary>
            The LoadUniform class defines a uniformly-distributed force bounded by a polygon.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures.Geometry3d;
            using System;
            
            public class Example
            {
                   public void Example1()
                   {
                       LoadUniform L = new LoadUniform();
                       L.P1 = new Vector(1000,2000,3000);
                       L.DistanceA = 5;
                       L.Polygon.Points.Add(new Point(9000, 12000, 0));
                       L.Polygon.Points.Add(new Point(11000, 12000, 0));
                       L.Polygon.Points.Add(new Point(11000, 15000, 0));
                       L.Polygon.Points.Add(new Point(7000, 15000, 0));
            
                       L.AutomaticPrimaryAxisWeight = true;
                       L.BoundingBoxDx = 500;
                       L.BoundingBoxDy = 500;
                       L.BoundingBoxDz = 500;
                       L.LoadDispersionAngle = 3;
                       L.PartFilter = "testing";
                       L.PartNames = Load.LoadPartNamesEnum.LOAD_PART_NAMES_INCLUDE;
                       L.PrimaryAxisDirection = new Vector(1000, 500, 0);
                       L.Spanning = Load.LoadSpanningEnum.LOAD_SPANNING_SINGLE;
                       L.Weight = 2;
                       L.CreateFixedSupportConditionsAutomatically = true;
            
                       if (!L.Insert())
                           Console.WriteLine("LoadUniform Insert failed!");
                   }
            }
            </code>
            </example>
        </member>
        <member name="F:Tekla.Structures.Model.LoadUniform._Polygon">
            <summary>
            The position points for the uniform load.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadUniform._P1">
            <summary>
            The P1 vector from the dialog.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadUniform._DistanceA">
            <summary>
            The distance a (for enlarging or reducing the loaded area).
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.LoadUniform.#ctor">
            <summary>
            Creates a new load uniform instance.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.LoadUniform.Insert">
            <summary>
            Inserts the load uniform into the model database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.LoadUniform.Select">
            <summary>
            Selects a load uniform from the model database. The ID must be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.LoadUniform.Modify">
            <summary>
            Modifies the existing load uniform in the model database to match the current one.
            At the moment it is not possible to change the load attachment or the father.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.LoadUniform.Delete">
            <summary>
            Deletes the load uniform instance with the given ID from the model database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="P:Tekla.Structures.Model.LoadUniform.Polygon">
            <summary>
            The position points for the uniform load.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.LoadUniform.P1">
            <summary>
            The load magnitude vector.
            The values are given in the local coordinate system of the load (not in the current coordinate system).
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.LoadUniform.DistanceA">
            <summary>
            The distance a (for enlarging or reducing the loaded area).
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Chamfer">
            <summary>
            The Chamfer class defines how the corners of a polybeam or a contour plate are rounded.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures.Geometry3d;
            
            public class Example
            {
                   public void Example1()
                   {
                       ContourPoint point1 = new ContourPoint(new Point(0, 4000, 0), null);
                       ContourPoint point2 = new ContourPoint(new Point(2000, 4000, 0), new Chamfer(0, 0, Chamfer.ChamferTypeEnum.CHAMFER_ARC_POINT));
                       ContourPoint point3 = new ContourPoint(new Point(0, 6000, 0), null);
            
                       point2.Chamfer.DZ1 = 2500;
                       point2.Chamfer.DZ2 = 0;
            
                       ContourPlate cp = new ContourPlate();
            
                       cp.AddContourPoint(point1);
                       cp.AddContourPoint(point2);
                       cp.AddContourPoint(point3);
                       cp.Finish = "FOO";
                       cp.Material.MaterialString = "K30-2";
                       cp.Profile.ProfileString = "PL200";
            
                       cp.Insert();
                   }
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.Structures.Model.Chamfer.#ctor">
            <summary>
            Creates a chamfer instance with the basic shape type CHAMFER_NONE.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.Chamfer.#ctor(System.Double,System.Double,Tekla.Structures.Model.Chamfer.ChamferTypeEnum)">
            <summary>
            Instantiates a chamfer with the given values. 
            </summary>
            <param name="X">The X value of the chamfer.</param>
            <param name="Y">The Y value of the chamfer.</param>
            <param name="Type">The basic shape type of the chamfer.</param>
        </member>
        <member name="P:Tekla.Structures.Model.Chamfer.Type">
            <summary>
            The basic shape type of the chamfer.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Chamfer.X">
            <summary>
            The dimension of the chamfer.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Chamfer.Y">
            <summary>
            The second dimension of straight chamfers.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Chamfer.DZ1">
            <summary>
            The thickness above the offset.
            <para>Note that this does nothing when used with the PolyBeam.</para>
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Chamfer.DZ2">
            <summary>
            The thickness below the offset.
            <para>Note that this does nothing when used with the PolyBeam.</para>
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Chamfer.ChamferTypeEnum">
            <summary>
            The basic shape type of the chamfer.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Chamfer.ChamferTypeEnum.CHAMFER_NONE">
            <summary>
            No chamfer type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Chamfer.ChamferTypeEnum.CHAMFER_LINE">
            <summary>
            The line type chamfer.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Chamfer.ChamferTypeEnum.CHAMFER_ROUNDING">
            <summary>
            The rounding type chamfer.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Chamfer.ChamferTypeEnum.CHAMFER_ARC">
            <summary>
            The arc type chamfer.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Chamfer.ChamferTypeEnum.CHAMFER_ARC_POINT">
            <summary>
            The arc point type chamfer.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Chamfer.ChamferTypeEnum.CHAMFER_SQUARE">
            <summary>
            The square type chamfer.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Chamfer.ChamferTypeEnum.CHAMFER_SQUARE_PARALLEL">
            <summary>
            The square parallel type chamfer.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Chamfer.ChamferTypeEnum.CHAMFER_LINE_AND_ARC">
            <summary>
            The line and arc type chamfer.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotChamfer_t">
            <summary>
            Struct for the Chamfer.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotChamfer_t.X">
            <summary>
            The X and Y values for the Chamfer
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotChamfer_t.Y">
            <summary>
            The X and Y values for the Chamfer
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotChamfer_t.Type">
            <summary>
            The Type of the Chamfer
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotChamfer_t.DZ1">
            <summary>
            The Thicknes offsets for the Chamfer.
            
            Note, these do nothing when used with the PolyBeam.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotChamfer_t.DZ2">
            <summary>
            The Thicknes offsets for the Chamfer.
            
            Note, these do nothing when used with the PolyBeam.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.PhaseCollection">
            <summary>
            The PhaseCollection class handles the collection of the model phases.
            </summary>
            <example>
            The following example gets the phases of the model and shows the values of the PhaseName and
            PhaseNumber properties in a message dialog:
            <code>
            using Tekla.Structures.Model;
            using System.Windows.Forms;
            
            public class Example
            {
                   public void Example1()
                   {
                       Model CurrentModel = new Model();
                       PhaseCollection PhaseCollection = CurrentModel.GetPhases();
            
                       if (CurrentModel.GetConnectionStatus())
                       {
                           foreach(Phase p in PhaseCollection)
                           {
                                MessageBox.Show("Name = " + p.PhaseName + ", number = " + p.PhaseNumber);
                           }
                       }
                   }
            }
            </code>
            </example>
        </member>
        <member name="F:Tekla.Structures.Model.PhaseCollection._Phases">
            <summary>
            Contains all the Phases of the model
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.PhaseCollection.#ctor">
            <summary>
            Creates a new phase collection.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.PhaseCollection.GetPhases">
            <summary>
            Get current Phases.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.PhaseCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"></see> to
            an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            <param name="Array">
            The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from
            the <see cref="T:System.Collections.ICollection"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.
            </param>
            <param name="Index">The zero-based index in the array at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the array is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the index is less than zero.</exception>
            <exception cref="T:System.ArgumentException">
            Thrown when the array is multidimensional, or the index is equal to or greater than the length of the array, or the number of elements
            in the source <see cref="T:System.Collections.ICollection"></see> is greater than the available space from the index to
            the end of the destination array.
            </exception>
            <exception cref="T:System.InvalidCastException">
            Thrown when the type of the source <see cref="T:System.Collections.ICollection"></see> cannot be cast automatically to the type of
            the destination array.
            </exception>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Tekla.Structures.Model.PhaseCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.</returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Tekla.Structures.Model.PhaseCollection.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.ICollection"></see>.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Tekla.Structures.Model.PhaseCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe).
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Tekla.Structures.Model.PhaseCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotPhaseNumbers_t">
            <summary>
            Serialization structure for the get phases method
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPhaseNumbers_t.nPhaseNumbers">
            <summary>
            The phase count
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPhaseNumbers_t.aPhaseNumber">
            <summary>
            The phase numbers
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPhaseNumbers_t.Result">
            <summary>
            The result
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.InputItem">
            <summary>
            The InputItem class is used to store input objects and positions. 
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.InputItem.GetInputType">
            <summary>
            Returns the type of the input item.
            </summary>
            <returns>The type of the input item.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.InputItem.GetData">
            <summary>
            Returns the data of the input item.
            See also: <see cref="T:Tekla.Structures.Model.InputItem.InputTypeEnum"/>.
            </summary>
            <returns>The input data.</returns>
        </member>
        <member name="T:Tekla.Structures.Model.InputItem.InputTypeEnum">
            <summary>
            Defines the type of the input.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.InputItem.InputTypeEnum.INPUT_1_POINT">
            <summary>
            The input is one point. The data is returned as a point.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.InputItem.InputTypeEnum.INPUT_2_POINTS">
            <summary>
            The input is two points. The data is returned as an array list of points.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.InputItem.InputTypeEnum.INPUT_POLYGON">
            <summary>
            The input is any number of points (a polygon). The data is returned as an array list of points.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.InputItem.InputTypeEnum.INPUT_1_OBJECT">
            <summary>
            The input is one model object. The data is returned as a model object.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.InputItem.InputTypeEnum.INPUT_N_OBJECTS">
            <summary>
            The input is any number of model objects. The data is returned as an array list of model objects.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.InputCollection">
            <summary>
            The InputCollection class handles collection of the input items containing input objects and positions. 
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.InputCollection._InputItems">
            <summary>
            Contains all the Inputs, in the same order as they were entered
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.InputCollection.#ctor">
            <summary>
            Creates a new input item collection.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.InputCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"></see> to
            an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from
            the <see cref="T:System.Collections.ICollection"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.
            </param>
            <param name="index">The zero-based index in the array at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">The array is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The index is less than zero.</exception>
            <exception cref="T:System.ArgumentException">
            The array is multidimensional, or the index is equal to or greater than the length of the array, or the number of elements
            in the source <see cref="T:System.Collections.ICollection"></see> is greater than the available space from the index to
            the end of the destination array.
            </exception>
            <exception cref="T:System.InvalidCastException">
            The type of the source <see cref="T:System.Collections.ICollection"></see> cannot be cast automatically to the type of
            the destination array.
            </exception>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Tekla.Structures.Model.InputCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.</returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Tekla.Structures.Model.InputCollection.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.ICollection"></see>.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Tekla.Structures.Model.InputCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe).
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Tekla.Structures.Model.InputCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:Tekla.Structures.Model.DeformingData">
            <summary>
            The DeformingData class holds information about the deforming of parts.
            Deformed parts are parts that have been warped, cambered or shortened.
            </summary>
            <example>
            The following example inserts a deformed beam:
            <code>
            using Tekla.Structures.Model;
            
            public class Example
            {
                   public void Example1()
                   {
                       Beam MyBeam = new Beam();
                       MyBeam.DeformingData.Angle = 0.0;
                       MyBeam.DeformingData.Angle2 = 45.00;
                       MyBeam.DeformingData.Cambering = 10.0;
                       MyBeam.DeformingData.Shortening = 20.0;
                       MyBeam.Insert();
                   }
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.Structures.Model.DeformingData.#ctor">
            <summary>
            Instantiates a deforming data instance.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.DeformingData.Angle">
            <summary>
            The angle of the part at its start point, relative to the part reference line.
            <para>For example, if the beam is warped 45 degrees at the end point, in the Angle field the value is 0,
            and the value is 45 in the Angle2 field.</para>
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.DeformingData.Angle2">
            <summary>
            The angle of the part at its end point, relative to the part reference line.
            <para>For example, if the beam is warped 45 degrees at the end point, in the Angle field the value is 0,
            and the value is 45 in the Angle2 field.</para>
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.DeformingData.Cambering">
            <summary>
            The degree of cambering.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.DeformingData.Shortening">
            <summary>
            The degree of shortening.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotDeformingData_t">
            <summary>
            Struct for the DeformingData.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotDeformingData_t.Angle">
            <summary>
            Start angle.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotDeformingData_t.Angle2">
            <summary>
            End angle.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotDeformingData_t.Cambering">
            <summary>
            Cambering degree.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotDeformingData_t.Shortening">
            <summary>
            Shortening degree.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Events">
            <summary>
            The Events class allows the user to register event listeners for model events.
            </summary>
            <remarks>
            Asynchronous event handling
            <para>Registered event handlers are called asynchronously so that many handlers may be running
            simultaneously. Event handlers are not guaranteed to be run in the same thread where they were registered.
            The asynchronous nature of the events requires the use of synchronization constructs on objects
            and data structures that are not defined to be thread safe.</para>
            <para>
            <list type="bullet">
            <item>Microsoft's documentation about the lock statement: http://msdn.microsoft.com/en-us/library/c5kehkcz.aspx</item>
            <item>Microsoft's documentation about delegates: http://msdn.microsoft.com/en-us/library/900fyy8e.aspx</item>
            <item>Microsoft's documentation about managed threading: http://msdn.microsoft.com/en-us/library/1c9txz50.aspx</item>
            </list>
            </para>
            </remarks>
            <example>
            The following example shows how to make sure that only one selection event handler is running at a time.
            <code>
               using Tekla.Structures.Model;
               
               public class Example
               {
                   private Tekla.Structures.Model.Events _events = new Tekla.Structures.Model.Events();
                   private object _selectionEventHandlerLock = new object();
                   
                   public void RegisterEventHandler()
                   {
                       _events.SelectionChange += Events_SelectionChangeEvent;
                       _events.Register();
                   }
                   
                   public void UnRegisterEventHandler()
                   {
                       _events.UnRegister();
                   }
                   
                   void Events_SelectionChangeEvent()
                   {
                       /* Make sure that the inner code block is running synchronously */
                       lock(_selectionEventHandlerLock)
                       {
                           System.Console.WriteLine("Selection changed event received.");
                       }
                   }
               }
            </code>
            </example>
        </member>
        <member name="M:Tekla.Structures.Model.Events.OnSelectionChange(System.String,System.Object[])">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Model.Events.OnModelSave(System.String,System.Object[])">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Model.Events.OnModelLoad(System.String,System.Object[])">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Model.Events.OnNumbering(System.String,System.Object[])">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Model.Events.OnDbCommit(System.String,System.Object[])">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Model.Events.OnTeklaStructuresExit(System.String,System.Object[])">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Model.Events.OnClashCheckDone(System.String,System.Object[])">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Model.Events.OnClashDetected(System.String,System.Object[])">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Model.Events.InitializeLifetimeService">
            <summary>
            Initializes the lifetime service.
            </summary>
            <returns>Always null.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Events.#ctor">
            <summary>
            Creates an empty events instance.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.Events.Register">
            <summary>
            Registers the instance to listen to the specified events.
            More event delegates should not be added without calling UnRegister
            first.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.Events.UnRegister">
            <summary>
            Unregisters the instance from listening to events.
            </summary>
        </member>
        <member name="E:Tekla.Structures.Model.Events.SelectionChange">
            <summary>
            The SelectionChange event is raised when the user changes the current selection inside Tekla Structures.
            </summary>
        </member>
        <member name="E:Tekla.Structures.Model.Events.ModelSave">
            <summary>
            The ModelSave event is raised just after a model has been saved.
            </summary>
        </member>
        <member name="E:Tekla.Structures.Model.Events.ModelLoad">
            <summary>
            The ModelLoad event is raised just after a model has been loaded.
            </summary>
        </member>
        <member name="E:Tekla.Structures.Model.Events.Numbering">
            <summary>
            The Numbering event is raised just after a model has been numbered.
            </summary>
        </member>
        <member name="E:Tekla.Structures.Model.Events.ModelChanged">
            <summary>
            The ModelChanged event is raised just after some changes have been made to the model.
            <para>Note, this event is however not triggered when UNDO or REDO are performed.</para>
            </summary>
        </member>
        <member name="E:Tekla.Structures.Model.Events.TeklaStructuresExit">
            <summary>
            The TeklaStructuresExit event is raised just before Tekla Structures exits. After this event has been called 
            the user will no longer be able to perform any calls to Tekla Structures.
            </summary>
        </member>
        <member name="E:Tekla.Structures.Model.Events.ClashCheckDone">
            <summary>
            The ClashCheckDone event is raised just after clash check is completed.
            </summary>
        </member>
        <member name="E:Tekla.Structures.Model.Events.ClashDetected">
            <summary>
            The ClashDetected event is raised just after the detection of each clash.
            The clash information is saved before the event is triggered. 
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Events.SelectionChangeDelegate">
            <summary>
            The delegate to use for selection change.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Events.ModelSaveDelegate">
            <summary>
            The delegate to use for model save.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Events.ModelLoadDelegate">
            <summary>
            The delegate to use for model load.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Events.NumberingDelegate">
            <summary>
            The delegate to use for numbering.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Events.ModelChangedDelegate">
            <summary>
            The delegate to use for database commit.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Events.TeklaStructuresExitDelegate">
            <summary>
            The delegate to use for Tekla Structures exit.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Events.ClashCheckDoneDelegate">
            <summary>
            The delegate to use for clash check completion.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Events.ClashDetectedDelegate">
            <summary>
            The delegate to use for clash detection.
            Encapsulates any method that takes a clash check data object as a parameter.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Material">
            <summary>
            The Material class represents a single material that parts can be made of.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures.Geometry3d;
            
            public class Example
            {
                   public void Example1()
                   {
                       Beam beam = new Beam(new Point(5000, 7000, 0), new Point(6000, 7000, 0));
                       beam.Material.MaterialString = "K40-1";
                       beam.Profile.ProfileString = "250*250";
                       beam.Finish = "PAINT";
            
                       bool result = false;
                       result = beam.Insert();
                   }
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.Structures.Model.Material.#ctor">
            <summary>
            Instantiates an empty material instance.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Material.MaterialString">
            <summary>
            Identifies the material in a string format.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotMaterial_t">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotMaterial_t.aMaterialString">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Messages">
            <summary>
            A static class where common messages is to be added
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.NumberingSeries">
            <summary>
            The NumberingSeries class describes how an object is to be numbered.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.NumberingSeries.#ctor">
            <summary>
            Instantiates a default numbering.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.NumberingSeries.#ctor(System.String,System.Int32)">
            <summary>
            Instantiates a numbering series with the given arguments.
            </summary>
            <param name="Prefix">The prefix to be used.</param>
            <param name="Number">The start number to be used.</param>
        </member>
        <member name="P:Tekla.Structures.Model.NumberingSeries.Prefix">
            <summary>
            The prefix in numbering.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.NumberingSeries.StartNumber">
            <summary>
            The start number in numbering.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotNumberingSeries_t">
            <summary>
            Serialization structure for NumberingSeries.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotNumberingSeries_t.aPrefix">
            <summary>
            The prefix in numbering.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotNumberingSeries_t.StartNumber">
            <summary>
            The start number in numbering.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Offset">
            <summary>
            The Offset class defines the offset value of start points and end points. The offset is the
            distance from the current work plane in the three global directions.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures.Geometry3d;
            
            public class Example
            {
                   public void Example1()
                   {
                       Point point = new Point(0, 0, 0);
                       Point point2 = new Point(1000, 0, 0);
            
                       Beam beam = new Beam(point, point2);
            
                       beam.StartPointOffset.Dx = 105.0;
                       beam.StartPointOffset.Dy = 205.0;
                       beam.StartPointOffset.Dz = 305.0;
            
                       beam.EndPointOffset.Dx = 405.0;
                       beam.EndPointOffset.Dy = 505.0;
                       beam.EndPointOffset.Dz = 605.0;
            
                       beam.Profile.ProfileString = "HEA400";
                       beam.Finish = "PAINT";
            
                       bool result = false;
                       result = beam.Insert();
                   }
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.Structures.Model.Offset.#ctor">
            <summary> Instantiates an offset with zero distance. </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Offset.Dx">
            <summary> The current object's Dx offset. This value is defined using the object's coordinate system. </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Offset.Dy">
            <summary> The current object's Dy offset. This value is defined using the current work plane. </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Offset.Dz">
            <summary> The current object's Dz offset. This value is defined using the current work plane. </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotOffset_t">
            <summary> Struct for Offsets. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotOffset_t.Dx">
            <summary> Offsets values </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotOffset_t.Dy">
            <summary> Offsets values </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotOffset_t.Dz">
            <summary> Offsets values </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Phase">
            <summary>
            The Phase class defines a model object phase.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures.Geometry3d;
            using System;
            
            public class Example
            {
                   public void Example1()
                   {
                       Point Point1 = new Point(4000, 4000, 0);
                       Point Point2 = new Point(7000, 4000, 0);
                       Point Point3 = new Point(4000, 6000, 0);
                       Point Point4 = new Point(7000, 6000, 0);
                       Beam Beam1 = new Beam(Point1, Point2);
                       Beam Beam2 = new Beam(Point3, Point4);
                       Beam1.Profile.ProfileString = "HEA400";
                       Beam1.Finish = "PAINT";
                       Beam2.Profile.ProfileString = "HEA400";
                       Beam2.Finish = "PAINT";
                       Beam1.Insert();
                       Beam2.Insert();
                       Phase Beam1Phase = new Phase();
                       Beam1.GetPhase(out Beam1Phase);
                       int PhaseNumber = Beam1Phase.PhaseNumber;
                       string PhaseName = Beam1Phase.PhaseName;
                       string PhaseComment = Beam1Phase.PhaseComment;
                       Phase Beam2Phase = new Phase();
                       Beam2.GetPhase(out Beam2Phase);
                       if(Beam1Phase.PhaseNumber != Beam2Phase.PhaseNumber)
                       {
                           if(Convert.ToBoolean(Beam1Phase.IsCurrentPhase))
                               Beam2.SetPhase(Beam1Phase);
                           else
                               Beam1.SetPhase(Beam2Phase);
                       }
                   }
            }
            </code>
            </example>
        </member>
        <member name="F:Tekla.Structures.Model.Phase._IsCurrentPhase">
            <summary>
            Is current phase or not.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.Phase.#ctor">
            <summary>
            Instantiates a new phase with the phase number 0.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.Phase.#ctor(System.Int32)">
            <summary>
            Instantiates a new phase with the given phase number.
            </summary>
            <param name="PhaseNumber">The number of the phase.</param>
        </member>
        <member name="M:Tekla.Structures.Model.Phase.#ctor(System.Int32,System.String,System.String,System.Int32)">
            <summary>
            Instantiates a new phase with the given parameters.
            </summary>
            <param name="PhaseNumber">The number of the phase.</param>
            <param name="PhaseName">The name of the phase.</param>
            <param name="PhaseComment">The comment of the phase.</param>
            <param name="IsCurrentPhase">The value is 1 if the phase is the current phase, 0 otherwise.</param>
        </member>
        <member name="M:Tekla.Structures.Model.Phase.Insert">
            <summary> Creates a new phase. </summary>
            <returns>True on success, false if failed (the reason for the failure is probably that
            the phase number already exists).</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Phase.Select">
            <summary> Selects a phase. </summary>
            <returns>True on success, false if failed (PhaseNumber should be higher than 0).</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Phase.Modify">
            <summary> Modifies a phase. </summary>
            <returns>True on success, false if failed (PhaseNumber should be higher than 0).</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Phase.Delete">
            <summary> Deletes a phase. The current phase cannot be deleted. </summary>
            <returns>True on success, false if failed (the attached objects probably caused the failure).</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Phase.SetUserProperty(System.String,System.String)">
            <summary> Sets a string property for the phase. </summary>
            <param name="Name">The name of the property to be set, in capital letters.</param>
            <param name="Value">The new value for the property.</param>
            <returns>True if the property was set successfully.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Phase.SetUserProperty(System.String,System.Double)">
            <summary> Sets a double property for the phase. </summary>
            <param name="Name">The name of the property to be set, in capital letters.</param>
            <param name="Value">The new value for the property.</param>
            <returns>True if the property was set successfully.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Phase.SetUserProperty(System.String,System.Int32)">
            <summary> Sets an integer property for the phase. </summary>
            <param name="Name">The name of the property to be set, in capital letters.</param>
            <param name="Value">The new value for the property.</param>
            <returns>True if the property was set successfully.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Phase.GetUserProperty(System.String,System.String@)">
            <summary> Retrieves a string property for the phase.</summary>
            <param name="Name">The name of the property to be retrieved, in capital letters.</param>
            <param name="Value">The return value.</param>
            <returns>True if the value was returned successfully.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Phase.GetUserProperty(System.String,System.Double@)">
            <summary> Retrieves a double property for the phase.</summary>
            <param name="Name">The name of the property to be retrieved, in capital letters.</param>
            <param name="Value">The return value.</param>
            <returns>True if the value was returned successfully.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Phase.GetUserProperty(System.String,System.Int32@)">
            <summary> Retrieves an integer property for the phase.</summary>
            <param name="Name">The name of the property to be retrieved, in capital letters.</param>
            <param name="Value">The return value.</param>
            <returns>True if the value was returned successfully.</returns>
        </member>
        <member name="P:Tekla.Structures.Model.Phase.PhaseNumber">
            <summary>
            The phase number.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Phase.PhaseName">
            <summary>
            The phase name.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Phase.PhaseComment">
            <summary>
            The phase comment.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Phase.IsCurrentPhase">
            <summary>
            The value is 1 if the phase is the current phase, 0 otherwise.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Phase.PhaseManipulationTypeEnum">
            <summary> The object manipulation types.  </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Phase.PhaseAttributeOperationTypeEnum">
            <summary> Type of phase property operation: get/set.</summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotPhase_t">
            <summary>
            Serialization structure for the Set phase method
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPhase_t.PhaseManipulationType">
            <summary>
            The phase manipulation type
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPhase_t.Id">
            <summary>
            ID of the part whose phase we wish to set/get
            If set to 0 struct is used to get phase information
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPhase_t.PhaseNumber">
            <summary>
            The phase number
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPhase_t.PhaseName">
            <summary>
            The phase name.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPhase_t.PhaseComment">
            <summary>
            The phase comment.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPhase_t.IsCurrentPhase">
            <summary>
            Tells whether the phase is current or not.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPhase_t.Result">
            <summary>
            The result of the phase change (true or false).
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotSetGetProperty_t">
            <summary> Serialization structure for the Set property method </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSetGetProperty_t.aName">
            <summary> Name of the property </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSetGetProperty_t.PropertyType">
            <summary> Type of the property </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSetGetProperty_t.OperationType">
            <summary> Where to get the property (UDA/Report) </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSetGetProperty_t.PhaseNumber">
            <summary> The phase number </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSetGetProperty_t.IntValue">
            <summary> Integer return value </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSetGetProperty_t.DoubleValue">
            <summary> Double return value </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSetGetProperty_t.aStringValue">
            <summary> String return value </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Position">
            <summary>
            The Position class defines how a part is positioned relative to the input.
            </summary>
            <example>
            Defining the position of a bolt array instance:
            <code>
            using Tekla.Structures.Model;
            
            public class Example
            {
                   public void Example1()
                   {
                       BoltArray MyBoltArray = new BoltArray();
            
                       MyBoltArray.Position.Depth = Position.DepthEnum.MIDDLE;
                       MyBoltArray.Position.DepthOffset = 3;
                       MyBoltArray.Position.Plane = Position.PlaneEnum.MIDDLE;
                       MyBoltArray.Position.PlaneOffset = 1;
                       MyBoltArray.Position.Rotation = Position.RotationEnum.FRONT;
                       MyBoltArray.Position.RotationOffset = 2;
                   }
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.Structures.Model.Position.#ctor">
            <summary>
            Creates a new position instance.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Position.PlaneOffset">
            <summary>
            The offset away from the Plane value.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Position.DepthOffset">
            <summary>
            The offset away from the Depth value.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Position.RotationOffset">
            <summary>
            The offset away from the Rotation value.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Position.Plane">
            <summary>
            Indicates the positioning in the plane sense.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Position.Depth">
            <summary>
            Indicates the positioning in the depth sense.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Position.Rotation">
            <summary>
            Indicates the positioning in the rotational sense.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Position.PlaneEnum">
            <summary>
            The position in the plane sense.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Position.PlaneEnum.MIDDLE">
            <summary>
            The middle option.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Position.PlaneEnum.LEFT">
            <summary>
            The left option.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Position.PlaneEnum.RIGHT">
            <summary>
            The right option.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Position.DepthEnum">
            <summary>
            The position in the depth sense.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Position.DepthEnum.MIDDLE">
            <summary>
            The middle option.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Position.DepthEnum.FRONT">
            <summary>
            The front option.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Position.DepthEnum.BEHIND">
            <summary>
            The behind option.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Position.RotationEnum">
            <summary>
            The position in the rotational sense.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Position.RotationEnum.FRONT">
            <summary>
            The front option.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Position.RotationEnum.TOP">
            <summary>
            The top option.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Position.RotationEnum.BACK">
            <summary>
            The back option.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Position.RotationEnum.BELOW">
            <summary>
            The below option.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotPosition_t">
            <summary>
            Struct for the Position.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPosition_t.PlaneOffset">
            <summary>
            Offsets away from the value.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPosition_t.DepthOffset">
            <summary>
            Offsets away from the value.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPosition_t.RotationOffset">
            <summary>
            Offsets away from the value.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPosition_t.Plane">
            <summary>
            Positioning in the following sense.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPosition_t.Depth">
            <summary>
            Positioning in the following sense.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPosition_t.Rotation">
            <summary>
            Positioning in the following sense.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Profile">
            <summary>
            The Profile class defines the form of a cross section.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.Profile.#ctor">
            <summary>
            Instantiates an empty profile.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Profile.ProfileString">
            <summary>
            The profile in human-readable form.
            </summary>
            <example>
            The profile of a beam is set to standard L profile "L400*200*60":
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures.Geometry3d;
            
            public class Example
            {
                   public void Example1()
                   {
                       Point point = new Point(5000, 0, 0);
                       Point point2 = new Point(7000, 0, 0);
                       Beam Beam = new Beam(point, point2);
            
                       string ParametricProfileSeparator = "*";
                       string ShapeTypeL = "L";
                       string LshapeProfileDepth = "400";
                       string LshapeProfileWidth = "200";
                       string LshapeProfileThickness = "60";
            
                       Beam.Profile.ProfileString = ShapeTypeL;
                       Beam.Profile.ProfileString += LshapeProfileDepth;
                       Beam.Profile.ProfileString += ParametricProfileSeparator;
                       Beam.Profile.ProfileString += LshapeProfileWidth;
                       Beam.Profile.ProfileString += ParametricProfileSeparator;
                       Beam.Profile.ProfileString += LshapeProfileThickness;
                   }
            }
            </code>
            </example>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotProfile_t">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotProfile_t.aProfileString">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.ChangeManager">
            <summary>
            DO NOT USE! For internal usage only!
            Contains function for the ChangeManager application.
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ChangeManager.AllowSave(System.Boolean)">
            <summary>
            Sets a flag to inidcate whether the model should be saved or not.
            </summary>
            <param name="SaveFlag">True if saving should be done, otherwise false</param>
            <returns>True if flag was set successfully.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ChangeManager.AllowNumbering(System.Boolean)">
            <summary>
            Sets a flag to inidcate whether the model should be numbered or not.
            </summary>
            <param name="NumberingFlag">True if numbering should be done, otherwise false</param>
            <returns>True if flag was set successfully.</returns>
        </member>
        <member name="T:Tekla.Structures.Model.ClashCheckHandler">
            <summary>
            The ClashCheckHandler class contains clash check methods. 
            </summary>
            <example>
            <code>
            using Tekla.Structures.Model;
            
            public class Example
            {
                   public void Exmaple1()
                   {
                       Model MyModel = new Model();
            
                       ClashCheckHandler ClashCheck = MyModel.GetClashCheckHandler();
                       ClashCheck.RunClashCheck();
                       ClashCheck.StopClashCheck();
                   }
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.Structures.Model.ClashCheckHandler.#ctor">
            <summary>
            Internal constructor for ClashCheckHandler.
            Should be instantiated only from Model.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.ClashCheckHandler.RunClashCheck">
            <summary>
            Starts the clash checking.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ClashCheckHandler.StopClashCheck">
            <summary>
            Stops the clash checking.
            </summary>
            <returns>True on success.</returns>
            <remarks>Stops the clash check only when the Advanced Options' XS_USE_NEW_CLASH_CHECK is set.</remarks>
        </member>
        <member name="M:Tekla.Structures.Model.ClashCheckHandler.GetIntersectionBoundingBoxes(Tekla.Structures.Identifier,Tekla.Structures.Identifier)">
            <summary>
            Get a list of bounding boxes (AABB) of the clashing volumes of two objects.
            </summary>
            <param name="ID1">The identifier of the first object.</param>
            <param name="ID2">The identifier of the second object.</param>
            <returns>A list of bounding boxes of the clashing volumes.</returns>
        </member>
        <member name="T:Tekla.Structures.Model.ClashCheckData">
            <summary>
            The ClashCheckData class presents information about the detected clash. It is instantiated inside the onClashDetected method.
            The objects store the identifiers and type of the clash to be passed on to event subscribers.   
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ClashCheckData._Identifier1">
            <summary>
            Private variables
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.ClashCheckData.ToStruct(Tekla.Structures.ModelInternal.dotClash_t)">
            <summary>
            From ClashCheckData to dotClash_t.
            </summary>
            <param name="Clash"></param>
        </member>
        <member name="M:Tekla.Structures.Model.ClashCheckData.FromStruct(Tekla.Structures.ModelInternal.dotClash_t)">
            <summary>
            From dotClash_t to ClashCheckData.
            </summary>
            <param name="Clash"></param>
        </member>
        <member name="P:Tekla.Structures.Model.ClashCheckData.Object1">
            <summary>
            Gets the first clashing object.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.ClashCheckData.Object2">
            <summary>
            Gets the second clashing object.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.ClashCheckData.Type">
            <summary>
            Gets the type of the clash.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.ClashCheckData.Overlap">
            <summary>
            Gets the overlap of the clash. Only applies to clashes of type CLASH_TYPE_CLASH.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.ClashCheckData.ClashTypeEnum">
            <summary>
            An enumeration for the different clash types.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ClashCheckData.ClashTypeEnum.CLASH_TYPE_INVALID">
            <summary>
            The invalid clash type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ClashCheckData.ClashTypeEnum.CLASH_TYPE_ISINSIDE">
            <summary>
            One object is inside the other object.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ClashCheckData.ClashTypeEnum.CLASH_TYPE_EXACTMATCH">
            <summary>
            The exact match clash type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ClashCheckData.ClashTypeEnum.CLASH_TYPE_CLASH">
            <summary>
            The unidentified clash type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ClashCheckData.ClashTypeEnum.CLASH_TYPE_MINDISTANCE">
            <summary>
            The minimum distance clash type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ClashCheckData.ClashTypeEnum.CLASH_TYPE_FAILEDSOLID">
            <summary>
            The failed solid clash type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ClashCheckData.ClashTypeEnum.CLASH_TYPE_CUTTHROUGH">
            <summary>
            The cut through clash type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ClashCheckData.ClashTypeEnum.CLASH_TYPE_COMPLEXCLASH">
            <summary>
            The complex clash type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ClashCheckData.ClashTypeEnum.CLASH_TYPE_FAILEDTEST">
            <summary>
            The failed test clash type.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotClash_t">
            <summary>
            Struct for the ClashCheck.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotClash_t.Id1">
            <summary>
            ID of the first clashing object.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotClash_t.Id2">
            <summary>
            ID of the second clashing object.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotClash_t.Type">
            <summary>
            Type of Clash. One of ClashTypeEnum.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotClash_t.PenetrationDepth">
            <summary>
            Penetration depth of the clash. Min 0.2 mm = 0.0002 PenetrationDepth, Max 
            200.0 mm = 0.200 PenetrationDepth. Can be 0.0 if penetration depth could not be calculated.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Model">
            <summary>
            The Model class represents a single model open in Tekla Structures.
            Before interaction with the model, the user will have to create one
            instance of this class.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.Model.#ctor">
            <summary>
            Creates a "handle" to the currently open model.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.Model.GetConnectionStatus">
            <summary>
            Returns true if a proper connection to the Tekla Structures process has been established. If, for some reason, the connection
            has been lost, the method will return false. Currently, there's no way to re-establish the connection.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Model.GetInfo">
            <summary>
            Returns information about the currently open model.
            </summary>
            <returns>A ModelInfo instance on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Model.GetProjectInfo">
            <summary>
            Returns information about the current model's project.
            </summary>
            <returns>A ProjectInfo instance on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Model.GetPhases">
            <summary>
            Returns information about the current model's phases.
            </summary>
            <returns>A PhaseCollection instance on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Model.GetModelObjectSelector">
            <summary>
            Returns a ModelObjectSelector instance from which different kind of selections
            can be made.
            </summary>
            <returns>A new ModelObjectSelector instance.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Model.SelectModelObject(Tekla.Structures.Identifier,Tekla.Structures.Model.ModelObject.ModelObjectEnum)">
            <summary>
            Takes as Input an ID to a object and then instantiates and selects it before returning it.
            </summary>
            <param name="ID">The identifier of the ModelObject that we wish to select</param>
            <param name="Type">Type of the object</param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.Model.Model.SelectModelObject(Tekla.Structures.Identifier)">
            <summary>
            Takes as input an identifier to an object and then checks its type and 
            instantiates and selects it before returning it.
            </summary>
            <param name="ID">The identifier of the model object that is to be selected.</param>
            <returns>The selected model object with the given identifier.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Model.GetIdentifierByGUID(System.String)">
            <summary>
            Returns an identifier instance that has the given GUID in the model.
            </summary>
            <param name="GUID">The GUID to look for in the model.</param>
            <returns>The identifier of the GUID, or null if not found.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Model.GetGUIDByIdentifier(Tekla.Structures.Identifier)">
            <summary>
            Returns the GUID of the given identifier instance.
            </summary>
            <param name="ID">The identifier to look for in the model.</param>
            <returns>The GUID of the identifier.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Model.CommitChanges">
            <summary>
            Commits the changes made to the model database so far. One commit is something that a
            user can later on undo with the undo command. A commit also launches the drawing of the
            changed product model to the visible views. A dependent plug-in should never call CommitChanges, 
            since this would make undo very difficult for the user to do. However, non-dependent plug-ins 
            require a separate commit if new objects are created.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Model.CommitChanges(System.String)">
            <summary>
            Commits the changes made to the model database so far. One commit is something that a
            user can later on undo with the undo command. A commit also launches the drawing of the
            changed product model to the visible views. A plug-in should never call CommitChanges, 
            since this would make undo very difficult for the user to do.
            </summary>
            <param name="Message">The message to be saved with the commit.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Model.GetWorkPlaneHandler">
            <summary>
            Returns a new work plane handler for the model. The work plane handler
            can be used to manipulate the current work plane in the model.
            </summary>
            <returns>The new work plane handler instance.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Model.GetClashCheckHandler">
            <summary>
            Returns a new clash check handler.
            </summary>
            <returns>The new clash check handler instance.</returns>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotSaveAsWebModel_t">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSaveAsWebModel_t.OnlySelected">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSaveAsWebModel_t.Filename">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSaveAsWebModel_t.Result">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotCreateReportFromModel_t">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotCreateReportFromModel_t.OnlySelected">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotCreateReportFromModel_t.aTemplateName">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotCreateReportFromModel_t.aFileName">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotCreateReportFromModel_t.aTitle1">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotCreateReportFromModel_t.aTitle2">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotCreateReportFromModel_t.aTitle3">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotCreateReportFromModel_t.Result">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.ModelExtensions">
            <summary>
            DO NOT USE! For internal usage only!
            The <see cref="T:Tekla.Structures.ModelInternal.ModelExtensions"/> class provides a set of extension methods for the <see cref="T:Tekla.Structures.Model.Model"/> type.
            </summary>
            <remarks>
            Used by the DM platform adapter.
            </remarks>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ModelExtensions.GetModelObjectType(Tekla.Structures.Model.Model,Tekla.Structures.Identifier)">
            <summary>
            Gets the <see cref="T:System.Type"/> of the <see cref="T:Tekla.Structures.Model.ModelObject"/> identified by the given <paramref name="ID"/>.
            </summary>
            <param name="Model">The <see cref="T:Tekla.Structures.Model.Model"/> to get the model object identified by <paramref name="ID"/> from.</param>
            <param name="ID">The identifier of the model object of which its <see cref="T:System.Type"/> needs to be returned.</param>
            <returns>The <see cref="T:System.Type"/> of the <see cref="T:Tekla.Structures.Model.ModelObject"/> identified by the given <paramref name="ID"/>.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ModelExtensions.TryGetModelObjectType(Tekla.Structures.Model.Model,Tekla.Structures.Identifier,System.Type@)">
            <summary>
            Tries to get the <see cref="T:System.Type"/> of the <see cref="T:Tekla.Structures.Model.ModelObject"/> identified by the given <paramref name="ID"/>, if any.
            </summary>
            <param name="Model">The <see cref="T:Tekla.Structures.Model.Model"/> to get the model object identified by <paramref name="ID"/> from.</param>
            <param name="ID">The identifier of the model object of which its <see cref="T:System.Type"/> needs to be returned.</param>
            <param name="ObjectType">The <see cref="T:System.Type"/> of the <see cref="T:Tekla.Structures.Model.ModelObject"/> identified by the given <paramref name="ID"/>, if any.</param>
            <returns>True if a <see cref="T:System.Type"/> can be resolved for the model object; otherwise, false.</returns>
        </member>
        <member name="T:Tekla.Structures.Model.ModelInfo">
            <summary>
            The ModelInfo class provides information about the currently open Tekla Structures
            model.
            </summary>
            <example>
            When Tekla Structures is running the length of the model name tells you whether the model
            is open.
            <code>
            using Tekla.Structures.Model;
            using System.Windows.Forms;
            
            public class Example
            {
                public void Example1()
                {
                    Model CurrentModel = new Model();
                    ModelInfo Info = CurrentModel.GetInfo();
            
                    if (CurrentModel.GetConnectionStatus())
                    {
                        if (Info.ModelName.Length == 0)
                        {
                            MessageBox.Show("A Tekla Structures model is not open.");
                        }
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.Structures.Model.ModelInfo.#ctor">
            <summary> Creates a new ModelInfo instance without Tekla Structurea model name, path, or version information. </summary>
        </member>
        <member name="M:Tekla.Structures.Model.ModelInfo.GetInfo">
            <summary> Get current model info. </summary>
        </member>
        <member name="P:Tekla.Structures.Model.ModelInfo.NorthDirection">
            <summary> The north direction of the current Tekla Structures model. </summary>
        </member>
        <member name="P:Tekla.Structures.Model.ModelInfo.ModelPath">
            <summary> The path to the Tekla Structures model. </summary>
        </member>
        <member name="P:Tekla.Structures.Model.ModelInfo.ModelName">
            <summary> The name of the Tekla Structures model. </summary>
        </member>
        <member name="P:Tekla.Structures.Model.ModelInfo.CurrentPhase">
            <summary> The number of the Tekla Structures model's current phase. </summary>
        </member>
        <member name="P:Tekla.Structures.Model.ModelInfo.SharedModel">
            <summary> The read-only property of the Tekla Structures model's sharing status. </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotModelInfo_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotModelInfo_t.aModelPath">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotModelInfo_t.aModelName">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotModelInfo_t.NorthDirection">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotModelInfo_t.SetInfo">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotModelInfo_t.OpenAutoSaved">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotModelInfo_t.CurrentPhase">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotModelInfo_t.IsSharedModel">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotModelInfo_t.ModelDataBaseVersion">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotModelInfo_t.CurrentDataBaseVersion">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotModelObject_t">
            <summary>
            ModelObject class serialization structure.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotModelObject_t.Object">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotModelObject_t.Type">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotModelObject_t.aLabel">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotModelObjectType_t">
            <summary>
            ModelObject type class serialization structure.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotModelObjectType_t.PrimaryType">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotModelObjectType_t.SecondaryType">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotModelObjectType_t.BooleanPartType">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotModelObjectType_t.IsConcreteMaterial">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotSetProperty_t">
            <summary>
            Serialization structure for the Set property method
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSetProperty_t.aName">
            <summary>
            Name of the property
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSetProperty_t.Type">
            <summary>
            Type of the property
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSetProperty_t.Source">
            <summary>
            Where to get the property (UDA/Report)
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSetProperty_t.FatherId">
            <summary>
            ID of the part whose property we wish to get or set
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSetProperty_t.IntValue">
            <summary>
            Integer return value
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSetProperty_t.DoubleValue">
            <summary>
            Double return value
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSetProperty_t.aStringValue">
            <summary>
            String return value
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotGetProperties_t">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGetProperties_t.aName0">
            <summary>
            Name of the property
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGetProperties_t.aName1">
            <summary>
            Name of the property
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGetProperties_t.aName2">
            <summary>
            Name of the property
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGetProperties_t.aName3">
            <summary>
            Name of the property
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGetProperties_t.aName4">
            <summary>
            Name of the property
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGetProperties_t.aName5">
            <summary>
            Name of the property
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGetProperties_t.aName6">
            <summary>
            Name of the property
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGetProperties_t.aName7">
            <summary>
            Name of the property
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGetProperties_t.aName8">
            <summary>
            Name of the property
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGetProperties_t.aName9">
            <summary>
            Name of the property
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGetProperties_t.Type">
            <summary>
            Type of the property
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGetProperties_t.Source">
            <summary>
            Where to get the property (UDA/Report/AllUDAs)
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGetProperties_t.FatherId">
            <summary>
            ID of the part whose property we wish to get or set
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGetProperties_t.InitializeTable">
            <summary>
            Used for initialization of PropertyTable 1= initialize, 0= don't 
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGetProperties_t.nProperties">
            <summary>
            Number of properties
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGetProperties_t.aSuccess">
            <summary>
            0 or 1, to determine if the value was retrieved successfully
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGetProperties_t.aIntValues">
            <summary>
            Integer return values
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGetProperties_t.aDoubleValues">
            <summary>
            Double return values
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGetProperties_t.aStringValue0">
            <summary>
            String return value
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGetProperties_t.aStringValue1">
            <summary>
            String return value
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGetProperties_t.aStringValue2">
            <summary>
            String return value
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGetProperties_t.aStringValue3">
            <summary>
            String return value
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGetProperties_t.aStringValue4">
            <summary>
            String return value
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGetProperties_t.aStringValue5">
            <summary>
            String return value
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGetProperties_t.aStringValue6">
            <summary>
            String return value
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGetProperties_t.aStringValue7">
            <summary>
            String return value
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGetProperties_t.aStringValue8">
            <summary>
            String return value
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGetProperties_t.aStringValue9">
            <summary>
            String return value
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotModelCommit_t">
            <summary>
            ModelCommit class serialization structure.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotModelCommit_t.aMessage">
            <summary>
            Commit Message
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.ModelObjectFactory">
            <summary>
            The <see cref="T:Tekla.Structures.ModelInternal.ModelObjectFactory"/> class instantiates empty object instances.
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ModelObjectFactory.GetCorrectInstance(Tekla.Structures.Model.Model,Tekla.Structures.Identifier)">
            <summary>
            Returns a default <see cref="T:Tekla.Structures.Model.ModelObject"/> of correct type for the given id and type without calling Select.
            </summary>
            <param name="model">The <see cref="N:Tekla.Structures.Model"/> to select the instance's type from.</param>
            <param name="identifier">Identifier of the object</param>
            <returns>A <see cref="T:Tekla.Structures.Model.ModelObject"/> of correct type</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ModelObjectFactory.GetCorrectInstance(Tekla.Structures.Model.Model,Tekla.Structures.Identifier,Tekla.Structures.Model.ModelObject.ModelObjectEnum,System.Int32)">
            <summary>
            Returns a default <see cref="T:Tekla.Structures.Model.ModelObject"/> of correct type for the given id and type without calling Select.
            </summary>
            <param name="model">The <see cref="N:Tekla.Structures.Model"/> to select the instance's type from.</param>
            <param name="identifier">Identifier of the object</param>
            <param name="modelObjectType">Type of the object</param>
            <param name="modelObjectSubType">The sub-type of the object; the value's interpretation depends on <paramref name="modelObjectType"/>.</param>
            <returns>A <see cref="T:Tekla.Structures.Model.ModelObject"/> of correct type</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ModelObjectFactory.GetCorrectInstance(Tekla.Structures.Model.Model,Tekla.Structures.Identifier,Tekla.Structures.ModelInternal.dotModelObjectType_t)">
            <summary>
            Gets a correct <see cref="T:Tekla.Structures.Model.ModelObject"/> type instance for the given <paramref name="modelObjectType"/>.
            </summary>
            <param name="model">The <see cref="T:Tekla.Structures.Model.Model"/> to select the instance from; ignored.</param>
            <param name="identifier">The <see cref="T:Tekla.Structures.Identifier"/> to assign to the returned instance.</param>
            <param name="modelObjectType">The <see cref="T:Tekla.Structures.ModelInternal.dotModelObjectType_t"/> describing the type of <see cref="T:Tekla.Structures.Model.ModelObject"/> to get.</param>
            <returns>A correct <see cref="T:Tekla.Structures.Model.ModelObject"/> type instance for the given <paramref name="modelObjectType"/>.</returns>
        </member>
        <member name="T:Tekla.Structures.Model.ModelObjectEnumerator">
            <summary>
            The ModelObjectEnumerator class provides the means to iterate through model object instances in the 
            current model.
            </summary>
            <example>
            A model object enumerator can be used in a foreach loop:
            <code>
            using Tekla.Structures.Model;
            
            public class Example
            {
                   public void Example1()
                   {
                       Model Model = new Model();
            
                       ModelObjectEnumerator Objects = Model.GetModelObjectSelector().GetAllObjectsWithType(ModelObject.ModelObjectEnum.BEAM);
            
                       foreach (Beam obj in Objects) 
                       {
                           if(obj != null)
                           {
                               Solid Solid = obj.GetSolid();
                           }
                       }
                   }
            }
            </code>
            Another way is to browse items "manually":
            <code>
            using Tekla.Structures.Model;
            
            public class Example
            {
                   public void Example1()
                   {
                       Model Model = new Model();
            
                       ModelObjectEnumerator Enum = Model.GetModelObjectSelector().GetAllObjects();
            
                       while(Enum.MoveNext())
                       {
                           Beam B = Enum.Current as Beam;
                           if(B != null)
                           {
                               Solid Solid = B.GetSolid();
                           }
                       }
                   }
            }
            </code>
            A model object enumerator with AutoFetch set to true in a foreach loop:
            <code>
            using Tekla.Structures.Model;
            
            public class Example
            {
                   public void Example1()
                   {
                       Model Model = new Model();
                       
                       ModelObjectEnumerator.AutoFetch = true;
            
                       ModelObjectEnumerator Objects = Model.GetModelObjectSelector().GetAllObjectsWithType(ModelObject.ModelObjectEnum.BEAM);
            
                       foreach (Beam obj in Objects) 
                       {
                           if(obj != null)
                           {
                               Solid Solid = obj.GetSolid();
                           }
                       }
                   }
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.Structures.Model.ModelObjectEnumerator.#ctor(Tekla.Structures.Model.ModelObjectEnumerator.EnumeratorTypeEnum,Tekla.Structures.Model.ModelObjectEnumerator.EnumeratorSubTypeEnum,Tekla.Structures.Model.ModelObject)">
            <summary>
            Instantiates a new enumerator of given type.
            </summary>
            <param name="Type">Type of enumerator</param>
            <param name="SubType">Subtype of enumerator</param>
            <param name="Object">Additional ModelObject instance needed to create the enumerator</param>
        </member>
        <member name="M:Tekla.Structures.Model.ModelObjectEnumerator.#ctor(Tekla.Structures.Model.ModelObjectEnumerator.EnumeratorTypeEnum)">
            <summary>
            Instantiates a new enumerator of given type. 
            </summary>
            <param name="Type">Type of the enumerator</param>
        </member>
        <member name="M:Tekla.Structures.Model.ModelObjectEnumerator.#ctor(Tekla.Structures.Model.ModelObjectEnumerator.EnumeratorTypeEnum,Tekla.Structures.Model.ModelObject.ModelObjectEnum)">
            <summary>
            Instantiates a new enumerator of given object type.
            </summary>
            <param name="Type"></param>
            <param name="ObjectType"></param>
        </member>
        <member name="M:Tekla.Structures.Model.ModelObjectEnumerator.#ctor(Tekla.Structures.Model.ModelObjectEnumerator.EnumeratorTypeEnum,System.Type[])">
            <summary>
            Instantiates a new enumerator of given object type.
            </summary>
            <param name="Type"></param>
            <param name="TypeFilter"></param>
        </member>
        <member name="M:Tekla.Structures.Model.ModelObjectEnumerator.#ctor(Tekla.Structures.Model.ModelObjectEnumerator.EnumeratorTypeEnum,Tekla.Structures.Model.ModelObject.ModelObjectEnum,System.String)">
            <summary>
            Instantiates a new enumerator of given object type and filter.
            </summary>
            <param name="Type"></param>
            <param name="ObjectType"></param>
            <param name="FilterName"></param>
        </member>
        <member name="M:Tekla.Structures.Model.ModelObjectEnumerator.#ctor(Tekla.Structures.Model.ModelObjectEnumerator.EnumeratorTypeEnum,System.Int32,System.Int32)">
            <summary>
            Instantiates a new enumerator for modified objects after ModStamp.
            </summary>
            <param name="Type"></param>
            <param name="ModStamp"></param>
            <param name="SaveStamp"></param>
        </member>
        <member name="M:Tekla.Structures.Model.ModelObjectEnumerator.#ctor(Tekla.Structures.Model.ModelObjectEnumerator.EnumeratorTypeEnum,Tekla.Structures.Model.ModelObject.ModelObjectEnum,System.Int32,System.Int32)">
            <summary>
            Instantiates a new enumerator for modified or deleted objects after Stamp.
            </summary>
            <param name="Type"></param>
            <param name="Enum"></param>
            <param name="ModStamp"></param>
            <param name="SaveStamp"></param>
        </member>
        <member name="M:Tekla.Structures.Model.ModelObjectEnumerator.#ctor(System.Collections.ArrayList,System.Collections.ArrayList)">
            <summary>
            Enumerator with alredy defined IDs and types
            </summary>
            <param name="Identifiers">Identifiers to enumerate</param>
            <param name="Types">Types to enumerate</param>
        </member>
        <member name="M:Tekla.Structures.Model.ModelObjectEnumerator.GetAllFromDB(Tekla.Structures.ModelInternal.dotEnumerator_t@)">
            <summary>
            Gets the objects from DB. Enumerator's rules must
            be correctly filled in before calling this method.
            </summary>
            <param name="Enumerator">Enumerator including possible select rules and filters.</param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.Model.ModelObjectEnumerator.GetAllFromDB_FAST(Tekla.Structures.ModelInternal.dotEnumerator_t@)">
            <summary>
            Gets the objects from DB. Enumerator's rules must
            be correctly filled in before calling this method.
            </summary>
            <param name="Enumerator">Enumerator including possible select rules and filters.</param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.Model.ModelObjectEnumerator.GetAllFromDB(Tekla.Structures.Model.ModelObjectEnumerator.EnumeratorTypeEnum)">
            <summary>
            Get objects from DB by Enumerator
            </summary>
            <returns>false on failure</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ModelObjectEnumerator.MoveNext">
            <summary>
            Moves to the next item in the enumerator. 
            </summary>
            <returns>False on failure.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ModelObjectEnumerator.Reset">
            <summary>
            Resets the enumerator to the beginning.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.ModelObjectEnumerator.GetSize">
            <summary>
            Returns the total amount of items.
            </summary>
            <returns>The total amount of items.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ModelObjectEnumerator.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="P:Tekla.Structures.Model.ModelObjectEnumerator.SelectInstances">
            <summary>
            Indicates that the instance Select() is called when the 'Current' item is asked from the enumerator.
            The user can set this to 'false' if no members are ever asked from the instance. This is the case
            when, for example, asking only a report property from the identifier. Warning: normally the user should not
            change this value.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.ModelObjectEnumerator.AutoFetch">
            <summary>
            Indicates that the objects are fetched from the model when the enumerator is created.
            Object information is therefore not anymore fetched when 'Current' item is asked from the enumerator.
            Warning: changing of TransformationPlane after creation of enumerator or during the enumeration 
            requires a separate selection of object for refreshing the values. 
            Property value is used for all enumerators in application  
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.ModelObjectEnumerator.Current">
            <summary>
            The current model object instance active in the enumerator.
            The value is null if there are no more objects left.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.ModelObjectEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            The implementation for the Current property required by the IEnumerator. The returned object
            is always of the type ModelObject.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.ModelObjectEnumerator.EnumeratorTypeEnum">
            <summary>
            The types of enumerator available.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObjectEnumerator.EnumeratorTypeEnum.ALL_SELECTED">
            <summary>
            Selects all user selected objects from the model.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObjectEnumerator.EnumeratorTypeEnum.ALL_OBJECTS">
            <summary>
            Selects all objects from the model.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObjectEnumerator.EnumeratorTypeEnum.MODELOBJECT_CHILDREN">
            <summary>
            Selects children of specified type of given ModelObject
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObjectEnumerator.EnumeratorTypeEnum.BY_FILTER_NAME">
            <summary>
            Selects all the ModelObjects for a given filter name
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObjectEnumerator.EnumeratorTypeEnum.CONNECTED_COMPONENTS">
            <summary>
            Selects all connected components of given ModelObject
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObjectEnumerator.EnumeratorTypeEnum.BY_BOUNDING_BOX">
            <summary>
            Selects all objects intersecting with given bounding box
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObjectEnumerator.EnumeratorTypeEnum.ALL_OBJECTS_WITH_TYPE">
            <summary>
            All Objects with type given in type in the "subtype".
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObjectEnumerator.EnumeratorTypeEnum.REFERENCE_MODEL_OBJECTS">
            <summary>
            Selects sub objects of given ReferenceModel.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObjectEnumerator.EnumeratorTypeEnum.MODELOBJECT_FATHERS">
            <summary>
            Selects fathers of specified type of given ModelObject (Tasks mainly)
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObjectEnumerator.EnumeratorTypeEnum.CONNECTED_DEPENDENCIES">
            <summary>
            Selects all connected dependencies of given ModelObject (Tasks mainly)
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObjectEnumerator.EnumeratorTypeEnum.TASKS_OF_SELECTED_OBJECTS">
            <summary>
            Selects all tasks of selected objects
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObjectEnumerator.EnumeratorTypeEnum.MODIFIED_OBJECTS_AFTER_STAMP">
            <summary>
            Selects all modified objects 
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObjectEnumerator.EnumeratorTypeEnum.FILTERED_OBJECTS_WITH_TYPE">
            <summary>
            Filtered objects with type given in type in the "subtype".
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObjectEnumerator.EnumeratorTypeEnum.DELETED_OBJECTS_AFTER_STAMP">
            <summary>
            Selects all modified objects 
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObjectEnumerator.EnumeratorTypeEnum.ALL_PRESELECTED">
            <summary>
            Selects all preselected objects.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObjectEnumerator.EnumeratorTypeEnum.BY_BOUNDING_BOX_AND_VIEW">
            <summary>
            Selects all objects that intersect with the given bounding box and that are visible in the given view.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.ModelObjectEnumerator.EnumeratorSubTypeEnum">
            <summary>
            Enumerator type specifiers.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObjectEnumerator.EnumeratorSubTypeEnum.ALL_CHILDREN">
            <summary>
            Selects all children
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObjectEnumerator.EnumeratorSubTypeEnum.CONNECTED_BOOLEANS">
            <summary>
            Selects connected boolean objects
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObjectEnumerator.EnumeratorSubTypeEnum.CONNECTED_BOLTS">
            <summary>
            Selects connected bolts
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObjectEnumerator.EnumeratorSubTypeEnum.CONNECTED_WELDS">
            <summary>
            Selects connected welds
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObjectEnumerator.EnumeratorSubTypeEnum.CONNECTED_REBARS">
            <summary>
            Selects connected rebars
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObjectEnumerator.EnumeratorSubTypeEnum.CONNECTED_SURFACINGS">
            <summary>
            Selects connected surfaces
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObjectEnumerator.EnumeratorSubTypeEnum.SELECTED_CHILDREN">
            <summary>
            Selects selected children
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObjectEnumerator.EnumeratorSubTypeEnum.CONNECTED_HIERARCHIES">
            <summary>
            Selects connected hierarchies
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObjectEnumerator.EnumeratorSubTypeEnum.PARTS_RELATED_TO_POUR">
            <summary>
            Selects parts related to pour
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObjectEnumerator.EnumeratorSubTypeEnum.POURS_PART_BELONGS_TO">
            <summary>
            Selects the pours the part belongs to.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotEnumerator_t">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotEnumerator_t.MoreObjectsLeft">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotEnumerator_t.nObjects">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotEnumerator_t.Filter">
            <summary>
            Enumerator type
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotEnumerator_t.SubFilter">
            <summary>
            Enumerator subtype
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotEnumerator_t.nObjectToStart">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotEnumerator_t.aObjects">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotEnumerator_t.aObjectTypes">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotEnumerator_t.AdditionalId">
            <summary>
            For example for getting children info
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotEnumerator_t.aFilterName">
            <summary>
            Name of the select filter to apply
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotEnumerator_t.MinPoint">
            <summary>
            MinPoint of bouding box to apply
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotEnumerator_t.MaxPoint">
            <summary>
            MaxPoint of bounding bo to apply
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotEnumerator_t.ViewId">
            <summary>
            The view identifier to use when getting objects by bounding box and view.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotEnumerator_t.ModificationStamp">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotEnumerator_t.ClientId">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotClientId_t">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotClientId_t.ProcessId">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotClientId_t.ThreadId">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.dotClientId_t.GetClientId">
            <summary>
            Get unique client id for application.
            Client id must be used with sequential queries, like
            object enumeration.
            </summary>
            <returns>Client id</returns>
        </member>
        <member name="T:Tekla.Structures.Model.ModelObjectSelector">
            <summary>
            The ModelObjectSelector class can be used to make different model object selections
            from the current model.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Model;
            
            public class Example
            {
                   public void Example1()
                   {
                       Model Model = new Model();
            
                       ModelObjectSelector Selector = Model.GetModelObjectSelector();
            
                       foreach(ModelObject MO in Selector)
                       {
                           Beam B = MO as Beam;
                           if(B != null)
                           {
                               Solid solid = B.GetSolid();
                           }
                       }
                   }
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.Structures.Model.ModelObjectSelector.#ctor">
            <summary>
            Should be called only from Model (to simulate "current model" connection...)
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.ModelObjectSelector.GetAllObjects">
            <summary>
            Returns an enumerator of all the model objects in the current model.
            </summary>
            <returns>A model object enumerator of all the model objects.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ModelObjectSelector.GetAllObjectsWithType(Tekla.Structures.Model.ModelObject.ModelObjectEnum)">
            <summary>
            Returns an enumerator of all the model objects in the current model with the given type.
            </summary>
            <param name="Enum">The type of the objects to return.</param>
            <returns>A model object enumerator of all the model objects with the given type.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ModelObjectSelector.GetAllObjectsWithType(System.Type[])">
             <summary>
             Returns an enumerator of all the model objects in the current model with the given base type.
             </summary>
             <example>
             In the following example a connection to the Tekla Structures model is established and
             all parts and boolean objects are fetched for enumeration from the model.
             <code>
             using Tekla.Structures.Model;
             
             public class Example
             {
                    public void Example1()
                    {
                        Model Model = new Model();
             
                        System.Type[] Types = new System.Type[2];
                        Types.SetValue(typeof(Part),0);
                        Types.SetValue(typeof(Boolean),1);
            
                        ModelObjectEnumerator myEnum = Model.GetModelObjectSelector().GetAllObjectsWithType(Types);
                    }
             }
             </code>
             </example>
             <param name="TypeFilter">The types of the objects to return.</param>
             <returns>A model object enumerator of all the model objects with the given types.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ModelObjectSelector.GetObjectsByBoundingBox(Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point)">
            <summary>
            Returns an enumerator of the model objects in the current model colliding with the given
            geometrical bounding box. Note that this method uses approximate bounding
            boxes and thus is NOT EXACT, and may return objects not necessarily colliding
            with the given box but only being somewhere near to it.
            </summary>
            <param name="MinPoint">The minimum point of the bounding box.</param>
            <param name="MaxPoint">The maximum point of the bounding box.</param>
            <returns>A model object enumerator of the model objects colliding with the given bounding box.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ModelObjectSelector.GetEnumerator">
            <summary>
            Returns an enumerator of all the model objects in the current model.
            </summary>
            <returns>A model object enumerator of all the model objects.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ModelObjectSelector.GetObjectsByFilterName(System.String)">
            <summary>
            Returns an enumerator of the model objects in the current model selected by the given selection
            filter.
            </summary>
            <param name="FilterName">The name of an existing selection filter to apply.</param>
            <returns>A model object enumerator of the objects selected by the filter.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ModelObjectSelector.GetFilteredObjectsWithType(Tekla.Structures.Model.ModelObject.ModelObjectEnum,System.String)">
            <summary>
            Returns an enumerator of the model objects in the current model with the given type and selected by the filter.
            </summary>
            <param name="Enum">The type of the objects to return.</param>
            <param name="FilterName">The name of an existing selection filter to apply.</param>
            <returns>A model object enumerator of the model objects with the given type and selected by the filter.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ModelObjectSelector.GetObjectsByFilter(Tekla.Structures.Filtering.FilterExpression)">
            <summary> Returns an enumerator of the model objects in the current model selected by the given selection filter definition.</summary>
            <param name="FilterExpression">The definition of a selection filter to apply.</param>
            <returns>A model object enumerator of the objects selected by the filter.</returns>
        </member>
        <member name="T:Tekla.Structures.Model.ProjectInfo">
            <summary>
            The ProjectInfo class provides project information about the currently open Tekla Structures model.
            </summary>
            <example>
            The following example gets the project information and shows the value of the Name property
            in a message dialog:
            <code>
            using Tekla.Structures.Model;
            using System.Windows.Forms;
            
            public class Example
            {
                public void Example1()
                {
                    Model CurrentModel = new Model();
                    ProjectInfo ProjectInfo = CurrentModel.GetProjectInfo();
            
                    if (CurrentModel.GetConnectionStatus())
                    {
                        if (ProjectInfo.Name.Length > 0)
                        {
                            MessageBox.Show(ProjectInfo.Name);
                        }
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="F:Tekla.Structures.Model.ProjectInfo._Description">
            <summary>
            The description to the Tekla Structures model.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ProjectInfo._StartDate">
            <summary>
            Start date information of the project.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ProjectInfo._EndDate">
            <summary>
            End date information of the project.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ProjectInfo._Designer">
            <summary>
            Designer information of the project.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ProjectInfo._Address">
            <summary>
            Address information of the project.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ProjectInfo._Object">
            <summary>
            Object information of the project.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ProjectInfo._Builder">
            <summary>
            Builder information of the project.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ProjectInfo._Name">
            <summary>
            Name information of the project.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ProjectInfo._ProjectNumber">
            <summary>
            Project number information of the project.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ProjectInfo._ModelSharingLocalPath">
            <summary>
            Local sharing folder of the model.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ProjectInfo._ModelSharingServerPath">
            <summary>
            Web sharing path of the model.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ProjectInfo._Extra1">
            <summary>
            info 1.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ProjectInfo._Extra2">
            <summary>
            info 2.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ProjectInfo._Extra3">
            <summary>
            Internal Extra info 3.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ProjectInfo._GUID">
            <summary>
            Project GUID.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.ProjectInfo.#ctor">
            <summary>
            Creates a new Project instance.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.ProjectInfo.GetInfo">
            <summary>
            Get current ProjectInfo.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.ProjectInfo.Modify">
            <summary>
            Modifies the current project information.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ProjectInfo.GetUserProperty(System.String,System.String@)">
            <summary>
            Retrieves a string property for the ProjectInfo.
            </summary>
            <param name="Name">The name of the property to be retrieved.</param>
            <param name="Value">The return value.</param>
            <returns>True if the value was returned successfully.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ProjectInfo.GetUserProperty(System.String,System.Int32@)">
            <summary>
            Retrieves an integer property for the ProjectInfo.
            </summary>
            <param name="Name">The name of the property to be retrieved.</param>
            <param name="Value">The return value.</param>
            <returns>True if the value was returned successfully.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ProjectInfo.GetUserProperty(System.String,System.Double@)">
            <summary>
            Retrieves a double property for the ProjectInfo.
            </summary>
            <param name="Name">The name of the property to be retrieved.</param>
            <param name="Value">The return value.</param>
            <returns>True if the value was returned successfully.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ProjectInfo.SetUserProperty(System.String,System.String)">
            <summary>
            Sets a string property for the ProjectInfo.
            </summary>
            <param name="Name">The name of the property to be set.</param>
            <param name="Value">The new value for the property.</param>
            <returns>True if the property was set successfully.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ProjectInfo.SetUserProperty(System.String,System.Double)">
            <summary>
            Sets a double property for the ProjectInfo.
            </summary>
            <param name="Name">The name of the property to be set.</param>
            <param name="Value">The new value for the property.</param>
            <returns>True if the property was set successfully.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ProjectInfo.SetUserProperty(System.String,System.Int32)">
            <summary>
            Sets an integer property for the ProjectInfo.
            </summary>
            <param name="Name">The name of the property to be set.</param>
            <param name="Value">The new value for the property.</param>
            <returns>True if the property was set successfully.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ProjectInfo.GetIntegerUserProperties(System.Collections.Hashtable@)">
            <summary>
            Retrieves all integer properties for the ProjectInfo.  
            </summary>
            <param name="Values">The return value, a hash table that contains all the values that were retrieved successfully.</param>
            <returns>True if at least one single property was retrieved successfully.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ProjectInfo.GetDoubleUserProperties(System.Collections.Hashtable@)">
            <summary>
            Retrieves all double properties for the ProjectInfo.  
            </summary>
            <param name="Values">The return value, a hash table that contains all the values that were retrieved successfully.</param>
            <returns>True if at least one single property was retrieved successfully.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ProjectInfo.GetStringUserProperties(System.Collections.Hashtable@)">
            <summary>
            Retrieves all string properties for the ProjectInfo.  
            </summary>
            <param name="Values">The return value, a hash table that contains all the values that were retrieved successfully.</param>
            <returns>True if at least one single property was retrieved successfully.</returns>
        </member>
        <member name="P:Tekla.Structures.Model.ProjectInfo.Description">
            <summary>
            The description of the ProjectInfo.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.ProjectInfo.StartDate">
            <summary>
            The start date information of the ProjectInfo.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.ProjectInfo.EndDate">
            <summary>
            The end date information of the ProjectInfo.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.ProjectInfo.Designer">
            <summary>
            The designer information of the ProjectInfo.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.ProjectInfo.Address">
            <summary>
            The address information of the ProjectInfo.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.ProjectInfo.Object">
            <summary>
            The object information of the ProjectInfo.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.ProjectInfo.Builder">
            <summary>
            The builder information of the ProjectInfo.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.ProjectInfo.Name">
            <summary>
            The name information of the ProjectInfo.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.ProjectInfo.ProjectNumber">
            <summary>
            The project number information of the ProjectInfo.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.ProjectInfo.ModelSharingLocalPath">
            <summary>
            The local folder for model sharing.
            Is null if not defined for the model.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.ProjectInfo.ModelSharingServerPath">
            <summary>
            The server path for model sharing.
            Is null if not defined for the model.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.ProjectInfo.Info1">
            <summary>
            The Info 1 field of the ProjectInfo.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.ProjectInfo.Info2">
            <summary>
            The Info 2 field of the ProjectInfo.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.ProjectInfo.GUID">
            <summary>
            The GUID field of the ProjectInfo.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotProjectInfo_t">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotProjectInfo_t.aDescription">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotProjectInfo_t.aExtra1">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotProjectInfo_t.aExtra2">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotProjectInfo_t.aExtra3">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotProjectInfo_t.aEndDate">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotProjectInfo_t.aStartDate">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotProjectInfo_t.aDesigner">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotProjectInfo_t.aAddress">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotProjectInfo_t.aObject">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotProjectInfo_t.aBuilder">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotProjectInfo_t.aName">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotProjectInfo_t.aProjectNo">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotProjectInfo_t.aModelSharingLocalPath">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotProjectInfo_t.aModelSharingServerPath">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotProjectInfo_t.GUID">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.ReferenceModel">
            <summary>
            The ReferenceModel class contains methods related to reference models.
            A reference model is a reference of an external model.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Model;
            
            public class Example
            {
                   public void Example1()
                   {
                       ReferenceModel ReferenceModel = new ReferenceModel();
                       ReferenceModel.Filename = "c:\\TeklaStructuresModels\\reference_model.dwg";
                       ReferenceModel.Scale = 1.0;
            
                       bool Result = false;
                       Result = ReferenceModel.Insert();
                   }
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.Structures.Model.ReferenceModel.#ctor">
            <summary>
            Creates a new reference model instance.
            <para>The default values are as follows:
            <list type="bullet">
            <item>Filename = "";</item>
            <item>ProjectGUID = new Guid();</item>
            <item>ModelGUID = new Guid();</item>
            <item>VersionGUID = new Guid();</item>
            <item>Position = new Point();</item>
            <item>Scale = 1.0;</item>
            <item>Visibility = VisibilityEnum.VISIBLE;</item>
            </list>
            </para>
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.ReferenceModel.#ctor(System.String,Tekla.Structures.Geometry3d.Point,System.Double)">
            <summary>
            Creates a new reference model instance using the given filename, position and scale.
            </summary>
            <param name="Filename">The filename to be used.</param>
            <param name="Position">The position to be used.</param>
            <param name="Scale">The scale to be used.</param>
        </member>
        <member name="M:Tekla.Structures.Model.ReferenceModel.Insert">
            <summary>
            Inserts the reference model into the model.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ReferenceModel.Select">
            <summary>
            Selects the reference model with the given identifier.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ReferenceModel.Modify">
            <summary>
            Modifies the reference model with the given identifier.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ReferenceModel.Delete">
            <summary>
            Deletes the reference model with the given identifier.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="P:Tekla.Structures.Model.ReferenceModel.Filename">
            <summary>
            The filename of the reference model.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.ReferenceModel.Position">
            <summary>
            The position of the reference model.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.ReferenceModel.Scale">
            <summary>
            The scale of the reference model.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.ReferenceModel.Visibility">
            <summary>
            The visibility of the reference model in the model view.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.ReferenceModel.ProjectGUID">
            <summary>
            The ProjectGUID of the reference model in the Project Center.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.ReferenceModel.ModelGUID">
            <summary>
            The ModelGUID of the reference model in the Project Center.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.ReferenceModel.VersionGUID">
            <summary>
            The VersionGUID of the reference model in the Project Center.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.ReferenceModel.VisibilityEnum">
            <summary>
            The visibility type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ReferenceModel.VisibilityEnum.HIDDEN">
            <summary>
            The reference model is invisible in the model.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ReferenceModel.VisibilityEnum.VISIBLE">
            <summary>
            The reference model is visible in the model.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotReferenceModel_t">
            <summary>
            Struct for the ReferenceModel
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotReferenceModel_t.ModelObject">
            <summary>
            The object we are extending (Inherited from)
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotReferenceModel_t.Position">
            <summary>
            The object we are extending (Inherited from)
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotReferenceModel_t.aFilename">
            <summary>
            Filename of the Reference Model
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotReferenceModel_t.aProjectGUID">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotReferenceModel_t.aModelGUID">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotReferenceModel_t.aVersionGUID">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotReferenceModel_t.Scale">
            <summary>
            Scale of the Reference Model
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotReferenceModel_t.Visibility">
            <summary>
            Visiblity of the Reference Model
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.ReferenceModelObject">
            <summary>
            The ReferenceModelObject class contains methods related to reference model objects.
            A reference model object is a subobject of a reference model.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ReferenceModelObject._ReferenceModelId">
            <summary>
            The identifier of the reference model that the object belongs to.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ReferenceModelObject._ReferenceHierarchyFather">
            <summary>
            The identifier of the reference hierarchy father part.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.ReferenceModelObject.#ctor(System.Int32,Tekla.Structures.Identifier)">
            <summary>
            Creates a new reference model object instance using the given parameters.
            </summary>
            <param name="ReferenceModelId">The identifier of the reference model.</param>
            <param name="ID">The identifier for the new reference model object.</param>
        </member>
        <member name="M:Tekla.Structures.Model.ReferenceModelObject.#ctor">
            <summary>
            Creates a new reference model object instance.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.ReferenceModelObject.GetReferenceModel">
            <summary>
            Gets the reference model that the reference object belongs to.
            </summary>
            <returns>The reference model on success, null otherwise.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ReferenceModelObject.Insert">
            <summary>
            At the moment reference objects cannot be inserted.
            </summary>
            <returns>An exception.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ReferenceModelObject.Select">
            <summary>
            Selects the reference model with the given identifier.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ReferenceModelObject.Modify">
            <summary>
            At the moment reference objects cannot be modified.
            </summary>
            <returns>An exception.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ReferenceModelObject.Delete">
            <summary>
            At the moment reference objects cannot be deleted.
            </summary>
            <returns>An exception.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ReferenceModelObject.GetFather">
            <summary>
            Returns the reference hierarchy father.
            </summary>
            <returns>Reference to the graph father if such exists, or else an invalid object.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ReferenceModelObject.SelectInstance">
            <summary>
            Selects the reference object instance from the model.
            </summary>
            <returns>True if the selection succeeds, false otherwise</returns>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotReferenceModelObject_t">
            <summary>
            Struct for the ReferenceModelObject
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotReferenceModelObject_t.ModelObject">
            <summary>
            The object we are extending (Inherited from)
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotReferenceModelObject_t.ReferenceModel">
            <summary>
            The reference model which the object is belonging to
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotReferenceModelObject_t.ReferenceHierarchyFather">
            <summary>
            The reference model which the object is belonging to
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Collaboration.ReferenceModelObjectAttribute">
            <summary>
            The ReferenceModelObjectAttribute class is a base class from where concrete attributes are derived from. The documentation about
            different attributes and their function can be found from the vendor specification, for example from the IFC format specification.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Collaboration.ReferenceModelObjectAttribute.Origin">
            <summary>
            The origin of the extrusion.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Collaboration.ReferenceModelObjectAttribute.xDir">
            <summary>
            The X-axis direction.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Collaboration.ReferenceModelObjectAttribute.Extrusion">
            <summary>
            The extrusion vector.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Collaboration.ReferenceModelObjectAttribute.ProfileName">
            <summary>
            The name of the profile (often empty).
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Collaboration.ReferenceModelObjectAttribute.Name">
            <summary>
            The name of the product.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Collaboration.ReferenceModelObjectAttribute.Description">
            <summary>
            The description of the product.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Collaboration.ReferenceModelObjectAttribute.ObjectType">
            <summary>
            The object type of the product.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Collaboration.ReferenceModelObjectAttribute.AttributeTypeEnum">
            <summary>
            All the reference model object attribute types.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Collaboration.ReferenceModelObjectAttribute.AttributeTypeEnum.ATTRIBUTETYPE_INVALID">
            <summary>
            The invalid attribute type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Collaboration.ReferenceModelObjectAttribute.AttributeTypeEnum.ATTRIBUTETYPE_IFC2X3_PARAMETRICOBJECT_CSHAPEPROFILE">
            <summary>
            The C-shape profile attribute type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Collaboration.ReferenceModelObjectAttribute.AttributeTypeEnum.ATTRIBUTETYPE_IFC2X3_PARAMETRICOBJECT_CIRCLEHOLLOWPROFILE">
            <summary>
            The circular and hollow profile attribute type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Collaboration.ReferenceModelObjectAttribute.AttributeTypeEnum.ATTRIBUTETYPE_IFC2X3_PARAMETRICOBJECT_CIRCLEPROFILE">
            <summary>
            The circular profile attribute type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Collaboration.ReferenceModelObjectAttribute.AttributeTypeEnum.ATTRIBUTETYPE_IFC2X3_PARAMETRICOBJECT_ELLIPSEPROFILE">
            <summary>
            The ellipse profile attribute type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Collaboration.ReferenceModelObjectAttribute.AttributeTypeEnum.ATTRIBUTETYPE_IFC2X3_PARAMETRICOBJECT_ISHAPEPROFILE">
            <summary>
            The I-shape profile attribute type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Collaboration.ReferenceModelObjectAttribute.AttributeTypeEnum.ATTRIBUTETYPE_IFC2X3_PARAMETRICOBJECT_LSHAPEPROFILE">
            <summary>
            The L-shape profile attribute type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Collaboration.ReferenceModelObjectAttribute.AttributeTypeEnum.ATTRIBUTETYPE_IFC2X3_PARAMETRICOBJECT_RECTANGLEHOLLOWPROFILE">
            <summary>
            The rectangular and hollow profile attribute type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Collaboration.ReferenceModelObjectAttribute.AttributeTypeEnum.ATTRIBUTETYPE_IFC2X3_PARAMETRICOBJECT_RECTANGLEPROFILE">
            <summary>
            The rectangular profile attribute type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Collaboration.ReferenceModelObjectAttribute.AttributeTypeEnum.ATTRIBUTETYPE_IFC2X3_PARAMETRICOBJECT_TSHAPEPROFILE">
            <summary>
            The T-shape profile attribute type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Collaboration.ReferenceModelObjectAttribute.AttributeTypeEnum.ATTRIBUTETYPE_IFC2X3_PARAMETRICOBJECT_USHAPEPROFILE">
            <summary>
            The U-shape profile attribute type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Collaboration.ReferenceModelObjectAttribute.AttributeTypeEnum.ATTRIBUTETYPE_IFC2X3_PARAMETRICOBJECT_ZSHAPEPROFILE">
            <summary>
            The Z-shape profile attribute type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Collaboration.ReferenceModelObjectAttribute.AttributeTypeEnum.ATTRIBUTETYPE_PARAMETRICOBJECT_CUSTOMPROFILE">
            <summary>
            The custom profile attribute type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Collaboration.ReferenceModelObjectAttribute.AttributeTypeEnum.ATTRIBUTETYPE_PARAMETRICOBJECT_OBB">
            <summary>
            The object bounding box (OBB) attribute type.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_CShapeProfile">
            <summary>
            The IFC2X3_ParametricObject_CShapeProfile class contains the C-shape profile definition.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_CShapeProfile.Depth">
            <summary>
            The depth.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_CShapeProfile.Width">
            <summary>
            The width.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_CShapeProfile.WallThickness">
            <summary>
            The wall thickness.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_CShapeProfile.Girth">
            <summary>
            The girth.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_CShapeProfile.InternalFilletRadius">
            <summary>
            The internal fillet radius.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_CircleHollowProfile">
            <summary>
            The IFC2X3_ParametricObject_CircleHollowProfile class contains the circular and hollow profile definition.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_CircleHollowProfile.Radius">
            <summary>
            The radius.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_CircleHollowProfile.WallThickness">
            <summary>
            The wall thickness.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_CircleProfile">
            <summary>
            The IFC2X3_ParametricObject_CircleProfile class contains the circular profile definition.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_CircleProfile.Radius">
            <summary>
            The radius.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_EllipseProfile">
            <summary>
            The IFC2X3_ParametricObject_EllipseProfile class contains the ellipse profile definition.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_EllipseProfile.SemiAxis1">
            <summary>
            The first semi-axis.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_EllipseProfile.SemiAxis2">
            <summary>
            The second semi-axis.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_IShapeProfile">
            <summary>
            The IFC2X3_ParametricObject_IShapeProfile class contains the I-shape profile definition.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_IShapeProfile.OverallWidth">
            <summary>
            The overall width.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_IShapeProfile.OverallDepth">
            <summary>
            The overall depth.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_IShapeProfile.WebThickness">
            <summary>
            The web thickness.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_IShapeProfile.FlangeThickness">
            <summary>
            The flange thickness.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_IShapeProfile.FilletRadius">
            <summary>
            The fillet radius.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_LShapeProfile">
            <summary>
            The IFC2X3_ParametricObject_LShapeProfile class contains the L-shape profile definition.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_LShapeProfile.Depth">
            <summary>
            The depth.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_LShapeProfile.Width">
            <summary>
            The width.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_LShapeProfile.Thickness">
            <summary>
            The thickness.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_LShapeProfile.FilletRadius">
            <summary>
            The fillet radius.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_LShapeProfile.EdgeRadius">
            <summary>
            The edge radius.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_LShapeProfile.LegSlope">
            <summary>
            The leg slope.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_RectangleHollowProfile">
            <summary>
            The IFC2X3_ParametricObject_RectangleHollowProfile class contains the rectangular and hollow profile definition.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_RectangleHollowProfile.XDim">
            <summary>
            The X dimension.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_RectangleHollowProfile.YDim">
            <summary>
            The Y dimension.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_RectangleHollowProfile.WallThickness">
            <summary>
            The wall thickness.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_RectangleHollowProfile.InnerFilletRadius">
            <summary>
            The inner fillet radius.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_RectangleHollowProfile.OuterFilletRadius">
            <summary>
            The outer fillet radius.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_RectangleProfile">
            <summary>
            The IFC2X3_ParametricObject_RectangleProfile class contains the rectangular profile definition.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_RectangleProfile.XDim">
            <summary>
            The X dimension.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_RectangleProfile.YDim">
            <summary>
            The Y dimension.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_TShapeProfile">
            <summary>
            The IFC2X3_ParametricObject_TShapeProfile class contains the T-shape profile definition.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_TShapeProfile.Depth">
            <summary>
            The depth.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_TShapeProfile.FlangeWidth">
            <summary>
            The flange width.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_TShapeProfile.WebThickness">
            <summary>
            The web thickness.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_TShapeProfile.FlangeThickness">
            <summary>
            The flange thickness.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_TShapeProfile.FilletRadius">
            <summary>
            The fillet radius.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_TShapeProfile.FlangeEdgeRadius">
            <summary>
            The flange edge radius.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_TShapeProfile.WebEdgeRadius">
            <summary>
            The web edge radius.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_TShapeProfile.WebSlope">
            <summary>
            The web slope.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_TShapeProfile.FlangeSlope">
            <summary>
            The flange slope.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_UShapeProfile">
            <summary>
            The IFC2X3_ParametricObject_UShapeProfile class contains the U-shape profile definition.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_UShapeProfile.Depth">
            <summary>
            The depth.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_UShapeProfile.FlangeWidth">
            <summary>
            The flange width.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_UShapeProfile.WebThickness">
            <summary>
            The web thickness.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_UShapeProfile.FlangeThickness">
            <summary>
            The flange thickness.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_UShapeProfile.FilletRadius">
            <summary>
            The fillet radius.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_UShapeProfile.EdgeRadius">
            <summary>
            The edge radius.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_UShapeProfile.FlangeSlope">
            <summary>
            The flange slope.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_ZShapeProfile">
            <summary>
            The IFC2X3_ParametricObject_ZShapeProfile class contains the Z-shape profile definition.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_ZShapeProfile.Depth">
            <summary>
            The depth.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_ZShapeProfile.FlangeWidth">
            <summary>
            The flange width.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_ZShapeProfile.WebThickness">
            <summary>
            The web thickness.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_ZShapeProfile.FlangeThickness">
            <summary>
            The flange thickness.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_ZShapeProfile.FilletRadius">
            <summary>
            The fillet radius.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_ZShapeProfile.EdgeRadius">
            <summary>
            The edge radius.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Collaboration.ParametricObject_ObjectBoundingBox">
            <summary>
            The ParametricObject_ObjectBoundingBox class contains the object bounding box (OBB) definition.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Collaboration.ParametricObject_ObjectBoundingBox.yDir">
            <summary>
            The Y direction.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Collaboration.ParametricObject_CustomProfile">
            <summary>
            The ParametricObject_CustomProfile class contains the custom profile definition.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotReferenceModelObjectAttribute_t">
            <summary>
            Struct for the ReferenceModelObject
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotReferenceModelObjectAttribute_t.ReferenceModelId">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotReferenceModelObjectAttribute_t.ReferenceModelObjectIdentifier">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotReferenceModelObjectAttribute_t.AttributeIndex">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotReferenceModelObjectAttribute_t.IFC2X3_Product">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotReferenceModelObjectAttribute_t.IFC2X3_ParametricObject_ShapeProfile">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotIFC2X3_ParametricObject_ShapeProfile_t">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIFC2X3_ParametricObject_ShapeProfile_t.Origin">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIFC2X3_ParametricObject_ShapeProfile_t.xDir">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIFC2X3_ParametricObject_ShapeProfile_t.Extrusion">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIFC2X3_ParametricObject_ShapeProfile_t.ProfileName">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIFC2X3_ParametricObject_ShapeProfile_t.Double1">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIFC2X3_ParametricObject_ShapeProfile_t.Double2">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIFC2X3_ParametricObject_ShapeProfile_t.Double3">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIFC2X3_ParametricObject_ShapeProfile_t.Double4">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIFC2X3_ParametricObject_ShapeProfile_t.Double5">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIFC2X3_ParametricObject_ShapeProfile_t.Double6">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIFC2X3_ParametricObject_ShapeProfile_t.Double7">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIFC2X3_ParametricObject_ShapeProfile_t.Double8">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIFC2X3_ParametricObject_ShapeProfile_t.Double9">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotIFC2X3_Product_t">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIFC2X3_Product_t.IFC2X3_OwnerHistory">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIFC2X3_Product_t.Name">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIFC2X3_Product_t.Description">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIFC2X3_Product_t.ObjectType">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotIFC2X3_OwnerHistory_t">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIFC2X3_OwnerHistory_t.OwningUser">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIFC2X3_OwnerHistory_t.OwningApplication">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIFC2X3_OwnerHistory_t.State">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIFC2X3_OwnerHistory_t.ChangeAction">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIFC2X3_OwnerHistory_t.CreationDate">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIFC2X3_OwnerHistory_t.LastModifiedDate">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIFC2X3_OwnerHistory_t.isSetLastModifiedDate">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotIFC2X3_PersonAndOrganization_t">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIFC2X3_PersonAndOrganization_t.ThePerson">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIFC2X3_PersonAndOrganization_t.TheOrganization">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotIFC2X3_Application_t">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIFC2X3_Application_t.Version">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIFC2X3_Application_t.ApplicationFullName">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIFC2X3_Application_t.ApplicationIdentifier">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotIFC2X3_Person_t">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIFC2X3_Person_t.Id">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIFC2X3_Person_t.FamilyName">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIFC2X3_Person_t.GivenName">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIFC2X3_Person_t.MiddleNames">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIFC2X3_Person_t.Roles">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotIFC2X3_Organization_t">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIFC2X3_Organization_t.Id">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIFC2X3_Organization_t.Name">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIFC2X3_Organization_t.Description">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIFC2X3_Organization_t.Roles">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotIFC2X3_OwnerHistoryChangeAction_t">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIFC2X3_OwnerHistoryChangeAction_t.CHANGEACTION_NOCHANGE">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIFC2X3_OwnerHistoryChangeAction_t.CHANGEACTION_MODIFIED">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIFC2X3_OwnerHistoryChangeAction_t.CHANGEACTION_ADDED">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIFC2X3_OwnerHistoryChangeAction_t.CHANGEACTION_DELETED">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotIFC2X3_OwnerHistoryState_t">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIFC2X3_OwnerHistoryState_t.STATE_UNDEFINED">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIFC2X3_OwnerHistoryState_t.STATE_READWRITE">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIFC2X3_OwnerHistoryState_t.STATE_READONLY">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIFC2X3_OwnerHistoryState_t.STATE_LOCKED">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIFC2X3_OwnerHistoryState_t.STATE_READWRITELOCKED">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIFC2X3_OwnerHistoryState_t.STATE_READONLYLOCKED">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Collaboration.ReferenceModelObjectAttributeEnumerator">
            <summary>
            The ReferenceModelObjectAttributeEnumerator class can be used to enumerate through reference model object attributes.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures.Model.Collaboration;
            using System;
            
            public class Example
            {
                   public void Example1()
                   {
                       ReferenceModel RM = new ReferenceModel();
                       RM.Filename = "c:\\TeklaStructuresModels\\reference_model.dwg";
                       RM.Scale = 1.0;
            
                       if(RM.Insert())
                       {
                           foreach(ReferenceModelObject RMO in RM.GetChildren())
                           {
                               ReferenceModelObjectAttributeEnumerator RMOAttributeEnumerator = new ReferenceModelObjectAttributeEnumerator(RMO);
            
                               while(RMOAttributeEnumerator.MoveNext())
                               {
                                   ReferenceModelObjectAttribute RMOAttribute = (ReferenceModelObjectAttribute)RMOAttributeEnumerator.Current;
                                   Console.WriteLine("Attribute name: " + RMOAttribute.Name);
                               }
                           }
                       }
                   }
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.Structures.Model.Collaboration.ReferenceModelObjectAttributeEnumerator.#ctor(Tekla.Structures.Model.ReferenceModelObject)">
            <summary>
            Creates a new reference model object attribute enumerator instance.
            </summary>
            <param name="RMO">The reference model object from which the enumerator is created.</param>
        </member>
        <member name="M:Tekla.Structures.Model.Collaboration.ReferenceModelObjectAttributeEnumerator.MoveNext">
            <summary>
            Moves to the next reference model object attribute.
            </summary>
            <returns>True if successfully moved to the next reference model object attribute.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Collaboration.ReferenceModelObjectAttributeEnumerator.Reset">
            <summary>
            Resets the enumerator.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Collaboration.ReferenceModelObjectAttributeEnumerator.Current">
            <summary>
            The current attribute.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotReferenceModelObjectAttributeEnumerator_t">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotReferenceModelObjectAttributeEnumerator_t.ReferenceModelId">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotReferenceModelObjectAttributeEnumerator_t.ReferenceModelObjectIdentifier">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotReferenceModelObjectAttributeEnumerator_t.AttributeIndex">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotReferenceModelObjectAttributeEnumerator_t.AttributeType">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.TypeMapper.MapTypesToIntList(System.Type[])">
            <summary>
            Convert list of model object types to list of values defined
            in enum ModelObject.ModelObjectEnum
            </summary>
            <param name="types">List of types</param>
            <see cref="T:Tekla.Structures.Model.ModelObject.ModelObjectEnum"/>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.TypeMapper.GetCorrectType(System.Type)">
            <summary>
            Just returns a ModelObjectEnum of correct type for the given type.
            </summary>
            <param name="Type">Type of the object</param>
            <returns>a ModelObjectEnum of correct type</returns>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotObject_t">
            <summary>
            Object class serialization
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotObject_t.Identifier">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Operations.Operation">
            <summary>
            The Operation class implements Tekla Structures level operations.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.Operations.Operation.IsNumberingUpToDate(Tekla.Structures.Model.ModelObject)">
            <summary>
            Checks whether the numbering is up-to-date for an assembly, a part or a rebar.
            </summary>
            <param name="ModelObject">The model object to check. The object must be an assembly, a part, a rebar or an inherited object. </param>
            <exception cref="T:System.ArgumentException">Thrown if the <paramref name="ModelObject"/> is not of a correct type or if it is not valid.</exception>
            <returns>True if the numbering information is up-to-date.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Operations.Operation.IsNumberingUpToDateAll">
            <summary>
            Checks whether the numbering is up-to-date for every assembly, part and rebar on the model.
            <remarks>
            Using this method is much faster than checking each object individually.
            </remarks>
            </summary>
            <returns>True if the numbering information is up-to-date.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Operations.Operation.CreateReportFromSelected(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates a report from the selected objects using the given template name and filename.
            <para>If a path is not given in the filename, the file is created to the folder defined with the advanced option XS_REPORT_OUTPUT_DIRECTORY.</para>
            <para>If the given folder does not exist, the report creation fails.</para>
            <para>See Tekla Structures Help for more information about reports.</para>
            </summary>
            <param name="TemplateName">The name of the report template to be used in report creation. The name must contain more than three characters.</param>
            <param name="FileName">The name of the created report. The name must contain more than three characters.</param>
            <param name="Title1">The first title for the created report.</param>
            <param name="Title2">The second title for the created report.</param>
            <param name="Title3">The third title for the created report.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="TemplateName"/> or <paramref name="FileName"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the <paramref name="TemplateName"/> or <paramref name="FileName"/> is too short.</exception>
            <returns>True if the report is created.</returns>
            <example>
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures.Model.Operations;
            using Tekla.Structures.Geometry3d;
            
            using System.Collections;
            
            public class Example
            {
                   public void Example1()
                   {
                       Model Model = new Model();
            
                       Beam B = new Beam(new Point(0,0,0), new Point(0,0,6000));
                       Beam B1 = new Beam(new Point(0,1000,0), new Point(0,1000,6000));
                       Beam B2 = new Beam(new Point(0,2000,0), new Point(0,2000,6000));
            
                       B.Insert();
                       B1.Insert();
                       B2.Insert();
            
                       ArrayList ObjectsToSelect = new ArrayList();
                       ObjectsToSelect.Add(B);
                       ObjectsToSelect.Add(B2);
                       Model.CommitChanges();
            
                       Tekla.Structures.Model.UI.ModelObjectSelector ModelSelector = new Tekla.Structures.Model.UI.ModelObjectSelector();
                       ModelSelector.Select(ObjectsToSelect);
            
                       Operation.CreateReportFromSelected("Assembly_list", "Assembly_list_selected.xsr", "MyTitle", "", "");
                       Operation.DisplayReport("Assembly_list_selected.xsr");
                   }
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.Structures.Model.Operations.Operation.DisplayReport(System.String)">
            <summary>
            Opens and displays a report with the given name. 
            <para>If a path is not given in the filename, the file is searched from the folder defined with the advanced option XS_REPORT_OUTPUT_DIRECTORY.</para>
            <para>See Tekla Structures Help for more information about reports.</para>
            </summary>
            <param name="FileName">The name of the report to display. The name must contain more than three characters. </param>
            <exception cref="T:System.ArgumentException">Thrown when the file specified in the <paramref name="FileName"/> is not found or when the <paramref name="FileName"/> is too short.</exception>
            <returns>True if the report existed.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Operations.Operation.CreateReportFromAll(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates a report from all the objects using the given template name and filename.
            <para>If a path is not given in the filename, the file is created to the folder defined with the advanced option XS_REPORT_OUTPUT_DIRECTORY.</para>
            <para>If the given folder does not exist, the report creation fails.</para>
            <para>Internally, this method is asynchronous, and because of that the output file cannot be immediately available.</para>
            <para>See Tekla Structures Help for more information about reports.</para>
            </summary>
            <param name="TemplateName">The name of the report template to be used in report creation. The name must contain more than three characters.</param>
            <param name="FileName">The name of the created report. The name must contain more than three characters.</param>
            <param name="Title1">The first title for the created report.</param>
            <param name="Title2">The second title for the created report.</param>
            <param name="Title3">The third title for the created report.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="TemplateName"/> or <paramref name="FileName"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the <paramref name="TemplateName"/> or <paramref name="FileName"/> is too short.</exception>
            <returns>True if the report is created.</returns>
            <example>
            The following example creates a report and then displays it. It is taken into account that the created file might not be immediately available.
            <code>
            using System.IO;
            using System.Threading;
            using Tekla.Structures.Model.Operations;
            
            public class Example
            {
                   public bool IfLockedWait(string FileName)
                   {
                       // try 10 times
                       int RetryNumber = 10;
                       while (true)
                       {
                           try
                           {
                               using(FileStream FileStream = new FileStream(
                               FileName, FileMode.Open,
                               FileAccess.ReadWrite, FileShare.ReadWrite))
                               {
                                   byte[] ReadText = new byte[FileStream.Length];
                                   FileStream.Seek(0, SeekOrigin.Begin);
                                   FileStream.Read(ReadText, 0, (int)FileStream.Length);
                               }
                               return true;
                           }
                           catch (IOException)
                           {
                               // wait one second
                               Thread.Sleep(1000);
                               RetryNumber--;
                               if(RetryNumber == 0)
                                   return false;
                           }
                       }
                   }
                
                   public void Example1()
                   {
                       Operation.CreateReportFromAll("Assembly_list", "Assembly_list.xsr", "MyTitle", "", "");
            
                       if(File.Exists("Assembly_list.xsr"))
                       {
                           // wait until Tekla Structures has unlocked the file, or timeout
                           if(IfLockedWait("Assembly_list.xsr"))
                           {
                               // display the report
                               Operation.DisplayReport("Assembly_list.xsr");
                           }
                       }
                   }
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.Structures.Model.Operations.Operation.CreateNCFilesFromSelected(System.String,System.String)">
            <summary>
            Creates NC files from the selected parts using the given NC template name.
            <para>See Tekla Structures Help for more information about NC files.</para>
            </summary>
            <remarks>PopMarks cannot currently be created through the API.</remarks>
            <param name="NCFileSettings">The name of the NC setting template to be used in creation.</param>
            <param name="DestinationFolder">The name of the folder where NC files are created. If defined, overrides the default folder in the setting template.</param>
            <exception cref="T:System.ArgumentException">Thrown when the <paramref name="NCFileSettings"/> is not defined.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="NCFileSettings"/> is <c>null</c>.</exception>
            <returns>True if the NC files are created, false if the numbering is not up-to-date or the used configuration is wrong.</returns>
            <example>
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures.Model.Operations;
            using Tekla.Structures.Model.UI;
            
            using System.Collections;
            using System.Windows.Forms;
            
            public class Example
            {
                   public void Example1()
                   {
                       Picker Picker = new Picker();
            
                       try
                       {
                           Beam Beam1 = Picker.PickObject(Picker.PickObjectEnum.PICK_ONE_PART, "Pick object to Create NC for") as Beam;
                           ArrayList Parts = new ArrayList();
            
                           Parts.Add(Beam1);
                           Tekla.Structures.Model.UI.ModelObjectSelector MOS = new Tekla.Structures.Model.UI.ModelObjectSelector();
            
                           MOS.Select(Parts);
                           if (Operation.CreateNCFilesFromSelected("DSTV for profiles", ""))
                               MessageBox.Show("NC creation succesfull");
                           MOS.Select(new ArrayList()); //remove UI selection
                       }
                       catch { }
                   }
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.Structures.Model.Operations.Operation.CreateNCFilesFromAll(System.String,System.String)">
            <summary>
            Creates NC files from all parts using the given NC template name.
            <para>See Tekla Structures Help for more information about NC files.</para>
            </summary>
            <remarks>PopMarks cannot currently be created through the API.</remarks>
            <param name="NCFileSettings">The name of the NC setting template to be used in creation.</param>
            <param name="DestinationFolder">The name of the folder where NC files are created. If defined, overrides the default folder in the setting template.</param>
            <exception cref="T:System.ArgumentException">Thrown when the <paramref name="NCFileSettings"/> is not defined.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="NCFileSettings"/> is <c>null</c>.</exception>
            <returns>True if the NC files are created, false if the numbering is not up-to-date or the used configuration is wrong.</returns>
            <example>
            <code>
            using Tekla.Structures.Model.Operations;
            using System.Windows.Forms;
            
            public class Example
            {
                   public void Example1()
                   {
                       if (Operation.CreateNCFilesFromAll("DSTV for plates", ""))
                           MessageBox.Show("NC creation succesfull");
                   }
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.Structures.Model.Operations.Operation.CreateMISFileFromSelected(Tekla.Structures.Model.Operations.Operation.MISExportTypeEnum,System.String)">
            <summary>
            Creates MIS files from the selected parts using the given file name.
            <para>See Tekla Structures Help for more information about MIS files.</para>
            </summary>
            <param name="MISType">The type of the MIS export.</param>
            <param name="FileName">The name of the MIS file to be used in creation.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="FileName"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the <paramref name="FileName"/> is not defined.</exception>
            <returns>True if the MIS files are created, false if the numbering is not up-to-date or the used configuration is wrong.</returns>
            <example>
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures.Model.Operations;
            using Tekla.Structures.Model.UI;
            
            using System.Collections;
            using System.Windows.Forms;
            
            public class Example
            {
                   public void Example1()
                   {
                       Picker Picker = new Picker();
            
                       try
                       {
                           Beam Beam1 = Picker.PickObject(Picker.PickObjectEnum.PICK_ONE_PART, "Pick object to Create MIS for") as Beam;
                           ArrayList Parts = new ArrayList();
            
                           Parts.Add(Beam1);
                           Tekla.Structures.Model.UI.ModelObjectSelector MOS = new Tekla.Structures.Model.UI.ModelObjectSelector();
            
                           MOS.Select(Parts);
            
                           if (Operation.CreateMISFileFromSelected(Operation.MISExportTypeEnum.STEEL2000, "myExport.st2000"))
                               MessageBox.Show("MIS creation succesfull");
            
                           MOS.Select(new ArrayList()); //remove UI selection
                       }
                       catch { }
                   }
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.Structures.Model.Operations.Operation.CreateMISFileFromAll(Tekla.Structures.Model.Operations.Operation.MISExportTypeEnum,System.String)">
            <summary>
            Creates MIS files from all parts using the given file name.
            <para>See Tekla Structures Help for more information about MIS files.</para>
            </summary>
            <param name="MISType">The type of the MIS export.</param>
            <param name="FileName">The name of the MIS file to be used in creation.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="FileName"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the <paramref name="FileName"/> is not defined.</exception>
            <returns>True if the MIS files are created, false if the numbering is not up-to-date or the used configuration is wrong.</returns>
            <example>
            <code>
            using Tekla.Structures.Model.Operations;
            using System.Windows.Forms;
            
            public class Example
            {
                   public void Example1()
                   {
                       if (Operation.CreateMISFileFromAll(Operation.MISExportTypeEnum.STEEL2000, "myExport.st2000"))
                           MessageBox.Show("MIS creation succesfull");
                   }
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.Structures.Model.Operations.Operation.RunMacro(System.String)">
            <summary>
            Starts a macro with the given name. Throws an exception if the file is not found.
            <para>Macros are saved as *.cs files in the folder defined with the 
            XS_MACRO_DIRECTORY variable.</para>
            <para>It is possible to run drawing macros using relative paths.</para>
            <para>See Tekla Structures Help for more information about macros.</para>
            </summary>
            <param name="FileName">The name of the macro to start.</param>
            <returns>True if the macro existed.</returns>
            <example>
            <code>
            using Tekla.Structures.Model.Operations;
            
            public class Example
            {
                   public void Example1()
                   {
                       Operation.RunMacro("MyModelingMacro.cs");
                       Operation.RunMacro(@"..\drawings\MyDrawingMacro.cs");
                   }
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.Structures.Model.Operations.Operation.IsMacroRunning">
            <summary>
            Returns true if a macro is running, false otherwise.
            <para>Macros are saved as *.cs files in the folder defined with the 
            XS_MACRO_DIRECTORY variable.</para>
            <para>See Tekla Structures Help for more information about macros.</para>
            </summary>
            <returns>True if a macro is running.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Operations.Operation.Open(System.String)">
            <summary>Opens a new model to Tekla Structures ignoring auto saved information.</summary>
            <param name="ModelFolder">The model folder to be used.</param>
            <returns>True on success.</returns>
            <example>
            The following example opens the model that is in the C:\teklastructuresmodels\NewModel17 folder
            and shows a message if the opening was successful.
            <code>
            using Tekla.Structures.Model.Operations;
            using System.Windows.Forms;
            
            public class Example
            {
                   public void Example1()
                   {
                       if (Operation.Open("C:\\teklastructuresmodels\\NewModel17"))
                           MessageBox.Show("The model opened successfully.");
                   }
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.Structures.Model.Operations.Operation.Open(System.String,System.Boolean)">
            <summary>Opens a new model to Tekla Structures.</summary>
            <param name="ModelFolder">The model folder to be used.</param>
            <param name="OpenAutoSaved">Tells whether to open auto saved information or not.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Operations.Operation.IsModelAutoSaved(System.String)">
            <summary>Tells whether a model has auto saved information.</summary>
            <param name="ModelFolder">The model folder to be used.</param>
            <returns>True if there is auto saved information.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Operations.Operation.SaveAsWebModel(System.String)">
            <summary>
            Saves the current model as a web model.
            <para>You can save the model as a web model that can be viewed 
            via the Internet using a web browser (e.g. Internet Explorer).</para>
            </summary>
            <param name="Filename">The filename to be used.</param>
            <returns>True on success, false on failure.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Operations.Operation.SaveSelectedAsWebModel(System.String)">
            <summary>
            Saves the selected objects as a web model.
            <para>You can save the selected objects as a web model that can be viewed 
            via the Internet using a web browser (e.g. Internet Explorer).</para>
            </summary>
            <param name="Filename">The filename to be used.</param>
            <returns>True on success, false on failure.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Operations.Operation.MoveObject(Tekla.Structures.Model.ModelObject,Tekla.Structures.Geometry3d.Vector)">
            <summary>
            Moves the model object using the given translation vector.
            </summary>
            <remarks>
            <para>
            Note that the object is moved and updated in the view so ModelObject.Modify() is not needed.
            Call Modify() only after the object's data has been updated with the ModelObject.Select() method.
            </para>
            </remarks>
            <param name="Object">The model object to move.</param>
            <param name="TranslationVector">The vector for moving the object.</param>
            <returns>True on success, false on failure.</returns>
            <example>
            In the following example a connection to the Tekla Structures model has already been established.
            The example code creates a beam to the model and moves the beam one meter in the x and y directions.
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures.Model.Operations;
            using Tekla.Structures.Geometry3d;
            using System.Windows.Forms;
            
            public class Example
            {
                   public void Example1()
                   {
                       Beam Beam1 = new Beam(new Point(0, 0, 0), new Point(3000, 0, 0));
                       Beam1.Profile.ProfileString = "PL10*140";
                       if(Beam1.Insert())
                       {
                           Vector Vector1 = new Vector(1000, 1000, 0);
            
                           if(Operation.MoveObject(Beam1, Vector1))
                               MessageBox.Show("Move succeeded");
                       }
                   }
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.Structures.Model.Operations.Operation.MoveObject(Tekla.Structures.Model.ModelObject,Tekla.Structures.Geometry3d.CoordinateSystem,Tekla.Structures.Geometry3d.CoordinateSystem)">
            <summary>
            Moves the model object between the given translation coordinate systems.
            </summary>
            <remarks>
            <para>
            Note that the object is moved and updated in the view so ModelObject.Modify() is not needed.
            Call Modify() only after the object's data has been updated with the ModelObject.Select() method.
            </para>
            </remarks>
            <param name="Object">The model object to move.</param>
            <param name="StartCoordinateSystem">The coordinate system to move the object from.</param>
            <param name="EndCoordinateSystem">The coordinate system to move the object to.</param>
            <returns>True on success, false on failure.</returns>
            <example>
            In the following example a connection to the Tekla Structures model has already been established.
            The example code creates a beam (Beam3) to the model and moves the beam between the coordinate systems of Beam1 and Beam2.
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures.Model.Operations;
            using Tekla.Structures.Geometry3d;
            using System.Windows.Forms;
            
            public class Example
            {
                   public void Example1()
                   {
                       Beam Beam1 = new Beam(new Point(0, 0, 0), new Point(3000, 0, 0));
                       Beam1.Profile.ProfileString = "PL10*140";
                       Beam1.Insert();
            
                       Beam Beam2 = new Beam(new Point(3000, 0, 0), new Point(6000, 0, 0));
                       Beam2.Profile.ProfileString = "PL10*140";
                       Beam2.Insert();
            
                       Beam Beam3 = new Beam(new Point(100, 0, 0), new Point(100, 0, 400));
                       Beam3.Profile.ProfileString = "PL10*140";
                       Beam3.Insert();
            
                       if(Operation.MoveObject(Beam3, Beam1.GetCoordinateSystem(), Beam2.GetCoordinateSystem()))
                           MessageBox.Show("Move succeeded");
                   }
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.Structures.Model.Operations.Operation.CopyObject(Tekla.Structures.Model.ModelObject,Tekla.Structures.Geometry3d.Vector)">
            <summary>
            Copies the model object using the given translation vector.
            </summary>
            <param name="Object">The model object to copy.</param>
            <param name="CopyVector">The translation vector for copying.</param>
            <returns>The copied model object on success, null on failure.</returns>
            <example>
            In the following example a connection to the Tekla Structures model has already been established.
            The example code creates a beam to the model and copies the beam to a location that is one meter in the x and y directions.
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures.Model.Operations;
            using Tekla.Structures.Geometry3d;
            using System.Windows.Forms;
            
            public class Example
            {
                   public void Example1()
                   {
                       Beam Beam1 = new Beam(new Point(0, 0, 0), new Point(3000, 0, 0));
                       Vector Vector1 = new Vector(1000, 1000, 0);
                       Beam1.Profile.ProfileString = "PL10*140";
                       if(Beam1.Insert())
                       {
                           Beam Beam2 = Operation.CopyObject(Beam1, Vector1) as Beam;
                           if(Beam2 != null)
                               MessageBox.Show("Copy succeeded");
                       }
                   }
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.Structures.Model.Operations.Operation.CopyObject(Tekla.Structures.Model.ModelObject,Tekla.Structures.Geometry3d.CoordinateSystem,Tekla.Structures.Geometry3d.CoordinateSystem)">
            <summary>
            Copies the model object between the given translation coordinate systems.
            </summary>
            <param name="Object">The model object to copy.</param>
            <param name="StartCoordinateSystem">The coordinate system to copy the object from.</param>
            <param name="EndCoordinateSystem">The coordinate system to copy the object to.</param>
            <returns>The copied model object on success, null on failure.</returns>
            <example>
            In the following example a connection to the Tekla Structures model has already been established.
            The example code creates a beam (Beam3) to the model and copies the beam between the coordinate systems of Beam1 and Beam2.
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures.Model.Operations;
            using Tekla.Structures.Geometry3d;
            using System.Windows.Forms;
            
            public class Example
            {
                   public void Example1()
                   {
                       Beam Beam1 = new Beam(new Point(0, 0, 0), new Point(3000, 0, 0));
                       Beam1.Profile.ProfileString = "PL10*140";
                       Beam1.Insert();
                    
                       Beam Beam2 = new Beam(new Point(3000, 0, 0), new Point(6000, 0, 0));
                       Beam2.Profile.ProfileString = "PL10*140";
                       Beam2.Insert();
            
                       Beam Beam3 = new Beam(new Point(100, 0, 0), new Point(100, 0, 400));
                       Beam3.Profile.ProfileString = "PL10*140";
                       Beam3.Insert();
            
                       Beam Beam4 = Operation.CopyObject(Beam3, Beam1.GetCoordinateSystem(), Beam2.GetCoordinateSystem()) as Beam;
                       if(Beam4 != null)
                           MessageBox.Show("Copy succeeded");
                   }
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.Structures.Model.Operations.Operation.Combine(Tekla.Structures.Model.Beam,Tekla.Structures.Model.Beam)">
            <summary> Combines two beams into one beam. </summary>
            <param name="ObjectToCombineTo">The beam to be combined to.</param>
            <param name="ObjectToBeCombined">The beam which will be deleted after a successful operation.</param>
            <returns>The combined beam on success, null on failure.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Operations.Operation.Combine(Tekla.Structures.Model.SingleRebar,Tekla.Structures.Model.SingleRebar)">
            <summary> Combines two single rebars into one rebar. </summary>
            <param name="ObjectToCombineTo">The rebar to be combined to.</param>
            <param name="ObjectToBeCombined">The rebar which will be deleted after a successful operation.</param>
            <returns>The combined single rebar on success, null on failure.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Operations.Operation.Combine(Tekla.Structures.Model.RebarGroup,Tekla.Structures.Model.RebarGroup)">
            <summary> Combines two rebar groups into one rebar group. </summary>
            <param name="ObjectToCombineTo">The rebar group to be combined to.</param>
            <param name="ObjectToBeCombined">The rebar group which will be deleted after a successful operation.</param>
            <returns>The combined rebar group on success, null on failure.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Operations.Operation.Split(Tekla.Structures.Model.Beam,Tekla.Structures.Geometry3d.Point)">
            <summary>
            Splits the beam and creates a new one in the given position.
            </summary>
            <param name="Object">The beam object to be splitted.</param>
            <param name="SplitPoint">The position where splitting is executed.</param>
            <returns>The created beam on success, null on failure.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Operations.Operation.Split(Tekla.Structures.Model.SingleRebar,Tekla.Structures.Geometry3d.Line)">
            <summary>
            Splits the single rebar and creates a new one in the given position.
            </summary>
            <param name="Object">The single rebar object to be splitted.</param>
            <param name="SplitLine">The line where splitting is executed.</param>
            <returns>The created single rebar on success, null on failure.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Operations.Operation.Split(Tekla.Structures.Model.CurvedRebarGroup,Tekla.Structures.Geometry3d.Line)">
            <summary>
            Splits the curved rebar group and creates a new one in the given position.
            </summary>
            <param name="Object">The curved rebar group object to be splitted.</param>
            <param name="SplitLine">The line where splitting is executed.</param>
            <returns>The created curved rebar group on success, null on failure.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Operations.Operation.Split(Tekla.Structures.Model.CircleRebarGroup,Tekla.Structures.Geometry3d.Line)">
            <summary>
            Splits the circle rebar group and creates a new one in the given position.
            </summary>
            <param name="Object">The circle rebar group object to be splitted.</param>
            <param name="SplitLine">The line where splitting is executed.</param>
            <returns>The created circle rebar group on success, null on failure.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Operations.Operation.Split(Tekla.Structures.Model.RebarGroup,Tekla.Structures.Geometry3d.Line)">
            <summary>
            Splits the rebar group and creates a new one in the given position.
            </summary>
            <param name="Object">The rebar group object to be splitted.</param>
            <param name="SplitLine">The line where splitting is executed.</param>
            <returns>The created rebar group on success, null on failure.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Operations.Operation.Split(Tekla.Structures.Model.ContourPlate,Tekla.Structures.Model.Polygon)">
            <summary>
            Splits the contour plate and creates a new one along the given polygon.
            </summary>
            <param name="Object">The contour plate object to be splitted.</param>
            <param name="SplitPolygon">The position where splitting is executed.</param>
            <returns>The created contour plate on success, null on failure.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Operations.Operation.Ungrouping(Tekla.Structures.Model.RebarGroup)">
            <summary> Ungroups the rebar group and creates new single rebars. </summary>
            <param name="Reinforcement">The rebar group to be ungrouped.</param>
            <returns>An enumerator of single rebars.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Operations.Operation.Ungrouping(Tekla.Structures.Model.RebarMesh)">
            <summary> Ungroups the rebar mesh and creates new single rebars. </summary>
            <param name="Reinforcement">The rebar mesh to be ungrouped.</param>
            <returns>An enumerator of single rebars.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Operations.Operation.Group(System.Collections.IEnumerable)">
            <summary> Groups a list of single rebars or rebar groups and creates a new rebar group. </summary>
            <param name="RebarList">The list of single rebars and rebar groups to be grouped.</param>
            <returns>The created rebar group on success, null on failure.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Operations.Operation.DisplayPrompt(System.String)">
            <summary>
            Displays a message in the status bar.
            </summary>
            <remarks>
            Prompts
            <para>
            Tekla Structures prefixes the given prompt with "prompt_" and
            looks for a translation in the <c>prompts.ail</c> file. If the translation
            (e.g. "prompt_Pick_first_position") is not found in the <c>prompts.ail</c>
            file, the prompt string is displayed as such. This feature can be used to
            give already translated strings to the picker.
            </para>
            </remarks>
            <param name="Message">The message to display.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="Message"/> is null.</exception>
            <returns>True if the message could be displayed.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Operations.Operation.ObjectMatchesToFilter(Tekla.Structures.Model.ModelObject,System.String)">
            <summary>
            Checks whether the object matches to the criteria in the given filter.
            </summary>
            <param name="ModelObject">The model object to check.</param>
            <param name="FilterName">The filter file to check against.</param>
            <exception cref="T:System.ArgumentException">Thrown when the <paramref name="ModelObject"/> is not valid.</exception>
            <returns>True if the object matches to the given filter criteria.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Operations.Operation.ObjectMatchesToFilter(Tekla.Structures.Model.ModelObject,Tekla.Structures.Filtering.FilterExpression)">
            <summary>
            Checks whether the object matches to the criteria in the given filter.
            </summary>
            <param name="ModelObject">The model object to check.</param>
            <param name="FilterExpression">The definition of a selection filter to check against.</param>
            <exception cref="T:System.ArgumentException">Thrown when the <paramref name="ModelObject"/> is not valid.</exception>
            <returns>True if the object matches to the given filter criteria.</returns>
            <example>
            In the following example a connection to the Tekla Structures model has already been established.
            The example code creates a beam to the model and moves the beam one meter in the x and y directions.
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures.Model.Operations;
            using Tekla.Structures.Filtering;
            using Tekla.Structures.Filtering.Categories;
            using Tekla.Structures.Geometry3d;
            using System.Windows.Forms;
            
            public class Example
            {
                   public void Example1()
                   {
                       Beam Beam1 = new Beam(new Point(0, 0, 0), new Point(3000, 0, 0));
                       Beam1.Profile.ProfileString = "PL10*140";
                       Beam1.Name = "GetObjectsByFilter";
                       if(Beam1.Insert())
                       {
                           BinaryFilterExpression FilterExpression1 = new BinaryFilterExpression(new PartFilterExpressions.Name(), 
                                                                          StringOperatorType.IS_EQUAL, 
                                                                          new StringConstantFilterExpression("GetObjectsByFilter"));
                           if(Operation.ObjectMatchesToFilter(Beam1, FilterExpression1))
                               MessageBox.Show("Object matches the filter");
                       }
                   }
            }
            </code>
            </example>
        </member>
        <member name="T:Tekla.Structures.Model.Operations.Operation.ObjectManipulationTypeEnum">
            <summary> The object manipulation types.  </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Operations.Operation.MISExportTypeEnum">
            <summary>  The MIS export types.  </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Operations.Operation.MISExportTypeEnum.DSTV">
            <summary>
            The DSTV type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Operations.Operation.MISExportTypeEnum.KISS">
            <summary>
            The KISS type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Operations.Operation.MISExportTypeEnum.EJE">
            <summary>
            The EJE type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Operations.Operation.MISExportTypeEnum.EPC">
            <summary>
            The EPC type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Operations.Operation.MISExportTypeEnum.STEEL2000">
            <summary>
            The STEEL2000 type.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Operations.Operation.ProgressBar">
            <summary>
            The ProgressBar class implements progress bar with cancel button.
            </summary>
            <example>
            The following example displays progress bar, updates progress, checks if cancel has been pressed
            and closes the progress bar.
            <code>
            var progress = new Tekla.Structures.Model.Operations.Operation.ProgressBar();
            bool displayResult = progress.Display(100, "title", "message", "cancel..", " ");
            // looping ii from 0 to totalCount-1
            {
                if (ii % 20 == 0) // progress update every 20th item
                {
                    if (progress.Canceled())
                    {
                        break;
                    }
                    progress.SetProgress(ii.ToString(), 100*ii/totalCount);
                }                
            }
            progress.Close();
            </code>
            </example>
        </member>
        <member name="M:Tekla.Structures.Model.Operations.Operation.ProgressBar.Display(System.Int32,System.String,System.String,System.String,System.String)">
            <summary>
            Display progress bar dialog with cancel button.
            Display will fail if progress bar is already displayed.
            </summary>
            <param name="SleepTime">Time (ms) to wait until bar is displayed.</param>
            <param name="Title">Title of the dialog.</param>
            <param name="Message">Message to be displayed on the dialog above progress bar.</param>
            <param name="CancelButtonLabel">Label of cancel button.</param>
            <param name="ProgressLabel">Initial progress label (updated with SetProgress). If empty of null no bar exists.</param>
            <returns>True if bar was displayed successfully (meaning bar must be closed later).</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Operations.Operation.ProgressBar.Close">
            <summary>
            Close progress bar. Can be called even if Display was not successful.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.Operations.Operation.ProgressBar.SetProgress(System.String,System.Int32)">
            <summary>
            Update status information on the progress bar.
            </summary>
            <param name="ProgressLabel">Bar label text.</param>
            <param name="Progress">Progess, number between 0..100</param>
        </member>
        <member name="M:Tekla.Structures.Model.Operations.Operation.ProgressBar.Canceled">
            <summary>
            Check if cancel has been pressed.
            </summary>
            <returns>True if cancel has been pressed.</returns>
        </member>
        <member name="T:Tekla.Structures.Model.Operations.GuidConversion">
            <summary>
            Conversion of old TS GUIDs to current GUIDs.
            GUIDs are changed in TS save as operation, this class can be used to convert old GUIDs to current GUIDs.
            To recognize the need for GUID conversion, application needs to save project GUID and compare to the current project GUID.
            Note: With big models the instance uses a lot of memory.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Operations.GuidConversion.GuidMapFile">
            <summary>The GUID map file</summary>
        </member>
        <member name="F:Tekla.Structures.Model.Operations.GuidConversion.oldGuidNewGuid">
            <summary>The old GUID new GUID mapping</summary>
        </member>
        <member name="F:Tekla.Structures.Model.Operations.GuidConversion.newGuidOldGuid">
            <summary>The new GUID old GUID mapping. Only available when loading the file.</summary>
        </member>
        <member name="M:Tekla.Structures.Model.Operations.GuidConversion.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Tekla.Structures.Model.Operations.GuidConversion"/> class.</summary>
        </member>
        <member name="M:Tekla.Structures.Model.Operations.GuidConversion.GetGuidMapping">
            <summary>Gets the GUID mapping.</summary>
            <returns>The GUID mapping</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Operations.GuidConversion.GetNewGuid(System.Guid)">
            <summary>Gets the new GUID.</summary>
            <param name="oldGuid">The old GUID.</param>
            <returns>The current GUID</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Operations.GuidConversion.LoadGuidMapping(System.String)">
            <summary>Loads the GUID mapping.</summary>
            <param name="modelFolder">The model folder.</param>
        </member>
        <member name="M:Tekla.Structures.Model.Operations.GuidConversion.AddToGuidMap(System.Guid,System.Guid)">
            <summary>Adds to GUID map.</summary>
            <param name="oldGuid">The old GUID.</param>
            <param name="newGuid">The new GUID.</param>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotManipulateObject_t">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotManipulateObject_t.Identifier">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotManipulateObject_t.Identifier2">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotManipulateObject_t.Result">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotManipulateObject_t.ManipulationType">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotManipulateObject_t.Point1">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotManipulateObject_t.Point2">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotManipulateObject_t.Point3">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotManipulateObject_t.EndPoint1">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotManipulateObject_t.EndPoint2">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotManipulateObject_t.EndPoint3">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotManipulateObject_t.Polygon">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotManipulateObject_t.ClientID">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.NumberingQueryModeEnum">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.NumberingQueryModeEnum.SINGLE_ID">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.NumberingQueryModeEnum.ALL_PARTS_REBARS_ASSEMBLIES">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotNumberingQuery_t">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotNumberingQuery_t.QueryMode">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotNumberingQuery_t.Id">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotCreateNCFromModel_t">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotCreateNCFromModel_t.OnlySelected">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotCreateNCFromModel_t.aNCFileSettingsName">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotCreateNCFromModel_t.CreatePopMarks">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotCreateNCFromModel_t.aPopMarkSettingsName">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotCreateNCFromModel_t.ExportType">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotCreateNCFromModel_t.aFileName">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotCreateNCFromModel_t.aDestinationFolderName">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotCreateNCFromModel_t.Result">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotRefreshReferenceModel_t">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRefreshReferenceModel_t.ReferenceModelId">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRefreshReferenceModel_t.FileListState">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRefreshReferenceModel_t.nFiles">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRefreshReferenceModel_t.aFullFileDataSetGuid">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRefreshReferenceModel_t.aFullFileName">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRefreshReferenceModel_t.aFileName0">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRefreshReferenceModel_t.aFileName1">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRefreshReferenceModel_t.aFileName2">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRefreshReferenceModel_t.aFileName3">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRefreshReferenceModel_t.aFileName4">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRefreshReferenceModel_t.aFileName5">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRefreshReferenceModel_t.aFileName6">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRefreshReferenceModel_t.aFileName7">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRefreshReferenceModel_t.aFileName8">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRefreshReferenceModel_t.aFileName9">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRefreshReferenceModel_t.Result">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.Operation">
            <summary>
            Internal operations
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.SetTestSavePoint">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.RollbackToTestSavePoint">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotStartCommand(System.String,System.String)">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotStartAction(System.String,System.String)">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotSaveModel">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotSaveAsModel(System.String)">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotAutoSaveModel">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotQuitProgram">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotGetDataBaseVersionInfoFromModel(System.String,System.String,System.Int32@,System.Int32@)">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotCreateEmptyModel(System.String,System.String,System.Boolean)">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotSharingLogPrint(Tekla.Structures.ModelInternal.Operation.DotSharingLogTypeEnum,System.String)">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotSharingRegisterPlugin(System.String,System.Boolean)">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotSharingCreateStartSharingBackup(System.String)">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotSharingRestoreStartSharingBackup(System.String)">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotSharingMakeModelShareable">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotSharingSaveVersionGuid(System.Guid)">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotSharingGetVersionGuid(System.Guid@)">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotSharingWriteOut(System.String,System.Boolean)">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotSharingWriteOutCommit(System.Boolean,System.String)">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotSharingReadInStarting(System.Boolean)">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotSharingReadIn(System.String,System.Boolean)">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotSharingReadInCommit(System.Boolean,System.Boolean)">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotSharingShowReadInChanges">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotSharingCommandResult(System.Int32,System.Boolean)">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotSharingCreateEmptyModel(System.String,System.String)">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotSharingSetMenu(System.Boolean)">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotRefreshReferenceModel(Tekla.Structures.Model.ReferenceModel,System.Guid,System.String,System.Collections.ArrayList)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="Model">Reference Model to refresh, mandatory</param>
            <param name="FullFileDataSet">DataSet GUID for full file</param>
            <param name="FullFile">FullFile name</param>
            <param name="DiffFiles">Sorted DiffFile names if any</param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotWriteToSessionLog(System.String)">
            <summary> Writes a message in the TeklaStructures Session Log file.</summary>
            <param name="Message">Message to be written in Session Log.</param>
            <returns>True if operation is correct, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">Message cannot be null.</exception>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotExportShadowRegion(System.Collections.ArrayList)">
            <summary> Gets a Shadow (Projection) Area for list of parts.</summary>
            <param name="PartIdentifiers">List of part's ids.</param>
            <returns>List of Shadow (Projection) areas for list of parts.</returns>
            <exception cref="T:System.ArgumentException">Too many parts in the list.</exception>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotExportShadowRegionComplement(System.Collections.ArrayList)">
            <summary> Gets a Shadow Complement to the Extrma Area for list of parts.</summary>
            <param name="PartIdentifiers">List of part's Identifiers.</param>
            <returns>List of Shadow Complement to the Extrma Area areas for list of parts.</returns>
            <exception cref="T:System.ArgumentException">Too many parts in the list.</exception>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotDisplayComponentHelp(Tekla.Structures.Model.ModelObject.ModelObjectEnum,System.Int32,System.String)">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotDisplayAutoDefaultSettings(Tekla.Structures.Model.ModelObject.ModelObjectEnum,System.Int32,System.String)">
            <exclude />
        </member>
        <member name="T:Tekla.Structures.ModelInternal.Operation.FileListEnum">
            <summary>
            The refresh types.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Operation.FileListEnum.NEW_FILELIST">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Operation.FileListEnum.ADD_TO_FILELIST">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Operation.FileListEnum.FILELIST_END">
            <exclude />
        </member>
        <member name="T:Tekla.Structures.ModelInternal.Operation.SaveOperationEnum">
            <summary>Save operations.</summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Operation.SaveOperationEnum.SAVE">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Operation.SaveOperationEnum.SAVEAS_WITH_PATH">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Operation.SaveOperationEnum.AUTOSAVE">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Operation.SaveOperationEnum.QUIT_PROGRAM_WITHOUT_SAVE">
            <exclude />
        </member>
        <member name="T:Tekla.Structures.ModelInternal.Operation.SharingOperationEnum">
            <summary>Sharing operations.</summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Operation.SharingOperationEnum.MAKE_MODEL_SHAREABLE">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Operation.SharingOperationEnum.WRITEOUT_PACKET">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Operation.SharingOperationEnum.WRITEOUT_COMMIT">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Operation.SharingOperationEnum.READIN_STARTING">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Operation.SharingOperationEnum.READIN_PACKET">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Operation.SharingOperationEnum.READIN_COMMIT">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Operation.SharingOperationEnum.READIN_CHANGES">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Operation.SharingOperationEnum.UI_SET_MENU">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Operation.SharingOperationEnum.SAVE_VERSION_GUID">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Operation.SharingOperationEnum.GET_VERSION_GUID">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Operation.SharingOperationEnum.LOG_BASIC">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Operation.SharingOperationEnum.LOG_INFORMATION">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Operation.SharingOperationEnum.LOG_WARNING">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Operation.SharingOperationEnum.LOG_ERROR">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Operation.SharingOperationEnum.COMMAND_RESULT">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Operation.SharingOperationEnum.REGISTER_MODELSHARING_PLUGIN">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Operation.SharingOperationEnum.CREATE_STARTSHARING_BACKUP">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Operation.SharingOperationEnum.RESTORE_STARTSHARING_BACKUP">
            <exclude />
        </member>
        <member name="T:Tekla.Structures.ModelInternal.Operation.DotSharingLogTypeEnum">
            <summary>Sharing operations.</summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Operation.DotSharingLogTypeEnum.BASIC">
            <summary>Basic information (always added to log).</summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Operation.DotSharingLogTypeEnum.INFORMATION">
            <summary>Optional information (added to log depending on user settings).</summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Operation.DotSharingLogTypeEnum.WARNING">
            <summary>Warning (added to log depending on user settings).</summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Operation.DotSharingLogTypeEnum.ERROR">
            <summary>Error (always added to log).</summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotAreaPolygons_t">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotAreaPolygons_t.aIdList">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotAreaPolygons_t.nIdList">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotAreaPolygons_t.nAreas">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotAreaPolygons_t.ClientID">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.dotAreaPolygons_t.ToStruct(System.Collections.ArrayList)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotProgressBar_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotProgressBar_t.Operation">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotProgressBar_t.SleepTime">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotProgressBar_t.aMessage">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotProgressBar_t.aTitle">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotProgressBar_t.aCancelButtonLabel">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotProgressBar_t.aProgressLabel">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotProgressBar_t.Progress">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotProgressBar_t.Canceled">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotSaveOperation_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSaveOperation_t.Operation">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSaveOperation_t.aSaveAsPath">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotSharingOperation_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSharingOperation_t.Operation">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSharingOperation_t.aGuid">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSharingOperation_t.aPacketPath">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSharingOperation_t.aMessage">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSharingOperation_t.Status">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSharingOperation_t.Joining">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSharingOperation_t.CommandId">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.Model.Beam">
            <summary>
            The Beam class represents a single beam in the model.
            A beam has a single start and end point. 
            </summary>
            <example>
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures.Geometry3d;
            
            public class Example
            {
                   public void Example1()
                   {
                       Point point = new Point(0, 0, 0);
                       Point point2 = new Point(1000, 0, 0);
                       Beam beam = new Beam();
                       beam.StartPoint = point;
                       beam.EndPoint = point2;
                       beam.Profile.ProfileString = "HEA400";
                       beam.Finish = "PAINT";
                       beam.StartPointOffset = new Offset();
                       beam.EndPointOffset = new Offset();
                       bool result = false;
                       result = beam.Insert();
                   }
            }
            </code>
            </example>
        </member>
        <member name="T:Tekla.Structures.Model.Part">
            <summary>
            The Part class represents a part in the model.
            A part can be either a beam, a polybeam or a contour plate.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.Part.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Model.Part"/> class with default attributes.
            <para>The default values are set as follows:
            <list type="bullet">
            <item>Position = new Position();</item>
            <item>Profile = new Profile();</item>
            <item>Material = new Material();</item>
            <item>DeformingData = new DeformingData();</item>
            <item>Name = "";</item>
            <item>Class = "";</item>
            <item>Finish = "";</item>
            <item>PartNumber = new NumberingSeries("P", 1);</item>
            <item>AssemblyNumber = new NumberingSeries("A", 1);</item>
            <item>CastUnitType = CastUnitTypeEnum.PRECAST;</item>
            </list>
            </para>
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.Part.GetSolid">
            <summary>
            Returns the solid of the part.
            </summary>
            <returns>The solid of the part.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Part.GetSolid(Tekla.Structures.Model.Solid.SolidCreationTypeEnum)">
            <summary>
            Returns the solid of the part.
            </summary>
            <param name="solidCreationType">The type to be used in solid creation.</param>
            <returns>The solid of the part.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Part.GetSolid(Tekla.Structures.Forming.FormingStates)">
            <summary>
            Returns the solid of the part.
            </summary>
            <param name="formingStates">Solid forming information.</param>
            <returns>The solid of the part.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Part.GetAssembly">
            <summary>
            Returns the assembly that the part belongs to.
            </summary>
            <returns>The assembly that the part belongs to.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Part.GetPartMark">
            <summary>
            Returns the part mark. 
            </summary>
            <returns>A string with the part mark.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Part.GetCenterLine(System.Boolean)">
            <summary> Returns the center line for the given part. </summary>
            <param name="withCutsFittings">Defines if the center line is created from a solid with cuts and fittings or not.</param>
            <returns>A list of points that define the center line for the given part.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Part.GetReferenceLine(System.Boolean)">
            <summary> Returns the reference line for the given part. </summary>
            <param name="withCutsFittings">Defines if the reference line is created from a solid with cuts and fittings or not.</param>
            <returns>A list of points that define the reference line for the given part.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Part.GetComponents">
            <summary>
            Returns an enumerator of all the connected components, connections,
            seams and details inherited from the base component.
            </summary>
            <returns>A model object enumerator on success, otherwise null.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Part.GetBooleans">
            <summary>
            Returns an enumerator of all the connected boolean objects.
            </summary>
            <returns>A model object enumerator on success, otherwise null.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Part.GetBolts">
            <summary>
            Returns an enumerator of all the connected bolts.
            </summary>
            <returns>A model object enumerator on success, otherwise null.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Part.GetWelds">
            <summary>
            Returns an enumerator of all the connected welds.
            </summary>
            <returns>A model object enumerator on success, otherwise null.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Part.GetReinforcements">
            <summary>
            Returns an enumerator of all the connected reinforcements.
            </summary>
            <returns>A model object enumerator on success, otherwise null.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Part.GetSurfaceTreatments">
            <summary>
            Returns an enumerator of all the connected surface treatments.
            </summary>
            <returns>A model object enumerator on success, otherwise null.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Part.GetPours">
            <summary>
            Returns an enumerator of all the pours that the part belongs to.
            </summary>
            <returns>A model object enumerator on success, otherwise null.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Part.CompareTo(Tekla.Structures.Model.Part)">
            <summary>
            Compares the instantiated part with another one.
            </summary>
            <param name="partToCompare">The part to compare with.</param>
            <returns>True if there are no differences, false otherwise.</returns>
            <remarks>
            If the numbering hasn't been performed the function will also return false.
            </remarks>
        </member>
        <member name="M:Tekla.Structures.Model.Part.CompareToPart(System.Int32)">
            <summary>
            Compares the parts with id.
            </summary>
            <param name="partToCompareId">Part id to compare with.</param>
            <returns>True if there are no differences, false otherwise.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Part.ToStruct(Tekla.Structures.ModelInternal.dotPart_t@)">
            <summary>
            Method for transforming the Part's data into corresponding struct.
            </summary>
            <param name="p">Reference to the struct which will be populated.</param>
        </member>
        <member name="M:Tekla.Structures.Model.Part.FromStruct(Tekla.Structures.ModelInternal.dotPart_t@)">
            <summary>
            Method for transforming the struct data to corresponding Part data.
            </summary>
            <param name="p">Reference to the struct which will be used to populate the Part's data.</param>
        </member>
        <member name="M:Tekla.Structures.Model.Part.ToStruct(Tekla.Structures.ModelInternal.dotContour_t@)">
            <summary>
            Method for transforming the Part's contour data into corresponding struct.
            </summary>
            <param name="contour">The populated struct.</param>
        </member>
        <member name="P:Tekla.Structures.Model.Part.Profile">
            <summary>
            Gets or sets the profile of the part.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Part.Material">
            <summary>
            Gets or sets the material the part is made of.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Part.DeformingData">
            <summary>
            Gets or sets the deforming data of the part.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Part.PartNumber">
            <summary>
            Gets or sets the part number.
            Defines the numbering in the part sense.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Part.AssemblyNumber">
            <summary>
            Gets or sets the assembly number.
            Defines the numbering in the assembly sense.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Part.Name">
            <summary>
            Gets or sets the name of the part.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Part.Class">
            <summary>
            Gets or sets the class of the part.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Part.Finish">
            <summary>
            Gets or sets the finish of the part.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Part.CastUnitType">
            <summary>
            Gets or sets the cast unit type of the part.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Part.PourPhase">
            <summary>
            Gets or sets the pour phase of the part.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Part.Position">
            <summary>
            Gets or sets the part position.
            Defines the way the part is positioned in the model.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Part.CastUnitTypeEnum">
            <summary>
            The cast unit types.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Part.CastUnitTypeEnum.PRECAST">
            <summary>
            The precast cast unit type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Part.CastUnitTypeEnum.CAST_IN_PLACE">
            <summary>
            The cast in place cast unit type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Beam.Radius">
            <summary>
            Radius for curved beam.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Beam.type">
            <summary>
            Beam type.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.Beam.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Model.Beam"/> class.
            The start and end points are in the origin.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.Beam.#ctor(Tekla.Structures.Model.Beam.BeamTypeEnum)">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Model.Beam"/> class by using the defined type.
            </summary>
            <param name="beamType">The type of the beam.</param>
        </member>
        <member name="M:Tekla.Structures.Model.Beam.#ctor(Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point)">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Model.Beam"/> class with the given start and end points.
            </summary>
            <param name="startPoint">The start point for the beam.</param>
            <param name="endPoint">The end point for the beam.</param>
        </member>
        <member name="M:Tekla.Structures.Model.Beam.Insert">
            <summary>
            Inserts the beam into the model database. All the attributes must be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Beam.Select">
            <summary>
            Selects a beam from the model database. The beam identifier must be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Beam.Modify">
            <summary>
            Modifies the existing beam in the model database to match the current one.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Beam.Delete">
            <summary>
            Deletes the beam instance with the given identifier from the model database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="P:Tekla.Structures.Model.Beam.StartPoint">
            <summary>
            Gets or sets the start point of the beam.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Beam.EndPoint">
            <summary>
            Gets or sets the end point of the beam.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Beam.StartPointOffset">
            <summary>
            Gets or sets the beam's start point offset.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Beam.EndPointOffset">
            <summary>
            Gets or sets the beam's end point offset.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Beam.Type">
            <summary>
            Gets the read-only type of the beam.
            The default type for a new beam instance is beam.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Beam.BeamTypeEnum">
            <summary>
            The beam types.
            The strip and pad footings are valid only if the material type of the beam is concrete.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Beam.BeamTypeEnum.BEAM">
            <summary>
            The beam.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Beam.BeamTypeEnum.PANEL">
            <summary>
            The panel.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Beam.BeamTypeEnum.STRIP_FOOTING">
            <summary>
            The concrete strip footing.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Beam.BeamTypeEnum.PAD_FOOTING">
            <summary>
            The concrete pad footing.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Beam.BeamTypeEnum.COLUMN">
            <summary>
            The column.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Brep">
            <summary>
            The Brep class represents a single brep in the model.
            A brep has a single start and end point. 
            </summary>
            <example>
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures.Geometry3d;
            
            public class Example
            {
                   public void Example1()
                   {
                       Point point = new Point(0, 0, 0);
                       Point point2 = new Point(1000, 0, 0);
                       Brep brep = new Brep();
                       brep.StartPoint = point;
                       brep.EndPoint = point2;
                       brep.Profile = new Profile { ProfileString = "Default" };
                       bool result = brep.Insert();
                   }
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.Structures.Model.Brep.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Model.Brep"/> class.
            The start and end points are in the origin.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.Brep.#ctor(Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point)">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Model.Brep"/> class with the given start and end points.
            </summary>
            <param name="startPoint">The start point for the brep.</param>
            <param name="endPoint">The end point for the brep.</param>
        </member>
        <member name="M:Tekla.Structures.Model.Brep.Insert">
            <summary>
            Inserts the brep into the model database. All the attributes must be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Brep.Select">
            <summary>
            Selects a brep from the model database. The brep identifier must be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Brep.Modify">
            <summary>
            Modifies the existing brep in the model database to match the current one.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Brep.Delete">
            <summary>
            Deletes the brep instance with the given identifier from the model database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="P:Tekla.Structures.Model.Brep.StartPoint">
            <summary>
            Gets or sets the start point of the brep.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Brep.EndPoint">
            <summary>
            Gets or sets the end point of the brep.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Brep.StartPointOffset">
            <summary>
            Gets or sets the beam's start point offset.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Brep.EndPointOffset">
            <summary>
            Gets or sets the beam's end point offset.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.ContourPlate">
            <summary>
            The ContourPlate class represents a part made with a contour, such as, a concrete slab.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures.Geometry3d;
            
            public class Example
            {
                   public void Example1()
                   {
                       ContourPoint point =  new ContourPoint(new Point(   0, 4000, 0), null);
                       ContourPoint point2 = new ContourPoint(new Point(2000, 4000, 0), null);
                       ContourPoint point3 = new ContourPoint(new Point(   0, 6000, 0), null);
            
                       ContourPlate CP = new ContourPlate();
            
                       CP.AddContourPoint(point);
                       CP.AddContourPoint(point2);
                       CP.AddContourPoint(point3);
                       CP.Finish = "FOO";
                       CP.Profile.ProfileString = "PL200";
                       CP.Material.MaterialString = "K30-2";
            
                       bool Result = false;
                       Result = CP.Insert();
                   }
            }
            </code>
            </example>
        </member>
        <member name="F:Tekla.Structures.Model.ContourPlate._type">
            <summary>
            The type of the PolyBeam.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.ContourPlate.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Model.ContourPlate"/> class.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.ContourPlate.AddContourPoint(Tekla.Structures.Model.ContourPoint)">
            <summary>
            Adds a contour point to the contour plate.
            </summary>
            <param name="contourPoint">The contour point that is to be inserted.</param>
            <returns>True on success, false if there is no more space for another contour point.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ContourPlate.Insert">
            <summary>
            Inserts the contour plate into the model database. All the attributes must be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ContourPlate.Select">
            <summary>
            Selects a contour plate from the model database. The identifier of the contour plate must be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ContourPlate.Modify">
            <summary>
            Modifies the existing contour plate in the model database to match the current one. The identifier must
            be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ContourPlate.Delete">
            <summary>
            Deletes the contour plate instance with the given identifier from the model database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="P:Tekla.Structures.Model.ContourPlate.Type">
            <summary>
            Gets the read only type of the contour plate.
            In creation, the type is defined based on the material.
            If the material is concrete, the type will be slab, otherwise plate.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.ContourPlate.Contour">
            <summary>
            Gets or sets the contour for the contour plate.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.ContourPlate.ContourPlateTypeEnum">
            <summary>
            The contour plate types.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ContourPlate.ContourPlateTypeEnum.UNKNOWN">
            <summary>
            The unknown type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ContourPlate.ContourPlateTypeEnum.PLATE">
            <summary>
            The plate-like contour plate.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ContourPlate.ContourPlateTypeEnum.SLAB">
            <summary>
            The slab-like contour plate.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotPart_t">
            <summary>
            Serialization structure for Part.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPart_t.ModelObject">
            <summary>
            Base class.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPart_t.Position">
            <summary>
            The way the part is positioned in the model.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPart_t.Profile">
            <summary>
            The profile of the part.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPart_t.Material">
            <summary>
            The material this part is made of.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPart_t.PartNumber">
            <summary>
            Defines the numbering in part sense.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPart_t.AssemblyNumber">
            <summary>
            Defines the numbering in assembly sense.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPart_t.DeformingData">
            <summary>
            Defines the deforming of the part.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPart_t.aName">
            <summary>
            The name of the part.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPart_t.aClass">
            <summary>
            The class of the part.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPart_t.aFinish">
            <summary>
            The finish of the part.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPart_t.CastUnitType">
            <summary>
            The cast unit type of the part.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPart_t.PourPhase">
            <summary>
            The pour phase of the part.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPart_t.StartPointOffset">
            <summary>
            Defines the part start point offset.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPart_t.EndPointOffset">
            <summary>
            Defines the part end point offset.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPart_t.Radius">
            <summary>
            Radius for curved beam. Used only internally! May be removed later when conversion from curved to polybeam exists. 
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPart_t.SubType">
            <summary>
            Subtype for part. Will be used for opening right object dialog.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotPartMark_t">
            <summary>
            Serialization structure for PartMark.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPartMark_t.PartID">
            <summary>
            ID of the Part whose Part Mark we wish to retrieve.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPartMark_t.aPartMark">
            <summary>
            The Part Mark.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotPartLine_t">
            <summary>
            Serialization structure for PartLine.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPartLine_t.PartID">
            <summary> ID of the Part whose Part Line we wish to retrieve. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPartLine_t.PartLineType">
            <summary> The Part Line type. 0 for center line, 1 for reference line. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPartLine_t.PartLineCutted">
            <summary> Defines if Part Line is returned with cuts and fittigs. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPartLine_t.nPoints">
            <summary> Part Line number of points. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPartLine_t.aPoints">
            <summary> The points in the Part Line. </summary>
        </member>
        <member name="T:Tekla.Structures.Model.PolyBeam">
            <summary>
            The PolyBeam class represents a continuous beam with a contour as input.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures.Geometry3d;
            
            public class Example
            {
                   public void Example1()
                   {
                       ContourPoint point = new ContourPoint(new Point(0,2000,0), null);
                       ContourPoint point2 = new ContourPoint(new Point(2000,2000,0), null);
                       ContourPoint point3 = new ContourPoint(new Point(0,4000,0), null);
            
                       PolyBeam PolyBeam = new PolyBeam();
            
                       PolyBeam.AddContourPoint(point);
                       PolyBeam.AddContourPoint(point2);
                       PolyBeam.AddContourPoint(point3);
            
                       PolyBeam.Profile.ProfileString = "HEA400";
                       PolyBeam.Finish = "PAINT";
                       bool Result = false;
                       Result = PolyBeam.Insert();
                   }
            }
            </code>
            </example>
        </member>
        <member name="F:Tekla.Structures.Model.PolyBeam.type">
            <summary>
            The type of the PolyBeam.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.PolyBeam.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Model.PolyBeam"/> class.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.PolyBeam.#ctor(Tekla.Structures.Model.PolyBeam.PolyBeamTypeEnum)">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Model.PolyBeam"/> class by using the defined type.
            </summary>
            <param name="polyBeamType">The type of the polybeam.</param>
        </member>
        <member name="M:Tekla.Structures.Model.PolyBeam.AddContourPoint(Tekla.Structures.Model.ContourPoint)">
            <summary>
            Adds a contour point to the polybeam.
            </summary>
            <param name="contourPoint">The contour point to be added to the polybeam.</param>
            <returns>True on success, false if there is no more space for another contour point.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.PolyBeam.Insert">
            <summary>
            Inserts the polybeam into the model database. All the attributes must be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.PolyBeam.Select">
            <summary>
            Selects a polybeam from the model database. The identifier of the polybeam must be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.PolyBeam.Modify">
            <summary>
            Modifies the existing polybeam in the model database to match the current one.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.PolyBeam.Delete">
            <summary>
            Deletes the polybeam instance with the given identifier from the model database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.PolyBeam.GetPolybeamCoordinateSystems">
            <summary> Returns a list of coordinate systems for the polybeam segments. </summary>
            <returns>A list of coordinate systems for the polybeam segments.</returns>
        </member>
        <member name="P:Tekla.Structures.Model.PolyBeam.Type">
            <summary>
            Gets the read only type of the polybeam.
            The default type for a new polybeam instance is beam.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.PolyBeam.Contour">
            <summary>
            Gets or sets the contour for the polybeam.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.PolyBeam.PolyBeamTypeEnum">
            <summary>
            The polybeam types.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.PolyBeam.PolyBeamTypeEnum.BEAM">
            <summary>
            The polybeam.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.PolyBeam.PolyBeamTypeEnum.PANEL">
            <summary>
            The panel.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.PolyBeam.PolyBeamTypeEnum.STRIP_FOOTING">
            <summary>
            The strip footing.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.PolyBeam.PolyBeamTypeEnum.COLUMN">
            <summary>
            The column.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.PourBreak">
            <summary>
            The PourBreak class represents a pour break in a model.
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.PourBreak.#ctor">
            <summary>
            Creates a new pour break instance.
            <para>The default values are as follows:
            <list type="bullet">
            <item>PolygonArray = new ArrayList();</item>
            </list>
            </para>
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.PourBreak.#ctor(System.Collections.ArrayList)">
            <summary>
            Creates a new pour break instance and initializes it with given geometry.
            See "public ArrayList PolygonArray" for more information about the format.
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.PourBreak.Insert">
            <summary>
            Inserts a new pour break. The geometry of the pour break
            needs to be inserted in the constructor or by using the public ArrayList PolygonArray
            function, before calling insert.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.PourBreak.Select">
            <summary>
            Selects the pour break instance from the model. The identifier of the instance 
            must be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.PourBreak.Modify">
            <summary>
            Modifies the existing pour break in the model database to match the current one.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.PourBreak.Delete">
            <summary>
            Deletes the pour break from the model database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.PourBreak.PolygonArray">
            <summary>
            Array of Polygons that form the pour break geometry. One line in the array
            is one polygon with all of its points.
            
            Example of format:
            ArrayList of ArrayList of points
            [0] 0.0, 100.0, 200.0      300.0, 400.0, 500.0      800.0, 900.0, 1000.0
            [1] 0.0, 600.0, 200.0      100.0, 900.0, 200.0      550.0, 800.0, 2000.0    ...
            [2] ...
            
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotPourBreak_t">
            <summary>
            Struct for the Pour break.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPourBreak_t.ModelObject">
            <summary>
            The object we are extending (Inherited from)
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPourBreak_t.nPolygons">
            <summary>
            Number of polygons in this struct
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPourBreak_t.aPolygons">
            <summary>
            Array of polygons in this struct representing the pour break geometry
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.PourObject">
            <summary>
            The PourObject class represents a pour object in the model.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.PourObject.#ctor">
            <summary>
            Creates a new pour object.
            <para>The default values are as follows:
            <list type="bullet">
            <item>Class = 0;</item>
            </list>
            </para>
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.PourObject.Insert">
            <summary>
            At the moment pour objects cannot be inserted.
            </summary>
            <returns>False.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.PourObject.Select">
            <summary>
            Selects the pour object instance from the model. The identifier of the instance must be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.PourObject.Modify">
            <summary>
            Modifies the pour object with the given identifier.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.PourObject.Delete">
            <summary>
            At the moment pour objects cannot be deleted.
            </summary>
            <returns>False.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.PourObject.GetSolid">
            <summary>
            Returns the solid of the pour object.
            </summary>
            <returns>The solid of the pour object.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.PourObject.GetParts">
            <summary>
            Returns an enumerator of all parts related to pour.
            </summary>
            <returns>A model object enumerator on success, otherwise null.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.PourObject.GetAssembly">
            <summary>
            Returns the assembly that the pour object belongs to.
            </summary>
            <returns>The assembly that the pour object belongs to.</returns>
        </member>
        <member name="P:Tekla.Structures.Model.PourObject.Class">
            <summary>
            The class of the pour object.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotPourObject_t">
            <summary>
            Struct for the Pour object.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPourObject_t.ModelObject">
            <summary>
            The object we are extending (Inherited from)
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPourObject_t.Class">
            <summary>
            The object's class
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.TaskWorktype">
            <summary>
            The TaskWorktype class defines a single worktype for a task object. Each task may belong to only 
            one worktype.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.TaskWorktype.#ctor">
            <summary>
            Creates a new task worktype instance.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.TaskWorktype._Name">
            <summary>
            The name of the task worktype.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.TaskWorktype.Insert">
            <summary>
            Inserts the task worktype instance in the model.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.TaskWorktype.Select">
            <summary>
            Selects the task worktype instance from the model. The identifier must be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.TaskWorktype.Modify">
            <summary>
            Modifies the task worktype instance in the model. The identifier must be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.TaskWorktype.Delete">
            <summary>
            Deletes the task worktype instance from the model. The identifier must be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="P:Tekla.Structures.Model.TaskWorktype.Name">
            <summary>
            The name of the task worktype.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotTaskWorktype_t">
            <summary>
            Struct for the TaskWorktype.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotTaskWorktype_t.ModelObject">
            <summary>
            The object we are extending (Inherited from).
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotTaskWorktype_t.aName">
            <summary>
            Name of the task worktype.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.TaskDependency">
            <summary>
            The TaskDependency class represents a dependency between two task objects. Each task may depend
            on many other tasks, but between two specific tasks only one type of a dependency may exist.
            <para>
            There are four types of dependencies:
            <list type="bullet">
            <item>FINISH_TO_FINISH (FF)</item>
            <item>FINISH_TO_START (FS)</item>
            <item>START_TO_FINISH (SF)</item>
            <item>START_TO_START (SS)</item>
            </list>
            </para>
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.TaskDependency.#ctor">
            <summary>
            Creates a new task dependency instance.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.TaskDependency.#ctor(Tekla.Structures.Model.Task,Tekla.Structures.Model.Task)">
            <summary>
            Creates a new task dependency instance with the given primary and secondary tasks.
            </summary>
            <param name="primary">The primary task to be used.</param>
            <param name="secondary">The secondary task to be used.</param>
            <example>
            <code>
            using Tekla.Structures.Model;
            
            public class Example
            {
                   public void Example1()
                   {
                       bool Result = false;
                       Task Task1 = new Task();
                       Task Task2 = new Task();
                       Task1.Name = "Default Task 0000";
                       Task2.Name = "Default Task 0001";
                       Task1.Insert();
                       Task2.Insert();
                       TaskDependency TaskDependency1 = new TaskDependency(Task1, Task2);
                       TaskDependency1.DependencyType = TaskDependency.DependencyTypeEnum.START_TO_FINISH;
                       Result = TaskDependency1.Insert();
                   }
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.Structures.Model.TaskDependency.Insert">
            <summary>
            Inserts the task dependency instance in the model.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.TaskDependency.Select">
            <summary>
            Selects the task dependency instance from the model. The identifier must be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.TaskDependency.Modify">
            <summary>
            Modifies the task dependency instance in the model. The identifier must be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.TaskDependency.Delete">
            <summary>
            Deletes the task dependency instance from the model.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="P:Tekla.Structures.Model.TaskDependency.Lag">
            <summary>
            The lag of the task dependency represented in whole hours.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.TaskDependency.Local">
            <summary>
            The locality indicates if the dependency was created in Tekla Structures and Task Manager or imported.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.TaskDependency.Primary">
            <summary>
            The primary task of the task dependency.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.TaskDependency.Secondary">
            <summary>
            The secondary task of the task dependency.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.TaskDependency.DependencyType">
            <summary>
            The type of the task dependency.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.TaskDependency.DependencyTypeEnum">
            <summary>
            The task dependency types.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.TaskDependency.DependencyTypeEnum.FINISH_TO_FINISH">
            <summary>
            The task dependency type finish-to-finish.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.TaskDependency.DependencyTypeEnum.FINISH_TO_START">
            <summary>
            The task dependency type finish-to-start.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.TaskDependency.DependencyTypeEnum.START_TO_FINISH">
            <summary>
            The task dependency type start-to-finish.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.TaskDependency.DependencyTypeEnum.START_TO_START">
            <summary>
            The task dependency type start-to-start.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotTaskDependency_t">
            <summary>
            Struct for the TaskDependency.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotTaskDependency_t.ModelObject">
            <summary>
            The object we are extending (Inherited from).
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotTaskDependency_t.PrimaryId">
            <summary>
            Task ID of the primary task dependency.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotTaskDependency_t.SecondaryId">
            <summary>
            Task ID of the secondary task dependency.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotTaskDependency_t.Type">
            <summary>
            The type of the task dependency.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotTaskDependency_t.Lag">
            <summary>
            Lag of the task dependency.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotTaskDependency_t.Local">
            <summary>
            Locality indicates if the dependency was created in Tekla Structures and Task Manager or imported.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Task">
            <summary>
            The Task class defines a single building site task. It may contain parts, assemblies or other tasks. Tasks may
            have a hierarchy between them i.e. there are other tasks as subtasks for a parent task. Tasks may also
            depend on each other, have resources assigned to them or have a single worktype.
            </summary>
            <example>
            The following example creates and inserts a task with two beams as objects into the model.
            The task has also a scenario:
            <code>
            using System.Collections.Generic;
            using System.Collections;
            using System;
            using Tekla.Structures.Model;
            using Tekla.Structures.Geometry3d;
            
            public class Example
            {
                   public void Example1()
                   {
                       Point Point1 = new Point(0, 0, 0);
                       Point Point2 = new Point(1000, 0, 0);
                       Point Point3 = new Point(0, 1000, 0);
                       Point Point4 = new Point(1000, 1000, 0);
            
                       Beam Beam1 = new Beam(Point1, Point2);
                       Beam Beam2 = new Beam(Point3, Point4);
                       Beam1.Profile.ProfileString = "HEA400";
                       Beam1.Finish = "PAINT";
                       Beam1.Material.MaterialString = "S235JR";
                       Beam2.Profile.ProfileString = "HEA400";
                       Beam2.Finish = "PAINT";
                       Beam2.Material.MaterialString = "S235JR";
            
                       Beam1.Insert();
                       Beam2.Insert();
            
                       // The Task
                       Task Task1 = new Task();
                       Task1.PlannedStartDate = DateTime.Now;
                       Task1.Name = "Test Task";
                       Task1.Critical = true;
                       Task1.Description = "Test task description";
                       Task1.Url = "http://test.task.url";
            
                       // Scenario
                       HierarchicDefinition ScenarioDefinition = new HierarchicDefinition();
                       ScenarioDefinition.Name = "Scenario type";
                       ScenarioDefinition.HierarchyType = HierarchicDefinitionTypeEnum.DOT_HIERARCHIC_TASK_SCENARIO;
                       ScenarioDefinition.Insert();
            
                       HierarchicObject Scenario = new HierarchicObject();
                       Scenario.Name = "Current scenario";
                       Scenario.Definition = ScenarioDefinition;
                       Scenario.Insert();
            
                       Task1.Scenario = Scenario;
            
                       ArrayList ModelObjects = new ArrayList();
                       ModelObjects.Add(Beam1);
                       ModelObjects.Add(Beam2);
                       Task1.AddObjectsToTask(ModelObjects);
            
                       Task1.Insert();
                   }
            }
            </code>
            </example>
            <seealso cref="T:Tekla.Structures.Model.TaskDependency"/>
            <seealso cref="T:Tekla.Structures.Model.TaskWorktype"/>
        </member>
        <member name="F:Tekla.Structures.Model.Task.SELECT_MAX_SIZE">
            <summary>
            Maximum amount of elements in one function call.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.Task.#ctor">
            <summary>
            Creates a new task instance.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures.Geometry3d;
            using System.Collections;
            
            public class Example
            {
                   public void Example1()
                   {
                       bool Result = false;
                       Beam Beam1 = new Beam(new Point(0, 0, 0), new Point(1000, 0, 0));
                       Beam Beam2 = new Beam(new Point(0, 500, 0), new Point(1000, 500, 0));
                       Beam1.Name = "Default Beam 0000";
                       Beam2.Name = "Default Beam 0001";
                       Beam1.Insert();
                       Beam2.Insert();
                       Task Task1 = new Task();
                       Task1.Name = "Default Task 0000";
                       Task1.Insert();
                       ArrayList aChildren = new ArrayList();
                       aChildren.Add(Beam1);
                       aChildren.Add(Beam2);
                       Result = Task1.AddObjectsToTask(aChildren);
                   }
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.Structures.Model.Task.#ctor(Tekla.Structures.Identifier)">
            <summary>
            Creates a task instance with a known identifier. Select the task after the creation.
            </summary>
            <param name="ID">The identifier of an existing task.</param>
            <example>
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures;
            
            public class Example
            {
                   public void Example1()
                   {
                       Identifier Identifier1 = new Identifier(357);
            
                       bool Result = true;
                       Task Task1 = new Task(Identifier1);
                       Task1.Select();
                       ModelObjectEnumerator TaskChildren = Task1.GetChildren();
                       foreach (Task ChildTask in TaskChildren)
                       {
                           ChildTask.Name += " (modified)";
                           Result = ChildTask.Modify();
                       }
                   }
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.Structures.Model.Task.Insert">
            <summary>
            Inserts the task instance in the model.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Task.Select">
            <summary>
            Selects the task instance from the model. The identifier must be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Task.Modify">
            <summary>
            Modifies the task instance in the model. The identifier must be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Task.Delete">
            <summary>
            Deletes the task instance from the model. The identifier must be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Task.AddObjectsToTask(System.Collections.ArrayList)">
            <summary>
            Adds objects to the task.
            </summary>
            <param name="ModelObjects">An array list of model objects to be added to the task.</param>
            <returns>True on success.</returns>
            <example>
            <code>
            using Tekla.Structures.Model;
            using System.Collections;
            
            public class Example
            {
                   public void Example1()
                   {
                       // Add beam1 and beam2 into the task.
                       Task task = new Task();
                       Beam beam1 = new Beam();
                       Beam beam2 = new Beam();
            
                       if (task.Insert() &amp;&amp;
                           beam1.Insert() &amp;&amp;
                           beam2.Insert())
                       {
                           ArrayList objectsToAdd = new ArrayList();
                           objectsToAdd.Add(beam1);
                           objectsToAdd.Add(beam2);
            
                           task.AddObjectsToTask(objectsToAdd);
                       }
                   }
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.Structures.Model.Task.RemoveObjectsFromTask(System.Collections.ArrayList)">
            <summary>
            Removes objects from the task.
            </summary>
            <param name="ModelObjects">An array list of model objects to be removed from the task.</param>
            <returns>True on success.</returns>
            <example>
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures;
            using System.Collections;
            
            public class Example
            {
                   public void Example1()
                   {
                       Identifier Identifier1 = new Identifier(357);
            
                       // Remove all the children from the task.
                       Task task = new Task(Identifier1);
            
                       if (task.Select())
                       {
                           ModelObjectEnumerator taskChildren = task.GetChildren();
                           ArrayList objectsToRemove = new ArrayList();
            
                           while (taskChildren.Current != null)
                           objectsToRemove.Add(taskChildren.Current);
            
                           task.RemoveObjectsFromTask(objectsToRemove);
                       }
                   }
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.Structures.Model.Task.GetFathers">
            <summary>
            Returns an enumerator of all the task type fathers for the task object.
            </summary>
            <returns>A model object enumerator on success, otherwise null.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Task.GetDependencies">
            <summary>
            Returns an enumerator of all the task dependency objects where the task is involved.
            </summary>
            <returns>A model object enumerator on success, otherwise null.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Task.GetAllTasksOfSelectedObjects">
            <summary>
            Returns an enumerator of all the tasks related to the selected objects.
            </summary>
            <returns>A model object enumerator on success, otherwise null.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Task.DoAttachObjectsToTask(System.Collections.ArrayList,System.Boolean)">
            <summary>
            Adds a list of objects to this task.
            </summary>
            <param name="ModelObjects">List of ModelObjects</param>
            <param name="Attach">True to attach, false to detach</param>
            <returns>Success</returns>
        </member>
        <member name="P:Tekla.Structures.Model.Task.Name">
            <summary>
            The name of the task.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Task.Completeness">
            <summary>
            The percentage of the completeness of the task on the scale from 0 to 100.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Task.Critical">
            <summary>
            The criticality of the task.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Task.Local">
            <summary>
            The locality indicates if the task was created in Tekla Structures and Task Manager or imported.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Task.Scenario">
            <summary>
            The scenario which the task belongs to.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Task.Description">
            <summary>
            A short textual description of the task.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Task.Url">
            <summary>
            A link to material or data related to the task. The link can be a hyperlink or a file system link.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Task.PlannedStartDate">
            <summary>
            The planned start date of the task.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Task.PlannedEndDate">
            <summary>
            The planned end date of the task.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Task.PlannedWorkAmount">
            <summary>
            The amount of work planned to be used for the task.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Task.ActualStartDate">
            <summary>
            The actual start date of the task.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Task.ActualEndDate">
            <summary>
            The actual end date of the task.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Task.ActualWorkAmount">
            <summary>
            The amount of work already used for the task.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Task.FunctionalityEnum">
            <summary>
            Enumeration about what to do on Tekla Structures side.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotTask_t">
            <summary>
            Serialization structure for task.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotTask_t.ModelObject">
            <summary>
            The object we are extending (Inherited from).
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotTask_t.aName">
            <summary>
            Name of the task.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotTask_t.Completeness">
            <summary>
            Percentage of completeness of the task on the scale from 0 to 100.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotTask_t.Critical">
            <summary>
            Criticality of the task.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotTask_t.Local">
            <summary>
            Locality indicates if the task was created in Tekla Structures and Task Manager or imported.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotTask_t.Scenario">
            <summary>
            The scenario which the task belongs to.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotTask_t.aDescription">
            <summary>
            Description of the task.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotTask_t.aUrl">
            <summary>
            Link to a location or document containing information of the task.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotTask_t.PlannedStartDate">
            <summary>
            Planned start date of the task.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotTask_t.PlannedEndDate">
            <summary>
            Planned end date of the task.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotTask_t.PlannedWorkAmount">
            <summary>
            Planned work amount in hours
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotTask_t.ActualStartDate">
            <summary>
            Actual start date of the task.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotTask_t.ActualEndDate">
            <summary>
            Actual end date of the task.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotTask_t.ActualWorkAmount">
            <summary>
            Actual work amount in hours
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotTaskObjectAttacher_t">
            <summary>
            Struct for UI selection.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotTaskObjectAttacher_t.ModelObject">
            <summary>
            The object we are attaching to.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotTaskObjectAttacher_t.Functionality">
            <summary>
            FunctionalityEnum.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotTaskObjectAttacher_t.nObjects">
            <summary>
            Number of objects.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotTaskObjectAttacher_t.aObjects">
            <summary>
            Identifiers.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.BaseRebarGroup">
            <summary>
            The BaseRebarGroup class is an abstract base class that represents reinforcing bar group classes. 
            The reinforcing bar groups derived from the base group are the rebar group, the circled rebar group 
            and the curved rebar group.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Reinforcement">
            <summary>
            The Reinforcement class represents a reinforcement in the model. A reinforcement can either be a mesh,
            a single rebar, a rebar group or a strand.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Reinforcement.MAX_ON_PLANE_OFFSET_VALUES">
            <summary>
            Maximum on plane offset values.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Reinforcement.MAX_REBAR_RADIUS_VALUES">
            <summary>
            Maximum rebar radius values.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Reinforcement.MAX_REBAR_SPACING_VALUES">
            <summary>
            Maximum rebar splicing values.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Reinforcement.MAX_REBAR_POLYGONS">
            <summary>
            Maximum rebar polygons.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Reinforcement._wires">
            <summary>
            Stores the physical rebars from which the RebarMesh consists of.
            The rebars may be requested one at a time or all in a list, and they contain
            physical points that single rebar has. These points can both include the hook 
            points or not depending on how the retreiving function is called.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.Reinforcement.#ctor">
            <summary>
            Initializes a new instance of the Reinforcement class with empty attributes.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.Reinforcement.SelectInnerRebars(System.Boolean,System.Boolean)">
            <summary>
            Selects the physical rebars inside the group. 
            These rebars contain for example physical points of the rebar.
            The function fetches all physical rebars for the structure. Due to remoting limitations,
            they may be fetched with several subsequent remote calls when handling a big reinforcement structure.
            This may cause some overhead.
            The function is only called once, when first inquiry about the physical rebarsis made.
            </summary>
            <param name="withHooks">Parameter to determine whether the hook points should be included or not.</param>
            <param name="withoutClashes">Parameter to determine whether the polygon points should be moved to avoid clashing or not.</param>
        </member>
        <member name="M:Tekla.Structures.Model.Reinforcement.GetRebarGeometries(System.Boolean)">
            <summary>
            Retrieves a list of physical reinforcing bars (of type RebarGeometry).
            These objects contain physical points in the 3D space of each reinforcing bar.
            </summary>
            <param name="withHooks">A parameter to determine whether the hook points should be included in the rebar geometry or not.</param>
            <returns>An array list that contains the RebarGeometry objects.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Reinforcement.GetRebarGeometriesWithoutClashes(System.Boolean)">
            <summary>
            Retrieves a list of physical reinforcing bars (of type RebarGeometry).
            These objects contain physical points in the 3D space of each reinforcing bar as shown in model view.
            In case rebar polygon clashes with itself, physical points are moved to avoid clashing.
            </summary>
            <param name="withHooks">A parameter to determine whether the hook points should be included in the rebar geometry or not.</param>
            <returns>An array list that contains the RebarGeometry objects.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Reinforcement.IsGeometryValid">
            <summary>
            Tells whether the geometry of a reinforcement object is valid or not.
            </summary>
            <returns>True if the geometry of the reinforcement is valid, false otherwise.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Reinforcement.GetNumberOfRebars">
            <summary>
            Returns the number of rebars in the reinforcing group.
            </summary>
            <returns>The number of rebars in the rebar group.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Reinforcement.GetSingleRebar(System.Int32,System.Boolean)">
            <summary>
            Returns a single rebar inside the rebar group located by the given index.
            The indexing starts from the start point. The rebar represents a physical reinforcing bar 
            and contains physical points in the 3D space of the bar.
            The method returns null on error, for example if given an erroneous index.
            The number of rebars in the group can be requested with GetNumberOfRebars().
            </summary>
            <param name="index">The index of the rebar in the group.</param>
            <param name="withHooks">A parameter to determine whether the hook points should be included in the rebar geometry or not.</param>
            <returns>The instance of a RebarGeometry object that contains the point list of the single physical reinforcing bar. Null if the given index was not valid.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Reinforcement.GetSingleRebarWithoutClash(System.Int32,System.Boolean)">
            <summary>
            Returns a single rebar inside the rebar group located by the given index.
            The indexing starts from the start point. The rebar represents a physical reinforcing bar 
            and contains physical, non-clashing points in the 3D space of the bar.
            The method returns null on error, for example if given an erroneous index.
            The number of rebars in the group can be requested with GetNumberOfRebars().
            </summary>
            <param name="index">The index of the rebar in the group.</param>
            <param name="withHooks">A parameter to determine whether the hook points should be included in the rebar geometry or not.</param>
            <returns>The instance of a RebarGeometry object that contains the point list of the single physical reinforcing bar. Null if the given index was not valid.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Reinforcement.GetSolid">
            <summary>
            Method for getting the solid information of the reinforcement.
            </summary>
            <returns>The solid instance of the reinforcement.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Reinforcement.ToStruct(Tekla.Structures.ModelInternal.dotReinforcement_t@)">
            <summary>
            Method for transforming the Reinforcement data into corresponding struct.
            </summary>
            <param name="p">Reference to the struct which will be populated.</param>
        </member>
        <member name="M:Tekla.Structures.Model.Reinforcement.FromStruct(Tekla.Structures.ModelInternal.dotReinforcement_t@)">
            <summary>
            Method for transforming the struct data to corresponding Reinforcement data.
            </summary>
            <param name="p">Reference to the struct which will be used to populate the Reinforcement data.</param>
        </member>
        <member name="P:Tekla.Structures.Model.Reinforcement.Father">
            <summary>
            Gets or sets the father object of the reinforcement; the model object instance to operate on.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Reinforcement.Grade">
            <summary>
            Gets or sets the steel grade of the reinforcing bar.
            The grade indicates the strength of the steel used in reinforcing bars.
            It can also indicate other factors, such as the weldability or surface deformations of the bar.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Reinforcement.Name">
            <summary>
            Gets or sets the name of the reinforcement.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Reinforcement.Class">
            <summary>
            Gets or sets the class of the reinforcement. The class is used to group reinforcements.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Reinforcement.NumberingSeries">
            <summary>
            Gets or sets the numbering series of the reinforcement.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Reinforcement.OnPlaneOffsets">
            <summary>
            Gets or sets the double offset value for each leg on the same plane as the bar.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Reinforcement.FromPlaneOffset">
            <summary>
            Gets or sets the offset value from the part surface.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Reinforcement.StartPointOffsetType">
            <summary>
            Gets or sets the type of the start point offset is either OFFSET_TYPE_LEG_LENGTH or OFFSET_TYPE_COVER_THICKNESS.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Reinforcement.StartPointOffsetValue">
            <summary>
            Gets or sets the concrete cover thickness or leg length at the first end of the bar.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Reinforcement.EndPointOffsetType">
            <summary>
            Gets or sets the type of the end point offset. The options are:
            <list type="bullet">
            <item><description>OFFSET_TYPE_LEG_LENGTH</description></item>
            <item><description>OFFSET_TYPE_COVER_THICKNESS</description></item>
            </list>
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Reinforcement.EndPointOffsetValue">
            <summary>
            Gets or sets the concrete cover thickness or leg length at the second end of the bar.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Reinforcement.RadiusValues">
            <summary>
            Gets or sets the radius value(s) of the bends in the bar.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Reinforcement.InputPointDeformingState">
            <summary>
            Gets or sets the reinforcement input point deforming state.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Reinforcement._Size">
            <summary>
            Gets or sets the size of the bar.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Reinforcement.RebarOffsetTypeEnum">
            <summary> 
            The different types of offsets.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Reinforcement.RebarOffsetTypeEnum.OFFSET_TYPE_COVER_THICKNESS">
            <summary>
            The concrete cover thickness.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Reinforcement.RebarOffsetTypeEnum.OFFSET_TYPE_LEG_LENGTH">
            <summary> 
            The leg length.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseRebarGroup._Type">
            <summary>
            The subtype of group(group, curved, cicle).
            </summary> 
        </member>
        <member name="M:Tekla.Structures.Model.BaseRebarGroup.#ctor">
            <summary>
            Initializes a new base rebar group instance with empty attributes.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BaseRebarGroup.Size">
            <summary>
            The size of the reinforcement.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BaseRebarGroup.StartHook">
            <summary>
            The hook at the beginning of the reinforcing bar.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BaseRebarGroup.EndHook">
            <summary>
            The hook at the end of the reinforcing bar.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BaseRebarGroup.FromPlaneOffset">
            <summary>
            The offset value from the part surface applied in both sides.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BaseRebarGroup.StartFromPlaneOffset">
            <summary>
            The start offset value from the part surface.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BaseRebarGroup.EndFromPlaneOffset">
            <summary>
            The end offset value from the part surface.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BaseRebarGroup.ExcludeType">
            <summary>
            Defines which bars to omit from the group. The options are:
            <list type="bullet">
            <item><description>EXCLUDE_TYPE_NONE</description></item>
            <item><description>EXCLUDE_TYPE_FIRST</description></item>
            <item><description>EXCLUDE_TYPE_LAST</description></item>
            <item><description>EXCLUDE_TYPE_BOTH</description></item>
            </list>
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BaseRebarGroup.Polygons">
            <summary>
            An array list of polygons for the reinforcing bar group. Each polygon must have an equal number of points.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BaseRebarGroup.SpacingType">
            <summary>
            The type of spacing. The options are (BaseRebarGroup.RebarGroupSpacingTypeEnum.):
            <list type="bullet">
            <item><description>SPACING_TYPE_UNDEFINED</description></item>
            <item><description>SPACING_TYPE_EXACT_SPACINGS</description></item>
            <item><description>SPACING_TYPE_EXACT_NUMBER</description></item>
            <item><description>SPACING_TYPE_TARGET_SPACE</description></item>
            <item><description>SPACING_TYPE_EXACT_SPACE_FLEX_AT_START</description></item>
            <item><description>SPACING_TYPE_EXACT_SPACE_FLEX_AT_END</description></item>
            <item><description>SPACING_TYPE_EXACT_SPACE_FLEX_AT_BOTH</description></item>
            <item><description>SPACING_TYPE_EXACT_SPACE_FLEX_AT_MIDDLE</description></item>
            </list>
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BaseRebarGroup.Spacings">
            <summary>
            The spacing value(s).
            If the type of the spacing is SPACING_TYPE_EXACT_NUMBER
            Spacings has only one value that defines the number of the reinforcing bars.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BaseRebarGroup.StartPoint">
            <summary>
            The start point of the direction in which the bars are distributed.
            </summary> 
        </member>
        <member name="P:Tekla.Structures.Model.BaseRebarGroup.EndPoint">
            <summary>
            The end point of the direction in which the bars are distributed.
            </summary> 
        </member>
        <member name="T:Tekla.Structures.Model.BaseRebarGroup.ExcludeTypeEnum">
            <summary>
            The different ways to exclude reinforcing bars from the group.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseRebarGroup.ExcludeTypeEnum.EXCLUDE_TYPE_NONE">
            <summary>
            All the reinforcing bars are included.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseRebarGroup.ExcludeTypeEnum.EXCLUDE_TYPE_FIRST">
            <summary>
            The first reinforcing bar is not to be created to the group.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseRebarGroup.ExcludeTypeEnum.EXCLUDE_TYPE_LAST">
            <summary>
            The last reinforcing bar is not to be created to the group.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseRebarGroup.ExcludeTypeEnum.EXCLUDE_TYPE_BOTH">
            <summary>
            The first and last reinforcing bars are not to be created to the group.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.BaseRebarGroup.RebarGroupTypeEnum">
            <summary>
            The different stirrup types.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseRebarGroup.RebarGroupTypeEnum.GROUP">
            <summary>
            The group subtype.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseRebarGroup.RebarGroupTypeEnum.CURVED">
            <summary>
            The curved subtype.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseRebarGroup.RebarGroupTypeEnum.CIRCLE">
            <summary>
            The circle subtype.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.BaseRebarGroup.RebarGroupSpacingTypeEnum">
            <summary>
            The ways to distribute the reinforcing bars with different spacings.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseRebarGroup.RebarGroupSpacingTypeEnum.SPACING_TYPE_UNDEFINED">
            <summary>
            The undefined spacing type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseRebarGroup.RebarGroupSpacingTypeEnum.SPACING_TYPE_EXACT_SPACINGS">
            <summary>
            The bars are distributed using the spacing values.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseRebarGroup.RebarGroupSpacingTypeEnum.SPACING_TYPE_EXACT_NUMBER">
            <summary>
            Equal distribution by the number of reinforcing bars.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseRebarGroup.RebarGroupSpacingTypeEnum.SPACING_TYPE_TARGET_SPACE">
            <summary>
            Equal distribution by the target spacing value.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseRebarGroup.RebarGroupSpacingTypeEnum.SPACING_TYPE_EXACT_SPACE_FLEX_AT_START">
            <summary>
            Distribution by the exact spacing value with a flexible first space.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseRebarGroup.RebarGroupSpacingTypeEnum.SPACING_TYPE_EXACT_SPACE_FLEX_AT_END">
            <summary>
            Distribution by the exact spacing value with a flexible last space.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseRebarGroup.RebarGroupSpacingTypeEnum.SPACING_TYPE_EXACT_SPACE_FLEX_AT_BOTH">
            <summary>
            Distribution by the exact spacing value with flexible first and last spaces.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseRebarGroup.RebarGroupSpacingTypeEnum.SPACING_TYPE_EXACT_SPACE_FLEX_AT_MIDDLE">
            <summary>
            Distribution by the exact spacing value with a flexible middle space.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotRebarGroup_t">
            <summary>
            Serialization structure for RebarGroup.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarGroup_t.Reinforcement">
            <summary> The base class for all reinforcements. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarGroup_t.StartHook">
            <summary> The hook at the beginning of the reinforcing bar. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarGroup_t.EndHook">
            <summary> The hook at the end of the reinforcing bar. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarGroup_t.ExcludeType">
            <summary> Defines which bars to omit from the group. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarGroup_t.nPolygons">
            <summary> Number of polygons. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarGroup_t.nPointsInPolygon">
            <summary> Number of points in each polygon. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarGroup_t.aX">
            <summary> The x-coordinates of all points. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarGroup_t.aY">
            <summary> The y-coordinates of all points. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarGroup_t.aZ">
            <summary> The z-coordinates of all points. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarGroup_t.SpacingType">
            <summary> The type of spacing. </summary>        
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarGroup_t.nSpacingValues">
            <summary> Number of spacing values. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarGroup_t.aSpacingMultipliers">
            <summary> Spacing multiplier value(s).  </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarGroup_t.aSpacings">
            <summary> Spacing value(s).  </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarGroup_t.StirrupType">
            <summary> The type of stirrup. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarGroup_t.StartPoint">
            <summary> The start point of the direction in which the bars are distributed. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarGroup_t.EndPoint">
            <summary> The end point of the direction in which the bars are distributed. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarGroup_t.SubType">
            <summary> Defines rebar group type (group, curved, circle). </summary>
        </member>
        <member name="T:Tekla.Structures.Model.CircleRebarGroup">
            <summary>
            The CircleRebarGroup class represents a group of reinforcing bars which have a circular shape.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures.Geometry3d;
            
            public class Example
            {
                   public void Example1()
                   {
                       Beam Beam = new Beam(new Point(5000, 8000, 0), new Point(6000, 8000, 0));
                       Beam.Profile.ProfileString = "250*250";
                       Beam.Material.MaterialString = "K40-1";
                       Beam.Finish = "PAINT";
                       Beam.Insert();
            
                       double MinimumX = Beam.GetSolid().MinimumPoint.X;
                       double MinimumY = Beam.GetSolid().MinimumPoint.Y;
                       double MinimumZ = Beam.GetSolid().MinimumPoint.Z;
                       double MaximumX = Beam.GetSolid().MaximumPoint.X;
                       double MaximumY = Beam.GetSolid().MaximumPoint.Y;
                       double MaximumZ = Beam.GetSolid().MaximumPoint.Z;
            
                       CircleRebarGroup CircleRebarGroup = new CircleRebarGroup();
                       CircleRebarGroup.Polygon.Points.Add(new Point(MinimumX, MaximumY, MinimumZ));
                       CircleRebarGroup.Polygon.Points.Add(new Point(MinimumX, MinimumY, MinimumZ));
                       CircleRebarGroup.Polygon.Points.Add(new Point(MinimumX, MinimumY, MaximumZ));
                       CircleRebarGroup.StartPoint = new Point(MinimumX, MaximumY, MinimumZ);
                       CircleRebarGroup.EndPoint = new Point(MaximumX, MaximumY, MinimumZ);
                       CircleRebarGroup.Father = Beam;
                       CircleRebarGroup.RadiusValues.Add(40.0);
                       CircleRebarGroup.SpacingType = BaseRebarGroup.RebarGroupSpacingTypeEnum.SPACING_TYPE_EXACT_SPACINGS;
                       CircleRebarGroup.Spacings.Add(300);
                       CircleRebarGroup.ExcludeType = BaseRebarGroup.ExcludeTypeEnum.EXCLUDE_TYPE_NONE;
                       CircleRebarGroup.Name = "RebarGroup";
                       CircleRebarGroup.Class = 3;
                       CircleRebarGroup.Size = "10";
                       CircleRebarGroup.NumberingSeries.StartNumber = 0;
                       CircleRebarGroup.NumberingSeries.Prefix = "Group";
                       CircleRebarGroup.Grade = "A500HW";
                       CircleRebarGroup.StirrupType = CircleRebarGroup.CircleRebarGroupStirrupTypeEnum.STIRRUP_TYPE_CIRCLE;
                       CircleRebarGroup.Insert();
                   }
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.Structures.Model.CircleRebarGroup.#ctor">
            <summary>
            Initializes a new circle rebar group instance with empty attributes.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.CircleRebarGroup.Insert">
            <summary>
            Inserts the circle rebar group into the model database. All the attributes must be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.CircleRebarGroup.Select">
            <summary>
            Selects a circle rebar group from the model database. The identifier of the circle rebar group must be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.CircleRebarGroup.Modify">
            <summary>
            Modifies the existing circle rebar group in the model database to match the current one.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.CircleRebarGroup.Delete">
            <summary>
            Deletes the circle rebar group instance with the given identifier from the model database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="P:Tekla.Structures.Model.CircleRebarGroup.Polygon">
            <summary>
            A polygon definition for the circle reinforcing bar group shape. The polygon must have 3 points.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.CircleRebarGroup.StirrupType">
            <summary>
            The type of the stirrup.
            The options are:
            <list type="bullet">
            <item><description>STIRRUP_TYPE_CIRCLE</description></item>
            <item><description>STIRRUP_TYPE_SPIRAL</description></item>
            </list>
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.CircleRebarGroup.CircleRebarGroupStirrupTypeEnum">
            <summary> The different stirrup types. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.CircleRebarGroup.CircleRebarGroupStirrupTypeEnum.STIRRUP_TYPE_CIRCLE">
            <summary> The circle type of stirrup. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.CircleRebarGroup.CircleRebarGroupStirrupTypeEnum.STIRRUP_TYPE_SPIRAL">
            <summary> The spiral type of stirrup. </summary>
        </member>
        <member name="T:Tekla.Structures.Model.CurvedRebarGroup">
            <summary>
            The CurvedRebarGroup class represents a group of reinforcing bars which have a curved shape.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures.Geometry3d;
            
            public class Example
            {
                   public void Example1()
                   {
                       Beam Beam = new Beam(new Point(5000, 8000, 0), new Point(6000, 8000, 0));
                       Beam.Profile.ProfileString = "D500";
                       Beam.Material.MaterialString = "K40-1";
                       Beam.Finish = "PAINT";
                       Beam.Insert();
            
                       double MinimumX = Beam.GetSolid().MinimumPoint.X;
                       double MinimumY = Beam.GetSolid().MinimumPoint.Y;
                       double MinimumZ = Beam.GetSolid().MinimumPoint.Z;
                       double MaximumX = Beam.GetSolid().MaximumPoint.X;
                       double MaximumY = Beam.GetSolid().MaximumPoint.Y;
                       double MaximumZ = Beam.GetSolid().MaximumPoint.Z;
            
                       CurvedRebarGroup CurvedRebarGroup = new CurvedRebarGroup();
                       CurvedRebarGroup.Polygon.Points.Add(new Point(MinimumX, MaximumY, MinimumZ));
                       CurvedRebarGroup.Polygon.Points.Add(new Point(MinimumX, MinimumY, MinimumZ));
                       CurvedRebarGroup.Polygon.Points.Add(new Point(MinimumX, MinimumY, MaximumZ));
                       CurvedRebarGroup.StartPoint = new Point(MinimumX, MaximumY, MinimumZ);
                       CurvedRebarGroup.EndPoint = new Point(MaximumX, MaximumY, MinimumZ);
                       CurvedRebarGroup.Father = Beam;
                       CurvedRebarGroup.RadiusValues.Add(40.0);
                       CurvedRebarGroup.SpacingType = BaseRebarGroup.RebarGroupSpacingTypeEnum.SPACING_TYPE_EXACT_SPACINGS;
                       CurvedRebarGroup.Spacings.Add(30); //if you use: RebarGroup.Spacings.Add(30.0); ->then it works
                       CurvedRebarGroup.ExcludeType = BaseRebarGroup.ExcludeTypeEnum.EXCLUDE_TYPE_NONE;
                       CurvedRebarGroup.Name = "RebarGroup";
                       CurvedRebarGroup.Class = 3;
                       CurvedRebarGroup.Size = "8";
                       CurvedRebarGroup.NumberingSeries.StartNumber = 0;
                       CurvedRebarGroup.NumberingSeries.Prefix = "Group";
                       CurvedRebarGroup.Grade = "A500HW";
                       CurvedRebarGroup.Insert();
                   }
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.Structures.Model.CurvedRebarGroup.#ctor">
            <summary>
            Initializes a new curved rebar group instance with empty attributes.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.CurvedRebarGroup.Insert">
            <summary>
            Inserts the curved rebar group into the model database. All the attributes must be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.CurvedRebarGroup.Select">
            <summary>
            Selects a curved rebar group from the model database. The identifier of the curved rebar group must be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.CurvedRebarGroup.Modify">
            <summary>
            Modifies the existing curved rebar group in the model database to match the current one.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.CurvedRebarGroup.Delete">
            <summary>
            Deletes the curved rebar group instance with the given identifier from the model database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="P:Tekla.Structures.Model.CurvedRebarGroup.Polygon">
            <summary>
            A polygon definition for the curved reinforcing bar group shape. The polygon must have 3 points.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.RebarGroup">
            <summary>
            The RebarGroup class represents a group of reinforcing bars.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures.Geometry3d;
            
            public class Example
            {
                   public void Example1()
                   {
                       Beam Beam = new Beam(new Point(5000, 8000, 0), new Point(6000, 8000, 0));
                       Beam.Profile.ProfileString = "250*250";
                       Beam.Material.MaterialString = "K40-1";
                       Beam.Finish = "PAINT";
                       Beam.Insert();
            
                       double MinimumX = Beam.GetSolid().MinimumPoint.X;
                       double MinimumY = Beam.GetSolid().MinimumPoint.Y;
                       double MinimumZ = Beam.GetSolid().MinimumPoint.Z;
                       double MaximumX = Beam.GetSolid().MaximumPoint.X;
                       double MaximumY = Beam.GetSolid().MaximumPoint.Y;
                       double MaximumZ = Beam.GetSolid().MaximumPoint.Z;
            
                       Polygon Polygon = new Polygon();
                       Polygon.Points.Add(new Point(MinimumX, MaximumY, MinimumZ));
                       Polygon.Points.Add(new Point(MinimumX, MinimumY, MinimumZ));
                       Polygon.Points.Add(new Point(MinimumX, MinimumY, MaximumZ));
                       Polygon.Points.Add(new Point(MinimumX, MaximumY, MaximumZ));
            
                       Polygon Polygon2 = new Polygon();
                       Polygon2.Points.Add(new Point(MaximumX, MaximumY, MinimumZ));
                       Polygon2.Points.Add(new Point(MaximumX, MinimumY, MinimumZ));
                       Polygon2.Points.Add(new Point(MaximumX, MinimumY, MaximumZ));
                       Polygon2.Points.Add(new Point(MaximumX, MaximumY, MaximumZ));
            
                       RebarGroup RebarGroup = new RebarGroup();
                       RebarGroup.Polygons.Add(Polygon);
                       RebarGroup.Polygons.Add(Polygon2);
                       RebarGroup.RadiusValues.Add(40.0);
                       RebarGroup.SpacingType = RebarGroup.RebarGroupSpacingTypeEnum.SPACING_TYPE_TARGET_SPACE;
                       RebarGroup.Spacings.Add(30.0);
                       RebarGroup.ExcludeType = RebarGroup.ExcludeTypeEnum.EXCLUDE_TYPE_BOTH;
                       RebarGroup.Father = Beam;
                       RebarGroup.Name = "RebarGroup";
                       RebarGroup.Class = 3;
                       RebarGroup.Size = "12";
                       RebarGroup.NumberingSeries.StartNumber = 0;
                       RebarGroup.NumberingSeries.Prefix = "Group";
                       RebarGroup.Grade = "A500HW";
                       RebarGroup.StartHook.Shape = RebarHookData.RebarHookShapeEnum.CUSTOM_HOOK;
                       RebarGroup.StartHook.Angle = -90;
                       RebarGroup.StartHook.Length = 3;
                       RebarGroup.StartHook.Radius = 20;
                       RebarGroup.EndHook.Shape = RebarHookData.RebarHookShapeEnum.CUSTOM_HOOK;
                       RebarGroup.EndHook.Angle = -90;
                       RebarGroup.EndHook.Length = 3;
                       RebarGroup.EndHook.Radius = 20;
                       RebarGroup.OnPlaneOffsets.Add(25.0);
                       RebarGroup.OnPlaneOffsets.Add(10.0);
                       RebarGroup.OnPlaneOffsets.Add(25.0);
                       RebarGroup.StartPointOffsetType = Reinforcement.RebarOffsetTypeEnum.OFFSET_TYPE_COVER_THICKNESS;
                       RebarGroup.StartPointOffsetValue = 20;
                       RebarGroup.EndPointOffsetType = Reinforcement.RebarOffsetTypeEnum.OFFSET_TYPE_COVER_THICKNESS;
                       RebarGroup.EndPointOffsetValue = 60;
                       RebarGroup.FromPlaneOffset = 40;
            
                       RebarGroup.Insert();
            
                       RebarGroup.Name = "Modified Group 1";
                       RebarGroup.Modify();
                   }
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.Structures.Model.RebarGroup.#ctor">
            <summary> Initializes a new rebar group instance with empty attributes. </summary>
        </member>
        <member name="M:Tekla.Structures.Model.RebarGroup.Insert">
            <summary> Inserts the rebar group into the model database. All the attributes must be set. </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.RebarGroup.Select">
            <summary> Selects a rebar group from the model database. The reinforcement identifier must be set. </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.RebarGroup.Modify">
            <summary>
            Modifies the existing rebar group in the model database to match the current one. 
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.RebarGroup.Delete">
            <summary> Deletes the rebar group instance with the given identifier from the model database. </summary>
            <returns>True on success.</returns>
        </member>
        <member name="P:Tekla.Structures.Model.RebarGroup.Polygons">
            <summary>
            An array list of polygons to define the reinforcing bar group shape. 
            Use 1 polygon when defining non-tapered or spiral rebar groups. 
            Use 2 to 99 polygons when defining tapered rebar groups.
            Each polygon must have an equal number of points. 
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarGroup.StirrupType">
            <summary>
            The type of the stirrup.
            The options are:
            <list type="bullet">
            <item><description>STIRRUP_TYPE_POLYGONAL</description></item>
            <item><description>STIRRUP_TYPE_SPIRAL</description></item>
            <item><description>STIRRUP_TYPE_TAPERED_CURVED</description></item>
            </list>
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.RebarGroup.RebarGroupStirrupTypeEnum">
            <summary> The different stirrup types. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarGroup.RebarGroupStirrupTypeEnum.STIRRUP_TYPE_POLYGONAL">
            <summary> The polygonal type of stirrup. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarGroup.RebarGroupStirrupTypeEnum.STIRRUP_TYPE_SPIRAL">
            <summary> The spiral type of stirrup. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarGroup.RebarGroupStirrupTypeEnum.STIRRUP_TYPE_TAPERED_CURVED">
            <summary> The tapered curved type of stirrup. Three polygons have to be defined. </summary>
        </member>
        <member name="T:Tekla.Structures.Model.RebarMesh">
            <summary>
            The RebarMesh class represents a reinforcement mesh.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures.Geometry3d;
            
            public class Example
            {
                   public void Example1()
                   {
                       ContourPlate CP = new ContourPlate();
            
                       RebarMesh RebarMesh = new RebarMesh();
                       RebarMesh.MeshType = Tekla.Structures.Model.RebarMesh.RebarMeshTypeEnum.RECTANGULAR_MESH;
                       RebarMesh.Father = CP;
                       RebarMesh.StartPoint = new Point(3000, 0, 0);
                       RebarMesh.EndPoint = new Point(5000, 0, 0);
                       RebarMesh.CatalogName = "MyCatalog";
                       RebarMesh.LongitudinalSize = "6";
                       RebarMesh.CrossSize = "6";
                       RebarMesh.LeftOverhangCross = 20;
                       RebarMesh.LeftOverhangLongitudinal = 40;
                       RebarMesh.RightOverhangCross = 20;
                       RebarMesh.RightOverhangLongitudinal = 40;
                       RebarMesh.LongitudinalSpacingMethod = RebarMesh.RebarMeshSpacingMethodEnum.SPACING_TYPE_SAME_DISTANCE;
                       RebarMesh.LongitudinalDistances.Add(50.0);
                       RebarMesh.CrossDistances.Add(20.0);
                       RebarMesh.Name = "Mesh Test";
                       RebarMesh.Class = 7;
                       RebarMesh.NumberingSeries.StartNumber = 0;
                       RebarMesh.NumberingSeries.Prefix = "Mesh";
                       RebarMesh.Grade = "B500K";
                       RebarMesh.OnPlaneOffsets.Add(10.0);
                       RebarMesh.FromPlaneOffset = -50;
                       RebarMesh.StartPointOffsetType = Reinforcement.RebarOffsetTypeEnum.OFFSET_TYPE_COVER_THICKNESS;
                       RebarMesh.StartPointOffsetValue = 10;
                       RebarMesh.CutByFatherPartCuts = false;
                       RebarMesh.CrossBarLocation = Tekla.Structures.Model.RebarMesh.RebarMeshCrossBarLocationEnum.LOCATION_TYPE_ABOVE;
                       RebarMesh.Length = 1500;
                       RebarMesh.Width = 3500;  
            
                       RebarMesh.Insert();
            
                       RebarMesh.Grade = "B600KX";
                       RebarMesh.LongitudinalSize = "8";
                       RebarMesh.RightOverhangLongitudinal = 75;
                       RebarMesh.Length = 1800;
                       RebarMesh.Width = 3800;
            
                       RebarMesh.Modify();
                   }
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.Structures.Model.RebarMesh.#ctor">
            <summary>
            Initializes a new mesh instance with empty attributes.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.RebarMesh.Insert">
            <summary>
            Inserts the reinforcement mesh into the model database. All the attributes must be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.RebarMesh.Select">
            <summary>
            Selects a reinforcement mesh from the model database. The reinforcement identifier must be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.RebarMesh.Modify">
            <summary>
            Modifies the existing reinforcement mesh in the model database to match the current one. 
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.RebarMesh.Delete">
            <summary>
            Deletes the reinforcement mesh instance with the given identifier from the model database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="P:Tekla.Structures.Model.RebarMesh.MeshType">
            <summary>
            The type of the reinforcement mesh. The options are:
            <list type="bullet">
            <item><description>RECTANGULAR_MESH</description></item>
            <item><description>POLYGON_MESH</description></item>
            <item><description>BENT_MESH</description></item>
            </list>
            </summary>
            <remarks>It is not possible to change the type of existing rebar meshes.</remarks>
        </member>
        <member name="P:Tekla.Structures.Model.RebarMesh.LongitudinalSpacingMethod">
            <summary>
            The type of spacing between rebar mesh bars. Used both for longitudinal and crossing bars.
            The options are (RebarMesh.RebarMeshSpacingMethodEnum.):
            <list type="bullet">
            <item><description>SPACING_TYPE_SAME_DISTANCE</description></item>
            <item><description>SPACING_TYPE_MULTIPLE_VARYING_DISTANCES</description></item>
            </list>
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarMesh.Polygon">
            <summary>
            The polygon of the mesh. 
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarMesh.LongitudinalDistances">
            <summary>
            The longitudinal spacing double value(s). 
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarMesh.CrossDistances">
            <summary>
            The crossing spacing double value(s). 
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarMesh.FromPlaneOffset">
            <summary>
            The offset value from the part surface applied in both sides.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarMesh.StartFromPlaneOffset">
            <summary>
            The start offset value from the part surface.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarMesh.EndFromPlaneOffset">
            <summary>
            The end offset value from the part surface.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarMesh.StartPoint">
            <summary>
            The start point of the direction in which the longitudinal bars are distributed.
            </summary> 
        </member>
        <member name="P:Tekla.Structures.Model.RebarMesh.EndPoint">
            <summary>
            The end point of the direction in which the longitudinal bars are distributed.
            </summary> 
        </member>
        <member name="P:Tekla.Structures.Model.RebarMesh.LeftOverhangLongitudinal">
            <summary>
            The overhang of the longitudinal bar's left side.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarMesh.LeftOverhangCross">
            <summary>
            The overhang of the crossing part's left side.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarMesh.RightOverhangLongitudinal">
            <summary>
            The right overhang of the longitudinal bar.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarMesh.RightOverhangCross">
            <summary>
            The right overhang of the crossing bar.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarMesh.LongitudinalSize">
            <summary>
            The size of the longitudinal rebar.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarMesh.CrossSize">
            <summary>
            The size of the crossing rebar.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarMesh.Width">
            <summary>
            The width of the rectangle rebar mesh.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarMesh.Length">
            <summary>
            The length of the rectangle rebar mesh.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarMesh.CutByFatherPartCuts">
            <summary>
            Defines whether the rebar mesh is cut by father part cuts or not.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarMesh.CatalogName">
            <summary>
            The name of the rebar mesh catalog.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarMesh.CrossBarLocation">
            <summary>
            Defines the location of the crossing bars.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarMesh.StartHook">
            <summary> The hook at the beginning of the reinforcing. </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarMesh.EndHook">
            <summary> The hook at the end of the reinforcing. </summary>
        </member>
        <member name="T:Tekla.Structures.Model.RebarMesh.RebarMeshTypeEnum">
            <summary>
            The different types of reinforcement meshes.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarMesh.RebarMeshTypeEnum.UNKNOWN_MESH">
            <summary>
            The type of the mesh is unknown.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarMesh.RebarMeshTypeEnum.RECTANGULAR_MESH">
            <summary>
             The shape of the mesh is rectangular. 
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarMesh.RebarMeshTypeEnum.POLYGON_MESH">
            <summary>
             The shape of the mesh is a polygon. Create rectangular meshes also as polygon meshes. 
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarMesh.RebarMeshTypeEnum.BENT_MESH">
            <summary>
            The shape of the mesh is bent.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.RebarMesh.RebarMeshSpacingMethodEnum">
            <summary>
            The ways to distribute the reinforcing bars with different spacings.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarMesh.RebarMeshSpacingMethodEnum.SPACING_TYPE_UNDEFINED">
            <summary>
            The undefined spacing type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarMesh.RebarMeshSpacingMethodEnum.SPACING_TYPE_SAME_DISTANCE">
            <summary>
            Distributes the bars using the same distance for all bars.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarMesh.RebarMeshSpacingMethodEnum.SPACING_TYPE_MULTIPLE_VARYING_DISTANCES">
            <summary>
            Varying distribution of the bars.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.RebarMesh.RebarMeshCrossBarLocationEnum">
            <summary>
            The ways to locate the crossing bars.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarMesh.RebarMeshCrossBarLocationEnum.LOCATION_TYPE_UNDEFINED">
            <summary>
            The undefined location type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarMesh.RebarMeshCrossBarLocationEnum.LOCATION_TYPE_ABOVE">
            <summary>
            The location of the crossing bars is above the longitudinal bars.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarMesh.RebarMeshCrossBarLocationEnum.LOCATION_TYPE_BELOW">
            <summary>
            The location of the crossing bars is below the longitudinal bars.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotRebarMesh_t">
            <summary> Serialization structure for Mesh. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarMesh_t.Reinforcement">
            <summary> The base class for all reinforcements. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarMesh_t.MeshType">
            <summary> The type of the mesh. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarMesh_t.Polygon">
            <summary> The polygon of the mesh. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarMesh_t.LongitudinalSpacingMethod">
            <summary> The spacing type of longitudinal bars. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarMesh_t.nLongitudinalDistances">
            <summary> The number of longitudinal spacing values. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarMesh_t.aLongitudinalDistanceMultipliers">
            <summary> Longitudinal spacing multiplier value(s).  </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarMesh_t.aLongitudinalDistances">
            <summary> The  longitudinal spacing values. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarMesh_t.nCrossDistances">
            <summary> The number of crossing spacing values. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarMesh_t.aCrossDistanceMultipliers">
            <summary> Crossing spacing multiplier value(s).  </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarMesh_t.aCrossDistances">
            <summary> The  crossing spacing values. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarMesh_t.StartPoint">
            <summary> The start point of the direction in which the bars are distributed. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarMesh_t.EndPoint">
            <summary> The end point of the direction in which the bars are distributed. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarMesh_t.LeftOverhangCross">
            <summary> The secondary bar�s overhang on left. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarMesh_t.LeftOverhangLongitudinal">
            <summary> The main bar�s overhang on left. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarMesh_t.RightOverhangCross">
            <summary> The secondary bar�s overhang on right. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarMesh_t.RightOverhangLongitudinal">
            <summary> The main bar�s overhang on right. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarMesh_t.CrossSize">
            <summary> The crossing bar�s size. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarMesh_t.LongitudinalSize">
            <summary> The longitudinal bar�s size. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarMesh_t.Width">
            <summary> The width of the rebar mesh. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarMesh_t.Length">
            <summary> The length of the rebar mesh. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarMesh_t.CatalogName">
            <summary> The name of the rebar mesh catalog </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarMesh_t.CrossBarLocation">
            <summary> The location of the crossing bars. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarMesh_t.CutByFatherPartCuts">
            <summary> Defines if rebar mesh is cut by father part cuts or not. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarMesh_t.StartHook">
            <summary> The hook at the beginning of the reinforcing. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarMesh_t.EndHook">
            <summary> The hook at the end of the reinforcing. </summary>
        </member>
        <member name="T:Tekla.Structures.Model.RebarGeometry">
            <summary>
            The RebarGeometry class represents a single physical reinforcing bar - the building block of 
            a mesh, a rebar group and even a single rebar.
            It contains the physical reinforcing bar points in 3D space.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures.Geometry3d;
            
            using System;
            using System.Collections;
            
            public class Example
            {
                   public void Example1()
                   {
                       RebarGroup Group = new RebarGroup();
                       ArrayList RebarGeoms = Group.GetRebarGeometries(true);
                       foreach (RebarGeometry Rebar in RebarGeoms)
                       {
                           if (Rebar != null)
                           {
                               Console.WriteLine("Wire {0} has the following points:");
                               foreach (Point p in Rebar.Shape.Points)
                               {
                                   Console.WriteLine("[{0},{1},{2}]", p.X, p.Y, p.Z);
                               }
                           }
                       }
                   }
            }
            </code>
            </example>
        </member>
        <member name="F:Tekla.Structures.Model.RebarGeometry.WIRE_TRANSFER_STACK_SIZE">
            <summary> Constant indicating the number of rebar geometries transferred at once from Tekla Structures. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarGeometry.MAX_REBAR_POSITION_POINTS">
            <summary> Constant indicating the maximum number of position points for a wire. </summary>
        </member>
        <member name="M:Tekla.Structures.Model.RebarGeometry.#ctor">
            <summary>
            The constructor for RebarGeometry. The class requires index which 
            indicates the position in the rebar group. Index starts with 1.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.RebarGeometry.FromStruct(Tekla.Structures.ModelInternal.dotWire_t,System.Int32)">
            <summary>
            Internal method for transforming struct received over .NET interface into RebarGeometry class.
            NOTE: The struct transfers several geometries at once in order to minimize overhead. 
            Therefore the struct does not correspond 1-to-1 to the RebarGeometry class.
            </summary>
            <param name="DotWire">The struct from which rebar data is copied.</param>
            <param name="StructIndex">Index from which the copying is started</param>
        </member>
        <member name="M:Tekla.Structures.Model.RebarGeometry.AddFromStruct(Tekla.Structures.ModelInternal.dotWire_t,System.Int32)">
            <summary>
            Internal method for transforming struct received over .NET interface into RebarGeometry class.
            NOTE: The struct adds geometry to existing one at once in order to minimize overhead. 
            Therefore the struct does not correspond 1-to-1 to the RebarGeometry class.
            </summary>
            <param name="DotWire">The struct from which rebar data is copied.</param>
            <param name="StructIndex">Index from which the copying is started</param>
        </member>
        <member name="P:Tekla.Structures.Model.RebarGeometry.Shape">
            <summary>The physical points of the reinforcing bar.</summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarGeometry.Diameter">
            <summary>The diameter of the wire.</summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarGeometry.BendingRadiuses">
            <summary>The bending radiuses of the wire.</summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotWire_t">
            <summary>
            Serialization structure for RebarGroup inner rebars.
            Stores several wires at a time in order to reduce remote call overhead.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWire_t.GroupIdentifier">
            <summary> Identifier of the load group for which we search the inner rebars </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWire_t.RangeStart">
            <summary> Range start tells the first wire index. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWire_t.RangeEnd">
            <summary> Range end tells the last wire index. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWire_t.More">
            <summary> This variable tells whether there are more rebars to fetch. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWire_t.WithHooks">
            <summary> This variable tells whether the hooks should be included in the geometry or not. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWire_t.WithoutClashes">
            <summary> This variable tells whether the overlapped geometry is returned. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWire_t.anPositionPoints">
            <summary> Indicates the number of polygon points for each wire. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWire_t.aPositionPoints">
            <summary> Position points for a wire. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWire_t.aBendingRadiuses">
            <summary> The bending radiuses of the wire </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWire_t.aDiameter">
            <summary> The diameter of the wire. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWire_t.PolygonRangeStart">
            <summary> This variable tells first polygon point index in wire. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWire_t.nPointsInPolygon">
            <summary> This variable tells points there are in wire. </summary>
        </member>
        <member name="T:Tekla.Structures.Model.RebarHookData">
            <summary>
            The RebarHookData class defines the hook at the end of a reinforcing bar.
            Hooks are used for anchoring purposes.  
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.RebarHookData.#ctor">
            <summary>
            Instantiates a rebar hook data instance with empty members.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarHookData.Shape">
            <summary>
            Defines the shape of the hook. The options are:
            <list type="bullet">
            <item><description>NO_HOOK. Sets the angle, radius and length to 0.</description></item>
            <item><description>HOOK_90_DEGREES.</description></item>
            <item><description>HOOK_135_DEGREES.</description></item>
            <item><description>HOOK_180_DEGREES.</description></item>
            <item><description>CUSTOM_HOOK. The angle, radius and length values have to be set manually.</description></item>
            </list>
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarHookData.Angle">
            <summary>
            The angle of the hook.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarHookData.Radius">
            <summary>
            The bending radius of the hook. The value is between -180 and +180 degrees.        
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarHookData.Length">
            <summary>
            The length of the straight part of the hook. 
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.RebarHookData.RebarHookShapeEnum">
            <summary>
            The different hook shapes.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarHookData.RebarHookShapeEnum.NO_HOOK">
            <summary>
            No hook.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarHookData.RebarHookShapeEnum.HOOK_90_DEGREES">
            <summary>
            The standard 90-degree hook.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarHookData.RebarHookShapeEnum.HOOK_135_DEGREES">
            <summary>
            The standard 135-degree hook.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarHookData.RebarHookShapeEnum.HOOK_180_DEGREES">
            <summary>
            The standard 180-degree hook.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarHookData.RebarHookShapeEnum.CUSTOM_HOOK">
            <summary>
            The custom hook shape to manually define the angle, radius and length of a hook.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotRebarHookData_t">
            <summary> Serialization structure for RebarHookData. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarHookData_t.Angle">
            <summary> The angle of the hook. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarHookData_t.Radius">
            <summary> The bending radius of the hook.  </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarHookData_t.Length">
            <summary> The length of the straight part of the hook.  </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarHookData_t.Shape">
            <summary> The shape of the hook. </summary>
        </member>
        <member name="T:Tekla.Structures.Model.RebarSplice">
            <summary>
            The RebarSplice class represents a splice between two reinforcements.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures.Geometry3d;
            using System;
            
            public class Example
            {
                   public void Example1()
                   {
                       Beam Beam = new Beam(new Point(5000, 15000, 0), new Point(6000, 15000, 0));
                       Beam.Profile.ProfileString = "250*250";
                       Beam.Material.MaterialString = "K40-1";
                       Beam.Finish = "PAINT";
                       Beam.Insert();
            
                       double MinimumX = Beam.GetSolid().MinimumPoint.X;
                       double MinimumY = Beam.GetSolid().MinimumPoint.Y;
                       double MinimumZ = Beam.GetSolid().MinimumPoint.Z;
                       double MaximumX = Beam.GetSolid().MaximumPoint.X; 
                       double MaximumY = Beam.GetSolid().MaximumPoint.Y;
                       double MaximumZ = Beam.GetSolid().MaximumPoint.Z;
                       double MidX = (MinimumX + MaximumX) / 2.0;
            
                       Polygon Polygon = new Polygon();
                       Polygon.Points.Add(new Point(MinimumX, MinimumY, MaximumZ));
                       Polygon.Points.Add(new Point(MinimumX, MinimumY, MinimumZ));
                       Polygon.Points.Add(new Point(MidX, MinimumY, MinimumZ));
            
                       Polygon Polygon2 = new Polygon();
                       Polygon2.Points.Add(new Point(MinimumX, MaximumY, MaximumZ));
                       Polygon2.Points.Add(new Point(MinimumX, MaximumY, MinimumZ));
                       Polygon2.Points.Add(new Point(MidX, MaximumY, MinimumZ));
            
                       RebarGroup RebarGroup1 = new RebarGroup();
                       RebarGroup1.Polygons.Add(Polygon);  
                       RebarGroup1.Polygons.Add(Polygon2);
                       RebarGroup1.RadiusValues.Add(40.0);
                       RebarGroup1.SpacingType = RebarGroup.RebarGroupSpacingTypeEnum.SPACING_TYPE_TARGET_SPACE;
                       RebarGroup1.Spacings.Add(30.0);
                       RebarGroup1.ExcludeType = RebarGroup.ExcludeTypeEnum.EXCLUDE_TYPE_BOTH;
                       RebarGroup1.Father = Beam;
                       RebarGroup1.Name = "RebarGroup1";
                       RebarGroup1.Class = 3;
                       RebarGroup1.Size = "12";
                       RebarGroup1.NumberingSeries.StartNumber = 0;
                       RebarGroup1.NumberingSeries.Prefix = "Group";
                       RebarGroup1.Grade = "A500HW";
                       RebarGroup1.StartHook.Shape = RebarHookData.RebarHookShapeEnum.NO_HOOK;
                       RebarGroup1.StartHook.Angle = -90;
                       RebarGroup1.StartHook.Length = 3;
                       RebarGroup1.StartHook.Radius = 20;
                       RebarGroup1.EndHook.Shape = RebarHookData.RebarHookShapeEnum.NO_HOOK;
                       RebarGroup1.EndHook.Angle = -90;
                       RebarGroup1.EndHook.Length = 3;
                       RebarGroup1.EndHook.Radius = 20;
                       RebarGroup1.OnPlaneOffsets.Add(25.0);
                       RebarGroup1.OnPlaneOffsets.Add(25.0);
                       RebarGroup1.OnPlaneOffsets.Add(25.0);
                       RebarGroup1.StartPointOffsetType = Reinforcement.RebarOffsetTypeEnum.OFFSET_TYPE_COVER_THICKNESS;
                       RebarGroup1.StartPointOffsetValue = 20;
                       RebarGroup1.EndPointOffsetType = Reinforcement.RebarOffsetTypeEnum.OFFSET_TYPE_COVER_THICKNESS;
                       RebarGroup1.EndPointOffsetValue = 20;
                       RebarGroup1.FromPlaneOffset = 40;
            
                       RebarGroup1.Insert();
            
                       Polygon Polygon3 = new Polygon();
                       Polygon3.Points.Add(new Point(MidX, MinimumY, MinimumZ));
                       Polygon3.Points.Add(new Point(MaximumX, MinimumY, MinimumZ));
                       Polygon3.Points.Add(new Point(MaximumX, MinimumY, MaximumZ));
            
                       Polygon Polygon4 = new Polygon();
                       Polygon4.Points.Add(new Point(MidX, MaximumY, MinimumZ));
                       Polygon4.Points.Add(new Point(MaximumX, MaximumY, MinimumZ));
                       Polygon4.Points.Add(new Point(MaximumX, MaximumY, MaximumZ));
            
                       RebarGroup RebarGroup2 = new RebarGroup();
                       RebarGroup2.Polygons.Add(Polygon3);
                       RebarGroup2.Polygons.Add(Polygon4);
                       RebarGroup2.RadiusValues.Add(40.0);
                       RebarGroup2.SpacingType = RebarGroup.RebarGroupSpacingTypeEnum.SPACING_TYPE_TARGET_SPACE;
                       RebarGroup2.Spacings.Add(30.0);
                       RebarGroup2.ExcludeType = RebarGroup.ExcludeTypeEnum.EXCLUDE_TYPE_BOTH;
                       RebarGroup2.Father = Beam;
                       RebarGroup2.Name = "RebarGroup2";
                       RebarGroup2.Class = 3;
                       RebarGroup2.Size = "12";
                       RebarGroup2.NumberingSeries.StartNumber = 0;
                       RebarGroup2.NumberingSeries.Prefix = "Group";
                       RebarGroup2.Grade = "A500HW";
                       RebarGroup2.StartHook.Shape = RebarHookData.RebarHookShapeEnum.NO_HOOK;
                       RebarGroup2.StartHook.Angle = -90;
                       RebarGroup2.StartHook.Length = 3;
                       RebarGroup2.StartHook.Radius = 20;
                       RebarGroup2.EndHook.Shape = RebarHookData.RebarHookShapeEnum.NO_HOOK;
                       RebarGroup2.EndHook.Angle = -90;
                       RebarGroup2.EndHook.Length = 3;
                       RebarGroup2.EndHook.Radius = 20;
                       RebarGroup2.OnPlaneOffsets.Add(25.0);
                       RebarGroup2.OnPlaneOffsets.Add(25.0);
                       RebarGroup2.OnPlaneOffsets.Add(25.0);
                       RebarGroup2.StartPointOffsetType = Reinforcement.RebarOffsetTypeEnum.OFFSET_TYPE_COVER_THICKNESS;
                       RebarGroup2.StartPointOffsetValue = 20;
                       RebarGroup2.EndPointOffsetType = Reinforcement.RebarOffsetTypeEnum.OFFSET_TYPE_COVER_THICKNESS;
                       RebarGroup2.EndPointOffsetValue = 20;
                       RebarGroup2.FromPlaneOffset = 40;
            
                       RebarGroup2.Insert();
            
                       RebarSplice RebarSplice = new RebarSplice(RebarGroup1, RebarGroup2);
            
                       if(!RebarSplice.Insert())
                           Console.WriteLine("Insert failed!");
                   }
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.Structures.Model.RebarSplice.#ctor(Tekla.Structures.Model.RebarGroup,Tekla.Structures.Model.RebarGroup)">
            <summary>
            Initializes a new rebar splice instance with rebar groups to be joined.
            </summary>
            <param name="InputRebar1">The first rebar group to be used.</param>
            <param name="InputRebar2">The second rebar group to be used.</param>
        </member>
        <member name="M:Tekla.Structures.Model.RebarSplice.#ctor">
            <summary>
            Initializes a new rebar splice instance.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.RebarSplice.Insert">
            <summary>
            Inserts the rebar splice into the model database. All the attributes must be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.RebarSplice.Select">
            <summary>
            Selects a rebar splice from the model database. The splice identifier must be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.RebarSplice.Modify">
            <summary>
            Modifies the existing rebar splice in the model database to match the current one.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.RebarSplice.Delete">
            <summary>
            Deletes the rebar splice instance with the given identifier from the model database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="P:Tekla.Structures.Model.RebarSplice.RebarGroup1">
            <summary>
            The first one of the joined reinforcements (picked first).
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarSplice.RebarGroup2">
            <summary>
            The second one of the joined reinforcements (picked second).
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarSplice.Type">
            <summary>
            The type of the splice (can be a lap, weld or muff splice).
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarSplice.LapLength">
            <summary>
            The lap length of the lap type splice.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarSplice.Offset">
            <summary>
            The distance from the end point of the first bar along the bar length.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarSplice.Clearance">
            <summary>
            The clearance between joined bars in the case of the lap type splice.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarSplice.BarPositions">
            <summary>
            Value 0: Joined bars on top of each other in the case of the lap type splice.
            Value 1: Joined bars parallel to each other in the case of the lap type splice. 
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.RebarSplice.RebarSpliceTypeEnum">
            <summary> 
            The splice types.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarSplice.RebarSpliceTypeEnum.SPLICE_TYPE_LAP_RIGHT">
            <summary>
            The first (left) bar extends over the second (right) bar. 
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarSplice.RebarSpliceTypeEnum.SPLICE_TYPE_LAP_LEFT">
            <summary> 
            The second (right) bar extends over the first (left) bar.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarSplice.RebarSpliceTypeEnum.SPLICE_TYPE_LAP_BOTH">
            <summary> 
            Both bars extend over each other.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarSplice.RebarSpliceTypeEnum.SPLICE_TYPE_MUFF">
            <summary> 
            The bar ends are joined with a muff.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarSplice.RebarSpliceTypeEnum.SPLICE_TYPE_WELD">
            <summary> 
            The bar ends are joined with a weld.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.RebarSplice.RebarSpliceBarPositionsEnum">
            <summary> 
            The bar group positions in the splice.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarSplice.RebarSpliceBarPositionsEnum.SPLICE_BAR_ON_TOP">
            <summary>
            Joined bars on top of each other.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarSplice.RebarSpliceBarPositionsEnum.SPLICE_BAR_PARALLEL">
            <summary> 
            Joined bars parallel to each other.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotRebarSplice_t">
            <summary>
            Serialization structure for RebarSplice.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarSplice_t.ModelObject">
            <summary>
            Base class.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarSplice_t.Reinforcement1">
            <summary>
            The first reinforcement connected to the splice.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarSplice_t.Reinforcement2">
            <summary>
            The second reinforcement connected to the splice.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarSplice_t.Type">
            <summary>
            The type of splice.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarSplice_t.LapLength">
            <summary>
            Lap length of the lap type splice.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarSplice_t.Offset">
            <summary>
            Distance from the splice definition point along bar length.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarSplice_t.Clearance">
            <summary>
            Clearance between joined bars in case of the lap type splice.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarSplice_t.BarPositions">
            <summary>
            Value 0: Joined bars on top of each other in case of the lap type splice.
            Value 1: Joined bars parallel to each other in case of the lap type splice. 
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotReinforcement_t">
            <summary>
            Serialization structure for Reinforcement.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotReinforcement_t.ModelObject">
            <summary>
            Base class.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotReinforcement_t.Father">
            <summary>
            The father part of the reinforcement.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotReinforcement_t.aSize">
            <summary>
            The size of the reinforcement.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotReinforcement_t.aGrade">
            <summary>
            The steel grade of the reinforcing bar.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotReinforcement_t.aName">
            <summary>
            Name of the reinforcement.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotReinforcement_t.Class">
            <summary>
            Class of the reinforcement. 
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotReinforcement_t.NumberingSeries">
            <summary>
            Numbering series of the reinforcement.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotReinforcement_t.nOnPlaneOffsetValues">
            <summary>
            Number of offset values.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotReinforcement_t.aOnPlaneOffsets">
            <summary>
            The offset value for each leg on the same plane as the bar. 
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotReinforcement_t.StartFromPlaneOffset">
            <summary>
            The start offset value from the part surface. 
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotReinforcement_t.StartPointOffsetType">
            <summary>
            The type of the start point offset.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotReinforcement_t.StartPointOffsetValue">
            <summary>
            The concrete cover thickness or leg length at the first end of the bar.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotReinforcement_t.EndPointOffsetType">
            <summary>
            The type of the end point offset.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotReinforcement_t.EndPointOffsetValue">
            <summary>
            The concrete cover thickness or leg length at the second end of the bar.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotReinforcement_t.nRadiusValues">
            <summary>
            Number of the radiusvalues.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotReinforcement_t.aRadiusValues">
            <summary>
            The radius value(s) of the bends in the bar.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotReinforcement_t.ClientId">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotReinforcement_t.EndFromPlaneOffset">
            <summary>
            The end offset value from the part surface. 
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotReinforcement_t.DeformingType">
            <summary>
            Deforming type of the reinforcement.
            Used to define the reinforecment deforming during insert. 
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.SingleRebar">
            <summary>
            The SingleRebar class represents a single reinforcing bar.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures.Geometry3d;
            
            using System;
            using System.Collections;
            
            public class Example
            {
                   public void Example1()
                   {
                       Beam Beam = new Beam(new Point(5000, 7000, 0), new Point(6000, 7000, 0));
                       Beam.Profile.ProfileString = "250*250";
                       Beam.Material.MaterialString = "K40-1";
                       Beam.Finish = "PAINT";
                       Beam.Insert();
            
                       double MinimumY = Beam.GetSolid().MinimumPoint.Y;
                       double MinimumX = Beam.GetSolid().MinimumPoint.X;
                       double MinimumZ = Beam.GetSolid().MinimumPoint.Z;
                       double MaximumY = Beam.GetSolid().MaximumPoint.Y;
                       double MaximumX = Beam.GetSolid().MaximumPoint.X;
                       double MaximumZ = Beam.GetSolid().MaximumPoint.Z;
            
                       Polygon Polygon = new Polygon();
                       Polygon.Points.Add(new Point(MinimumX, MaximumY, MaximumZ));
                       Polygon.Points.Add(new Point(MaximumX, MaximumY, MaximumZ));
            
                       SingleRebar SingleRebar = new SingleRebar();
                       SingleRebar.Polygon = Polygon;
                       SingleRebar.Father = Beam;
                       SingleRebar.Name = "SingleRebar";
                       SingleRebar.Class = 9;
                       SingleRebar.Size = "12";
                       SingleRebar.NumberingSeries.StartNumber = 0;
                       SingleRebar.NumberingSeries.Prefix = "Single";
                       SingleRebar.Grade = "A500HW";
                       SingleRebar.OnPlaneOffsets = new ArrayList();
                       SingleRebar.OnPlaneOffsets.Add(25.00);
                       SingleRebar.StartHook.Angle = -90;
                       SingleRebar.StartHook.Length = 10;
                       SingleRebar.StartHook.Radius = 10;
                       SingleRebar.StartHook.Shape = RebarHookData.RebarHookShapeEnum.CUSTOM_HOOK;      
                       SingleRebar.EndHook.Angle = 90;
                       SingleRebar.EndHook.Length = 10;
                       SingleRebar.EndHook.Radius = 10;
                       SingleRebar.EndHook.Shape = RebarHookData.RebarHookShapeEnum.CUSTOM_HOOK;
            
                       if(!SingleRebar.Insert())
                           Console.WriteLine("Insert failed!");
                   }
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.Structures.Model.SingleRebar.#ctor">
            <summary>
            Initializes a new single rebar instance with empty attributes.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.SingleRebar.Insert">
            <summary>
            Inserts the single rebar into the model database. All the attributes must be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.SingleRebar.Select">
            <summary>
            Selects a single rebar from the model database. The reinforcement identifier must be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.SingleRebar.Modify">
            <summary>
            Modifies the existing single rebar in the model database to match the current one.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.SingleRebar.Delete">
            <summary>
            Deletes the single rebar instance with the given identifier from the model database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="P:Tekla.Structures.Model.SingleRebar.Size">
            <summary>
            The size of the reinforcement.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.SingleRebar.StartHook">
            <summary>
            The hook at the beginning of the reinforcing bar.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.SingleRebar.EndHook">
            <summary>
            The hook at the end of the reinforcing bar.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.SingleRebar.Polygon">
            <summary>
            The polygon of the reinforcing bar.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotSingleRebar_t">
            <summary>
            Serialization structure for SingleRebar.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSingleRebar_t.Reinforcement">
            <summary>
            The base class for all reinforcements.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSingleRebar_t.StartHook">
            <summary>
            The hook at the beginning of the reinforcing bar.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSingleRebar_t.EndHook">
            <summary>
            The hook at the end of the reinforcing bar.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSingleRebar_t.Polygon">
            <summary>
            The polygon.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.RebarStrand">
            <summary>
            The RebarStrand class represents prestressed strands for concrete parts.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures.Geometry3d;
            using System;
            
            public class Example
            {
                   public void Example1()
                   {
                       Beam Beam = new Beam(new Point(5000, 14000, 0), new Point(6000, 14000, 0));
                       Beam.Profile.ProfileString = "250*250";
                       Beam.Material.MaterialString = "K40-1";
                       Beam.Finish = "PAINT";
                       Beam.Insert();
            
                       double MinimumX = Beam.GetSolid().MinimumPoint.X;
                       double MinimumY = Beam.GetSolid().MinimumPoint.Y;
                       double MinimumZ = Beam.GetSolid().MinimumPoint.Z;
                       double MaximumX = Beam.GetSolid().MaximumPoint.X; 
                       double MaximumY = Beam.GetSolid().MaximumPoint.Y;
                       double MaximumZ = Beam.GetSolid().MaximumPoint.Z;
            
                       Polygon Polygon1 = new Polygon();
                       Polygon1.Points.Add(new Point(MinimumX, MaximumY, MinimumZ));
                       Polygon1.Points.Add(new Point(MinimumX, MaximumY, MaximumZ)); 
                       Polygon1.Points.Add(new Point(MinimumX, MinimumY, MaximumZ));
                       Polygon1.Points.Add(new Point(MinimumX, MinimumY, MinimumZ));
                       Polygon1.Points.Add(new Point(MinimumX, MaximumY, MinimumZ));
            
                       RebarStrand RebarStrand = new RebarStrand();
                       RebarStrand.Patterns.Add(Polygon1);        
                       RebarStrand.StartPoint = new Point(MinimumX, MinimumY, MinimumZ);
                       RebarStrand.EndPoint = new Point(MaximumX, MinimumY, MinimumZ);
                       RebarStrand.Father = Beam;
                       RebarStrand.Name = "Strand Test 1";
                       RebarStrand.Class = 3;
                       RebarStrand.Size = "10";
                       RebarStrand.NumberingSeries.StartNumber = 0;
                       RebarStrand.NumberingSeries.Prefix = "STRAND1";
                       RebarStrand.Grade = "B500K";
                       RebarStrand.RadiusValues.Add(30.0);
                       RebarStrand.PullPerStrand = 8000.0;
                       StrandUnbondingData Unbonding = new StrandUnbondingData();
                       Unbonding.FromEnd = 20;
                       Unbonding.FromStart = 20;
                       Unbonding.MiddleToEnd = 30;
                       Unbonding.MiddleToStart = 30;
                       Unbonding.StrandIndex = 1;
                       RebarStrand.Unbondings.Add(Unbonding);
                       StrandUnbondingData Unbonding2 = new StrandUnbondingData();
                       Unbonding2.FromEnd = 40;
                       Unbonding2.FromStart = 40;
                       Unbonding2.MiddleToEnd = 15;
                       Unbonding2.MiddleToStart = 15;
                       Unbonding2.StrandIndex = 2;
                       RebarStrand.Unbondings.Add(Unbonding2);
            
                       if(!RebarStrand.Insert())
                           Console.WriteLine("Insert failed!");
                   }
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.Structures.Model.RebarStrand.#ctor">
            <summary>
            Initializes a new rebar strand instance with empty attributes.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.RebarStrand.Insert">
            <summary>
            Inserts the strand into the model database. All the attributes must be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.RebarStrand.Select">
            <summary>
            Selects the strand from the model database. The reinforcement identifier must be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.RebarStrand.Modify">
            <summary>
            Modifies the existing strand in the model database to match the current one.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.RebarStrand.Delete">
            <summary>
            Deletes the strand instance with the given identifier from the model database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="P:Tekla.Structures.Model.RebarStrand.Size">
            <summary>
            The size of the reinforcement.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarStrand.PullPerStrand">
            <summary>
            The pull per strand (N).
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarStrand.Patterns">
            <summary>
            An array list of polygons that represents the patterns of the rebar strand.
            Give the strand positions in the same order as for the first pattern.
            The maximum number of patterns is 20.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarStrand.Unbondings">
            <summary>
            An array list of StrandUnbondingData items.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarStrand.StartPoint">
            <summary>
            The start point of the single strand (the start point and end point define the length of the strand).
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarStrand.EndPoint">
            <summary>
            The end point of the single strand (the start point and end point define the length of the strand).
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarStrand.OnPlaneOffsets">
            <summary> Not supported. </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotRebarStrand_t">
            <summary>
            Serialization structure for RebarStrand.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarStrand_t.Reinforcement">
            <summary>
            The base class for all reinforcements.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarStrand_t.PullPerStrand">
            <summary>
            Pull per strand (N).
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarStrand_t.nPatterns">
            <summary>
            The number of patterns.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarStrand_t.nPointsInPattern">
            <summary>
            The number of points in each pattern.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarStrand_t.aX">
            <summary>
            The x-coordinates of all points.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarStrand_t.aY">
            <summary>
            The y-coordinates of all points.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarStrand_t.aZ">
            <summary>
            The z-coordinates of all points.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarStrand_t.nUnbondings">
            <summary>
            The number of unbondings.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarStrand_t.aStrandIndex">
            <summary>
            Indexes of the strands.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarStrand_t.aFromStart">
            <summary>
            Unbondings from the start of the strand for each strand.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarStrand_t.aMiddleToStart">
            <summary>
            Unbondings from middle of the strand 
            to the start of the strand for each strand.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarStrand_t.aMiddleToEnd">
            <summary>
            Unbondings from middle of the strand to the end of the
            each strand.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarStrand_t.aFromEnd">
            <summary>
            Unbondings from end of the each strand.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarStrand_t.StartPoint">
            <summary>
            Startpoint of the strand.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarStrand_t.EndPoint">
            <summary>
            Endpoint of the strand.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.StrandUnbondingData">
            <summary>
            The StrandUnbondingData class represents the unbonding of a rebar strand.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Model;
            
            public class Example
            {
                   public void Example1()
                   {
                       StrandUnbondingData Unbonding = new StrandUnbondingData();
                       Unbonding.FromEnd = 20;
                       Unbonding.FromStart = 20;
                       Unbonding.MiddleToEnd = 30;
                       Unbonding.MiddleToStart = 30;
                       Unbonding.StrandIndex = 1;
                   }
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.Structures.Model.StrandUnbondingData.#ctor">
            <summary>
            Initializes a new strand unbonding data instance with empty attributes.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.StrandUnbondingData.StrandIndex">
            <summary>
            The index of the strand.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.StrandUnbondingData.FromStart">
            <summary>
            The unbonding from the start of the strand.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.StrandUnbondingData.MiddleToStart">
            <summary>
            The unbonding from the middle of the strand 
            to the start of the strand.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.StrandUnbondingData.MiddleToEnd">
            <summary>
            The unbonding from the middle of the strand to the end of the strand.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.StrandUnbondingData.FromEnd">
            <summary>
            The unbonding from the end of the strand.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.CDelegateSynchronized">
            <summary>
            CDelegateSynchronized includes all the platform invokable commands and synchronization to AKIT.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.ICDelegate">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportUIObjectSelect(Tekla.Structures.ModelInternal.dotUIModelObjectSelector_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pSelector"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportUIObjectPick(Tekla.Structures.ModelInternal.dotUIPicker_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pPicker"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportUIObjectsPick(Tekla.Structures.ModelInternal.dotUIPicker_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pPicker"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportTaskObjectAttach(Tekla.Structures.ModelInternal.dotTaskObjectAttacher_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pSelector"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportCreatePart(Tekla.Structures.ModelInternal.dotContour_t@,Tekla.Structures.ModelInternal.dotPart_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pP1"></param>
            <param name="pPart"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportCompareObjects(System.Int32,System.Int32)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="ObjectId"></param>
            <param name="ObjectToCompareId"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportCreateBoltGroup(Tekla.Structures.ModelInternal.dotBoltShapeData_t@,Tekla.Structures.ModelInternal.dotBoltGroup_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pBoltShapeData"></param>
            <param name="pBoltGroup"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportCreateBooleanPart(Tekla.Structures.ModelInternal.dotBooleanPart_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pBooleanPart"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportCreateFittingOrCutPlane(Tekla.Structures.ModelInternal.dotFittingOrCutPlane_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pFittingOrCutPlane"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportCreateEdgeChamfer(Tekla.Structures.ModelInternal.dotEdgeChamfer_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pEdgeChamfer"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportCreateSurfaceTreatment(Tekla.Structures.ModelInternal.dotSurfaceTreatment_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pTreatment"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportCreateWeld(Tekla.Structures.ModelInternal.dotWeld_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pWeld"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportCreateSingleRebar(Tekla.Structures.ModelInternal.dotSingleRebar_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pSingleRebar"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportCreateRebarGroup(Tekla.Structures.ModelInternal.dotRebarGroup_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pRebarGroup"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportCreateRebarMesh(Tekla.Structures.ModelInternal.dotRebarMesh_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pRebarMesh"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportCreateRebarStrand(Tekla.Structures.ModelInternal.dotRebarStrand_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pRebarStrand"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportCreateRebarSplice(Tekla.Structures.ModelInternal.dotRebarSplice_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pRebarSplice"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportCreateControlPlane(Tekla.Structures.ModelInternal.dotControlObject_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pControlObject"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportCreateGridPlane(Tekla.Structures.ModelInternal.dotGridPlane_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pGridPlane"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportCreateGrid(Tekla.Structures.ModelInternal.dotGrid_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pGrid"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportCreateReferenceModel(Tekla.Structures.ModelInternal.dotReferenceModel_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pReferenceModel"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportCreateReferenceModelObjectAttributeEnumerator(Tekla.Structures.ModelInternal.dotReferenceModelObjectAttributeEnumerator_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pEnumerator"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportCreateReferenceModelObjectAttribute(Tekla.Structures.ModelInternal.dotReferenceModelObjectAttribute_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pRMOAttribute"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportCreateTask(Tekla.Structures.ModelInternal.dotTask_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pTask"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportCreateTaskDependency(Tekla.Structures.ModelInternal.dotTaskDependency_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pTaskDependency"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportCreateTaskWorktype(Tekla.Structures.ModelInternal.dotTaskWorktype_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pTaskWorktype"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportCreateLoad(Tekla.Structures.ModelInternal.dotLoadCommonAttributes_t@,Tekla.Structures.ModelInternal.dotLoadClassAttributes_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pLoadCommonAttributes"></param>
            <param name="pLoadClassAttributes"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportCreateLoadGroup(Tekla.Structures.ModelInternal.dotLoadGroup_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pLoadGroup"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportCreateComponent(Tekla.Structures.ModelInternal.dotBaseComponent_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pBaseComponent"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportDisplayComponentHelp(Tekla.Structures.ModelInternal.dotBaseComponent_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pBaseComponent"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportDisplayAutoDefaultSettings(Tekla.Structures.ModelInternal.dotBaseComponent_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pBaseComponent"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportCreatePourBreak(Tekla.Structures.ModelInternal.dotPourBreak_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pPourBreak"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportGetFatherComponent(System.Int32,System.Int32@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="ObjectId"></param>
            <param name="FatherComponentId"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportGetPolybeamCoordinateSystem(System.Int32,System.Int32,System.Int32,Tekla.Structures.Internal.dotPoint_t@,Tekla.Structures.Internal.dotPoint_t@,Tekla.Structures.Internal.dotPoint_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="Id"></param>
            <param name="SubId"></param>
            <param name="Chamfered"></param>
            <param name="pX"></param>
            <param name="pY"></param>
            <param name="pZ"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportGetPartLine(Tekla.Structures.ModelInternal.dotPartLine_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pPartLine"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportSelectPart(Tekla.Structures.ModelInternal.dotContour_t@,Tekla.Structures.ModelInternal.dotPart_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pP1"></param>
            <param name="pPart"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportSelectBoltGroup(Tekla.Structures.ModelInternal.dotBoltShapeData_t@,Tekla.Structures.ModelInternal.dotBoltGroup_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pBoltShapeData"></param>
            <param name="pBoltGroup"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportSelectBooleanPart(Tekla.Structures.ModelInternal.dotBooleanPart_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pBooleanPart"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportSelectFittingOrCutPlane(Tekla.Structures.ModelInternal.dotFittingOrCutPlane_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pFittingOrCutPlane"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportSelectEdgeChamfer(Tekla.Structures.ModelInternal.dotEdgeChamfer_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pEdgeChamfer"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportSelectSurfaceTreatment(Tekla.Structures.ModelInternal.dotSurfaceTreatment_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pTreatment"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportSelectWeld(Tekla.Structures.ModelInternal.dotWeld_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pWeld"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportGetWeldGeometry(Tekla.Structures.ModelInternal.dotWeldGeometry_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pWeldGeometry"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportSelectSingleRebar(Tekla.Structures.ModelInternal.dotSingleRebar_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pSingleRebar"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportSelectRebarGroup(Tekla.Structures.ModelInternal.dotRebarGroup_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pRebarGroup"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportSelectRebarBars(Tekla.Structures.ModelInternal.dotWire_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pWire"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportSelectRebarMesh(Tekla.Structures.ModelInternal.dotRebarMesh_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pRebarMesh"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportSelectRebarStrand(Tekla.Structures.ModelInternal.dotRebarStrand_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pRebarStrand"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportSelectRebarSplice(Tekla.Structures.ModelInternal.dotRebarSplice_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pRebarSplice"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportSelectControlPlane(Tekla.Structures.ModelInternal.dotControlObject_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pControlObject"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportSelectGridPlane(Tekla.Structures.ModelInternal.dotGridPlane_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pGridPlane"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportSelectGrid(Tekla.Structures.ModelInternal.dotGrid_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pGrid"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportSelectReferenceModel(Tekla.Structures.ModelInternal.dotReferenceModel_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pReferenceModel"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportSelectReferenceModelObject(Tekla.Structures.ModelInternal.dotReferenceModelObject_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pReferenceModelObject"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportSelectTask(Tekla.Structures.ModelInternal.dotTask_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pTask"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportSelectTaskDependency(Tekla.Structures.ModelInternal.dotTaskDependency_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pTaskDependency"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportSelectTaskWorktype(Tekla.Structures.ModelInternal.dotTaskWorktype_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pTaskWorktype"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportSelectLoad(Tekla.Structures.ModelInternal.dotLoadCommonAttributes_t@,Tekla.Structures.ModelInternal.dotLoadClassAttributes_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pLoadCommonAttributes"></param>
            <param name="pLoadClassAttributes"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportSelectLoadGroup(Tekla.Structures.ModelInternal.dotLoadGroup_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pLoadGroup"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportSelectAssembly(Tekla.Structures.ModelInternal.dotAssembly_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pAssembly"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportSelectComponent(Tekla.Structures.ModelInternal.dotBaseComponent_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pBaseComponent"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportSelectPourObject(Tekla.Structures.ModelInternal.dotPourObject_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pPourObject"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportSelectPourBreak(Tekla.Structures.ModelInternal.dotPourBreak_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pPourBreak"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportModifyPourBreak(Tekla.Structures.ModelInternal.dotPourBreak_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pPourBreak"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportModifyPart(Tekla.Structures.ModelInternal.dotContour_t@,Tekla.Structures.ModelInternal.dotPart_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pP1"></param>
            <param name="pPart"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportModifyBoltGroup(Tekla.Structures.ModelInternal.dotBoltShapeData_t@,Tekla.Structures.ModelInternal.dotBoltGroup_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pBoltShapeData"></param>
            <param name="pBoltGroup"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportModifyBooleanPart(Tekla.Structures.ModelInternal.dotBooleanPart_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pBooleanPart"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportModifyFittingOrCutPlane(Tekla.Structures.ModelInternal.dotFittingOrCutPlane_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pFittingOrCutPlane"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportModifyEdgeChamfer(Tekla.Structures.ModelInternal.dotEdgeChamfer_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pEdgeChamfer"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportModifySurfaceTreatment(Tekla.Structures.ModelInternal.dotSurfaceTreatment_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pTreatment"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportModifyWeld(Tekla.Structures.ModelInternal.dotWeld_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pWeld"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportModifySingleRebar(Tekla.Structures.ModelInternal.dotSingleRebar_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pSingleRebar"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportModifyRebarGroup(Tekla.Structures.ModelInternal.dotRebarGroup_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pRebarGroup"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportModifyRebarMesh(Tekla.Structures.ModelInternal.dotRebarMesh_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pRebarMesh"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportModifyRebarStrand(Tekla.Structures.ModelInternal.dotRebarStrand_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pRebarStrand"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportModifyRebarSplice(Tekla.Structures.ModelInternal.dotRebarSplice_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pRebarSplice"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportModifyControlPlane(Tekla.Structures.ModelInternal.dotControlObject_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pControlObject"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportModifyGridPlane(Tekla.Structures.ModelInternal.dotGridPlane_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pGridPlane"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportModifyGrid(Tekla.Structures.ModelInternal.dotGrid_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pGrid"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportModifyReferenceModel(Tekla.Structures.ModelInternal.dotReferenceModel_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pReferenceModel"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportModifyTask(Tekla.Structures.ModelInternal.dotTask_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pTask"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportModifyTaskDependency(Tekla.Structures.ModelInternal.dotTaskDependency_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pTaskDependency"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportModifyTaskWorktype(Tekla.Structures.ModelInternal.dotTaskWorktype_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pTaskWorktype"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportModifyLoad(Tekla.Structures.ModelInternal.dotLoadCommonAttributes_t@,Tekla.Structures.ModelInternal.dotLoadClassAttributes_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pLoadCommonAttributes"></param>
            <param name="pLoadClassAttributes"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportModifyLoadGroup(Tekla.Structures.ModelInternal.dotLoadGroup_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pLoadGroup"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportModifyAssembly(Tekla.Structures.ModelInternal.dotAssembly_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pAssembly"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportModifyComponent(Tekla.Structures.ModelInternal.dotBaseComponent_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pBaseComponent"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportModifyPourObject(Tekla.Structures.ModelInternal.dotPourObject_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pPourObject"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportHierarchicDefinition(Tekla.Structures.ModelInternal.dotHierarchicDefinition_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pHierarchicDefinition"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportHierarchicObject(Tekla.Structures.ModelInternal.dotHierarchicObject_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pHierarchicObject"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportHierarchicObjectChildrenOperation(Tekla.Structures.ModelInternal.dotHierarchicList_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pHierarchicList"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportDeleteObject(Tekla.Structures.Internal.dotIdentifier_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pIdentifier"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportEnumerateObjects(Tekla.Structures.ModelInternal.dotEnumerator_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pEnumerator"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportGetSnapshotFromDatabase(Tekla.Structures.ModelInternal.dotEnumerator_t@,System.Collections.Generic.List{System.Object}@,System.Boolean)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="Enumerator"></param>
            <param name="SerializedObjects"></param>
            <param name="SelectInstances"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportGetSolidSerialized(Tekla.Structures.ModelInternal.dotSolid_t@,System.Collections.Generic.List{System.Object}@,System.Collections.Generic.List{Tekla.Structures.Geometry3d.Vector}@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="dotSolid"></param>
            <param name="serializedFaceList"></param>
            <param name="serializedVectorList"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportGetSolid(Tekla.Structures.ModelInternal.dotSolid_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pSolid"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportGetIntersectionSolid(Tekla.Structures.ModelInternal.dotIntersectionSolid_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pSolid"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportCommitChanges(Tekla.Structures.ModelInternal.dotModelCommit_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pModelCommit"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportRunOrStopClashCheck(System.Boolean)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="RunningClashCheck"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportGetIntersectionBoundingBoxes(Tekla.Structures.Internal.dotIdentifier_t@,Tekla.Structures.Internal.dotIdentifier_t@,Tekla.Structures.ModelInternal.dotClientId_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="Identifier1"></param>
            <param name="Identifier2"></param>
            <param name="ClientId"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportGetDetectedClash(Tekla.Structures.ModelInternal.dotClash_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pClash"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportGetNumberOfClashes(System.Int32@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pClashes"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportGetDotType(Tekla.Structures.ModelInternal.dotModelObject_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pModelObject"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportGetPartMark(Tekla.Structures.ModelInternal.dotPartMark_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pPartMark"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportGetCoordinateSystem(Tekla.Structures.ModelInternal.dotModelObject_t@,Tekla.Structures.Internal.dotCoordinateSystem_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pModelObject"></param>
            <param name="pCoordinateSystem"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportGetPlane(Tekla.Structures.ModelInternal.dotPlane_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pPlane"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportSetPlane(Tekla.Structures.ModelInternal.dotPlane_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pPlane"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportGetTransformationPlane(Tekla.Structures.ModelInternal.dotTransformationPlane_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pPlane"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportSetTransformationPlane(Tekla.Structures.ModelInternal.dotTransformationPlane_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pPlane"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportSetProperty(Tekla.Structures.ModelInternal.dotSetProperty_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pProperty"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportGetAllReportProperties(System.Collections.Generic.List{Tekla.Structures.ModelInternal.dotGetProperties_t}@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pProperties"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportGetAllProperties(Tekla.Structures.ModelInternal.dotGetProperties_t@,System.Collections.Generic.List{System.Object}@,System.Collections.Generic.List{System.Object}@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pProperties"></param>
            <param name="pNames"></param>
            <param name="pValues"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportGetProperties(Tekla.Structures.ModelInternal.dotGetProperties_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pProperties"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportGetSetModelInfo(Tekla.Structures.ModelInternal.dotModelInfo_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportGetProjectInfo(Tekla.Structures.ModelInternal.dotProjectInfo_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportModifyProjectInfo(Tekla.Structures.ModelInternal.dotProjectInfo_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportInitializeComponentStacks">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportAddComponentAttributeToStack(Tekla.Structures.ModelInternal.dotComponentAttribute_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pAttr"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportAddComponentInputToStack(Tekla.Structures.ModelInternal.dotComponentInputObject_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pObj"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportGetComponentInput(Tekla.Structures.ModelInternal.dotComponentInputObject_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pObj"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportLoadComponentAttributes(Tekla.Structures.ModelInternal.dotBaseComponent_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pBaseComponent"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportGetComponentAttribute(Tekla.Structures.Internal.dotIdentifier_t@,Tekla.Structures.ModelInternal.dotComponentAttribute_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pIdentifier"></param>
            <param name="pAttribute"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportGetNumberingUpToDate(Tekla.Structures.ModelInternal.dotNumberingQuery_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pNumberingQuery"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportCreateReport(Tekla.Structures.ModelInternal.dotCreateReportFromModel_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="aReport"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportDisplayReport(System.String)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="FileName"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportDisplayPrompt(System.String)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="Message"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportWriteToSessionLog(System.String)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="Message"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportCreateNC(Tekla.Structures.ModelInternal.dotCreateNCFromModel_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="aNC"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportRunMacro(System.String)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="FileName"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.IsMacroRunning">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportSaveAsWebModel(Tekla.Structures.ModelInternal.dotSaveAsWebModel_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pSaveAsWebModel"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportManipulateObject(Tekla.Structures.ModelInternal.dotManipulateObject_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pArgument"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportObjectMatchesToFilter(Tekla.Structures.Internal.dotIdentifier_t@,System.String)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pObjectId"></param>
            <param name="FileName"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportProgressBarOperation(Tekla.Structures.ModelInternal.dotProgressBar_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pProgressBar"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportDrawTemporaryText(Tekla.Structures.ModelInternal.dotDrawText_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pArgument"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportDrawTemporaryPolyLine(Tekla.Structures.ModelInternal.dotDrawPolyLine_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pArgument"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportDrawTemporaryPolyLineWithId(Tekla.Structures.ModelInternal.dotGraphicPolyLine_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pArgument"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportRemoveTemporaryGraphicsObjects(Tekla.Structures.ModelInternal.dotClientId_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pArgument"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportDrawTemporaryPolygonSurface(Tekla.Structures.ModelInternal.dotDrawPolygonSurface_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pArgument"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportSetObjectPhase(Tekla.Structures.ModelInternal.dotPhase_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pArgument"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportSetGetPhaseProperty(Tekla.Structures.ModelInternal.dotSetGetProperty_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pArgument"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportGetObjectPhase(Tekla.Structures.ModelInternal.dotPhase_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pArgument"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportGetPhaseNumbers(Tekla.Structures.ModelInternal.dotPhaseNumbers_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pArgument"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportGetModificationStamp(Tekla.Structures.ModelInternal.dotModificationStamp_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pModStmp"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportInsertView(Tekla.Structures.ModelInternal.dotView_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="View"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportModifyView(Tekla.Structures.ModelInternal.dotView_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="View"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportSelectView(Tekla.Structures.ModelInternal.dotView_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pView"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportGetViews(Tekla.Structures.ModelInternal.dotViewSelector_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pViews"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportSetRepresentation(System.String)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="Representation"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportGetClipPlanes(Tekla.Structures.ModelInternal.dotView_t@,Tekla.Structures.ModelInternal.dotGetClipPlanes_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pDotView"></param>
            <param name="pDotGetClipPlanes"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportCreateClipPlane(Tekla.Structures.ModelInternal.dotView_t@,Tekla.Structures.ModelInternal.dotClipPlane_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pDotView"></param>
            <param name="pDotClipPlane"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportDeleteClipPlane(Tekla.Structures.ModelInternal.dotView_t@,Tekla.Structures.ModelInternal.dotClipPlane_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pDotView"></param>
            <param name="pDotClipPlane"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportModifyClipPlane(Tekla.Structures.ModelInternal.dotView_t@,Tekla.Structures.ModelInternal.dotClipPlane_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pDotView"></param>
            <param name="pDotClipPlane"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportSetTemporaryState(Tekla.Structures.Internal.dotIdentifier_t@,Tekla.Structures.ModelInternal.dotTemporaryStatesEnum@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pObjectId"></param>
            <param name="pNewState"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportSetTemporaryStates(Tekla.Structures.ModelInternal.dotSetTemporaryStates_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pSetTemporaryStates"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportClearTemporaryState(Tekla.Structures.Internal.dotIdentifier_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pObjectId"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportClearAllTemporaryStates">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportGetViewCamera(Tekla.Structures.ModelInternal.dotView_t@,Tekla.Structures.ModelInternal.dotCamera_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pDotView"></param>
            <param name="pDotCamera"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportSetViewCamera(Tekla.Structures.ModelInternal.dotView_t@,Tekla.Structures.ModelInternal.dotCamera_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pDotView"></param>
            <param name="pDotCamera"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportChangeManagerAllowSave(System.Boolean)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="SaveFlag"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportChangeManagerAllowNumbering(System.Boolean)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="NumberingFlag"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportShadowArea(Tekla.Structures.ModelInternal.dotAreaPolygons_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pArgument"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportShadowAreaComplement(Tekla.Structures.ModelInternal.dotAreaPolygons_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pArgument"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportDasStartCommand(System.String,System.String)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportDasStartAction(System.String,System.String)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportRefreshReferenceModel(Tekla.Structures.ModelInternal.dotRefreshReferenceModel_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportSaveOperation(Tekla.Structures.ModelInternal.dotSaveOperation_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportGetDataBaseVersionInfoFromModel(Tekla.Structures.ModelInternal.dotModelInfo_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportCreateEmptyModel(Tekla.Structures.ModelInternal.dotModelInfo_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportSharingOperation(Tekla.Structures.ModelInternal.dotSharingOperation_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportIntListHandler(Tekla.Structures.ModelInternal.dotnetIntList_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ImportIntListHandler(Tekla.Structures.ModelInternal.dotnetIntList_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportStringListHandler(Tekla.Structures.ModelInternal.dotnetStringList_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ImportStringListHandler(Tekla.Structures.ModelInternal.dotnetStringList_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportPointListHandler(Tekla.Structures.ModelInternal.dotnetPointList_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ImportPointListHandler(Tekla.Structures.ModelInternal.dotnetPointList_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.ExportUIObjectPick(Tekla.Structures.ModelInternal.dotUIPicker_t@)">
            <summary> DO NOT USE! For internal usage only! </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.ExportUIObjectsPick(Tekla.Structures.ModelInternal.dotUIPicker_t@)">
            <summary> DO NOT USE! For internal usage only! </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.ExportGetSnapshotFromDatabase(Tekla.Structures.ModelInternal.dotEnumerator_t@,System.Collections.Generic.List{System.Object}@,System.Boolean)">
            <summary> DO NOT USE! For internal usage only! </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.ExportGetSolidSerialized(Tekla.Structures.ModelInternal.dotSolid_t@,System.Collections.Generic.List{System.Object}@,System.Collections.Generic.List{Tekla.Structures.Geometry3d.Vector}@)">
            <summary> DO NOT USE! For internal usage only! </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.EndInvoke(Tekla.Structures.ModelInternal.dotUIPicker_t@,System.IAsyncResult)">
            <summary> DO NOT USE! For internal usage only! </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.ExportDasStartCommand(System.String,System.String)">
            <summary> DO NOT USE! For internal usage only! </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.ExportDasStartAction(System.String,System.String)">
            <summary> DO NOT USE! For internal usage only! </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.ExportRefreshReferenceModel(Tekla.Structures.ModelInternal.dotRefreshReferenceModel_t@)">
            <summary> DO NOT USE! For internal usage only! </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.ExportSaveOperation(Tekla.Structures.ModelInternal.dotSaveOperation_t@)">
            <summary> DO NOT USE! For internal usage only! </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.ExportCreateEmptyModel(Tekla.Structures.ModelInternal.dotModelInfo_t@)">
            <summary> DO NOT USE! For internal usage only! </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.ExportSharingOperation(Tekla.Structures.ModelInternal.dotSharingOperation_t@)">
            <summary> DO NOT USE! For internal usage only! </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.ExportIntListHandler(Tekla.Structures.ModelInternal.dotnetIntList_t@)">
            <summary> DO NOT USE! For internal usage only! </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.ImportIntListHandler(Tekla.Structures.ModelInternal.dotnetIntList_t@)">
            <summary> DO NOT USE! For internal usage only! </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.ExportStringListHandler(Tekla.Structures.ModelInternal.dotnetStringList_t@)">
            <summary> DO NOT USE! For internal usage only! </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.ImportStringListHandler(Tekla.Structures.ModelInternal.dotnetStringList_t@)">
            <summary> DO NOT USE! For internal usage only! </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.ExportPointListHandler(Tekla.Structures.ModelInternal.dotnetPointList_t@)">
            <summary> DO NOT USE! For internal usage only! </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.ImportPointListHandler(Tekla.Structures.ModelInternal.dotnetPointList_t@)">
            <summary> DO NOT USE! For internal usage only! </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.dotExportSaveOperation(Tekla.Structures.ModelInternal.dotSaveOperation_t@)">
            <summary> DO NOT USE! For internal usage only! </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.dotExportIntListHandler(Tekla.Structures.ModelInternal.dotnetIntList_t@)">
            <summary> DO NOT USE! For internal usage only! </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.dotImportIntListHandler(Tekla.Structures.ModelInternal.dotnetIntList_t@)">
            <summary> DO NOT USE! For internal usage only! </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.dotExportStringListHandler(Tekla.Structures.ModelInternal.dotnetStringList_t@)">
            <summary> DO NOT USE! For internal usage only! </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.dotImportStringListHandler(Tekla.Structures.ModelInternal.dotnetStringList_t@)">
            <summary> DO NOT USE! For internal usage only! </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.dotExportPointListHandler(Tekla.Structures.ModelInternal.dotnetPointList_t@)">
            <summary> DO NOT USE! For internal usage only! </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.dotImportPointListHandler(Tekla.Structures.ModelInternal.dotnetPointList_t@)">
            <summary> DO NOT USE! For internal usage only! </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.dotExportShadowArea(Tekla.Structures.ModelInternal.dotAreaPolygons_t@)">
            <summary> DO NOT USE! For internal usage only! </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.dotExportShadowAreaComplement(Tekla.Structures.ModelInternal.dotAreaPolygons_t@)">
            <summary> DO NOT USE! For internal usage only! </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.CDelegateWrapper">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.CDelegateWrapper._instance">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.CDelegateWrapper._functionality">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.#ctor(Tekla.Structures.ModelInternal.ICDelegate,Tekla.Structures.Internal.WrapperFunctionalityBase)">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportUIObjectSelect(Tekla.Structures.ModelInternal.dotUIModelObjectSelector_t@)">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportUIObjectPick(Tekla.Structures.ModelInternal.dotUIPicker_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pPicker"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportUIObjectsPick(Tekla.Structures.ModelInternal.dotUIPicker_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pPicker"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportTaskObjectAttach(Tekla.Structures.ModelInternal.dotTaskObjectAttacher_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pSelector"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportCreatePart(Tekla.Structures.ModelInternal.dotContour_t@,Tekla.Structures.ModelInternal.dotPart_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pP1"></param>
            <param name="pPart"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportCompareObjects(System.Int32,System.Int32)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="ObjectId"></param>
            <param name="ObjectToCompareId"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportCreateBoltGroup(Tekla.Structures.ModelInternal.dotBoltShapeData_t@,Tekla.Structures.ModelInternal.dotBoltGroup_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pBoltShapeData"></param>
            <param name="pBoltGroup"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportCreateBooleanPart(Tekla.Structures.ModelInternal.dotBooleanPart_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pBooleanPart"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportCreateFittingOrCutPlane(Tekla.Structures.ModelInternal.dotFittingOrCutPlane_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pFittingOrCutPlane"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportCreateEdgeChamfer(Tekla.Structures.ModelInternal.dotEdgeChamfer_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pEdgeChamfer"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportCreateSurfaceTreatment(Tekla.Structures.ModelInternal.dotSurfaceTreatment_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pTreatment"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportCreateWeld(Tekla.Structures.ModelInternal.dotWeld_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pWeld"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportCreateSingleRebar(Tekla.Structures.ModelInternal.dotSingleRebar_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pSingleRebar"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportCreateRebarGroup(Tekla.Structures.ModelInternal.dotRebarGroup_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pRebarGroup"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportCreateRebarMesh(Tekla.Structures.ModelInternal.dotRebarMesh_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pRebarMesh"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportCreateRebarStrand(Tekla.Structures.ModelInternal.dotRebarStrand_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pRebarStrand"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportCreateRebarSplice(Tekla.Structures.ModelInternal.dotRebarSplice_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pRebarSplice"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportCreateControlPlane(Tekla.Structures.ModelInternal.dotControlObject_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pControlObject"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportCreateGridPlane(Tekla.Structures.ModelInternal.dotGridPlane_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pGridPlane"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportCreateGrid(Tekla.Structures.ModelInternal.dotGrid_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pGrid"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportCreateReferenceModel(Tekla.Structures.ModelInternal.dotReferenceModel_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pReferenceModel"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportCreateReferenceModelObjectAttributeEnumerator(Tekla.Structures.ModelInternal.dotReferenceModelObjectAttributeEnumerator_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pEnumerator"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportCreateReferenceModelObjectAttribute(Tekla.Structures.ModelInternal.dotReferenceModelObjectAttribute_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pRMOAttribute"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportCreateTask(Tekla.Structures.ModelInternal.dotTask_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pTask"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportCreateTaskDependency(Tekla.Structures.ModelInternal.dotTaskDependency_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pTaskDependency"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportCreateTaskWorktype(Tekla.Structures.ModelInternal.dotTaskWorktype_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pTaskWorktype"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportCreateLoad(Tekla.Structures.ModelInternal.dotLoadCommonAttributes_t@,Tekla.Structures.ModelInternal.dotLoadClassAttributes_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pLoadCommonAttributes"></param>
            <param name="pLoadClassAttributes"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportCreateLoadGroup(Tekla.Structures.ModelInternal.dotLoadGroup_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pLoadGroup"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportCreateComponent(Tekla.Structures.ModelInternal.dotBaseComponent_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pBaseComponent"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportDisplayComponentHelp(Tekla.Structures.ModelInternal.dotBaseComponent_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pBaseComponent"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportDisplayAutoDefaultSettings(Tekla.Structures.ModelInternal.dotBaseComponent_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pBaseComponent"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportCreatePourBreak(Tekla.Structures.ModelInternal.dotPourBreak_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pPourBreak"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportGetFatherComponent(System.Int32,System.Int32@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="ObjectId"></param>
            <param name="FatherComponentId"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportGetPolybeamCoordinateSystem(System.Int32,System.Int32,System.Int32,Tekla.Structures.Internal.dotPoint_t@,Tekla.Structures.Internal.dotPoint_t@,Tekla.Structures.Internal.dotPoint_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="Id"></param>
            <param name="SubId"></param>
            <param name="Chamfered"></param>
            <param name="pX"></param>
            <param name="pY"></param>
            <param name="pZ"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportGetPartLine(Tekla.Structures.ModelInternal.dotPartLine_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pPartLine"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportSelectPart(Tekla.Structures.ModelInternal.dotContour_t@,Tekla.Structures.ModelInternal.dotPart_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pP1"></param>
            <param name="pPart"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportSelectBoltGroup(Tekla.Structures.ModelInternal.dotBoltShapeData_t@,Tekla.Structures.ModelInternal.dotBoltGroup_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pBoltShapeData"></param>
            <param name="pBoltGroup"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportSelectBooleanPart(Tekla.Structures.ModelInternal.dotBooleanPart_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pBooleanPart"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportSelectFittingOrCutPlane(Tekla.Structures.ModelInternal.dotFittingOrCutPlane_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pFittingOrCutPlane"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportSelectEdgeChamfer(Tekla.Structures.ModelInternal.dotEdgeChamfer_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pEdgeChamfer"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportSelectSurfaceTreatment(Tekla.Structures.ModelInternal.dotSurfaceTreatment_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pTreatment"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportSelectWeld(Tekla.Structures.ModelInternal.dotWeld_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pWeld"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportGetWeldGeometry(Tekla.Structures.ModelInternal.dotWeldGeometry_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pWeldGeometry"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportSelectSingleRebar(Tekla.Structures.ModelInternal.dotSingleRebar_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pSingleRebar"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportSelectRebarGroup(Tekla.Structures.ModelInternal.dotRebarGroup_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pRebarGroup"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportSelectRebarBars(Tekla.Structures.ModelInternal.dotWire_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pWire"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportSelectRebarMesh(Tekla.Structures.ModelInternal.dotRebarMesh_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pRebarMesh"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportSelectRebarStrand(Tekla.Structures.ModelInternal.dotRebarStrand_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pRebarStrand"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportSelectRebarSplice(Tekla.Structures.ModelInternal.dotRebarSplice_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pRebarSplice"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportSelectControlPlane(Tekla.Structures.ModelInternal.dotControlObject_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pControlObject"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportSelectGridPlane(Tekla.Structures.ModelInternal.dotGridPlane_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pGridPlane"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportSelectGrid(Tekla.Structures.ModelInternal.dotGrid_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pGrid"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportSelectReferenceModel(Tekla.Structures.ModelInternal.dotReferenceModel_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pReferenceModel"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportSelectReferenceModelObject(Tekla.Structures.ModelInternal.dotReferenceModelObject_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pReferenceModelObject"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportSelectTask(Tekla.Structures.ModelInternal.dotTask_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pTask"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportSelectTaskDependency(Tekla.Structures.ModelInternal.dotTaskDependency_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pTaskDependency"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportSelectTaskWorktype(Tekla.Structures.ModelInternal.dotTaskWorktype_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pTaskWorktype"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportSelectLoad(Tekla.Structures.ModelInternal.dotLoadCommonAttributes_t@,Tekla.Structures.ModelInternal.dotLoadClassAttributes_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pLoadCommonAttributes"></param>
            <param name="pLoadClassAttributes"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportSelectLoadGroup(Tekla.Structures.ModelInternal.dotLoadGroup_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pLoadGroup"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportSelectAssembly(Tekla.Structures.ModelInternal.dotAssembly_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pAssembly"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportSelectComponent(Tekla.Structures.ModelInternal.dotBaseComponent_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pBaseComponent"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportSelectPourObject(Tekla.Structures.ModelInternal.dotPourObject_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pPourObject"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportSelectPourBreak(Tekla.Structures.ModelInternal.dotPourBreak_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pPourBreak"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportModifyPourBreak(Tekla.Structures.ModelInternal.dotPourBreak_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pPourBreak"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportModifyPart(Tekla.Structures.ModelInternal.dotContour_t@,Tekla.Structures.ModelInternal.dotPart_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pP1"></param>
            <param name="pPart"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportModifyBoltGroup(Tekla.Structures.ModelInternal.dotBoltShapeData_t@,Tekla.Structures.ModelInternal.dotBoltGroup_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pBoltShapeData"></param>
            <param name="pBoltGroup"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportModifyBooleanPart(Tekla.Structures.ModelInternal.dotBooleanPart_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pBooleanPart"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportModifyFittingOrCutPlane(Tekla.Structures.ModelInternal.dotFittingOrCutPlane_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pFittingOrCutPlane"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportModifyEdgeChamfer(Tekla.Structures.ModelInternal.dotEdgeChamfer_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pEdgeChamfer"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportModifySurfaceTreatment(Tekla.Structures.ModelInternal.dotSurfaceTreatment_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pTreatment"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportModifyWeld(Tekla.Structures.ModelInternal.dotWeld_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pWeld"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportModifySingleRebar(Tekla.Structures.ModelInternal.dotSingleRebar_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pSingleRebar"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportModifyRebarGroup(Tekla.Structures.ModelInternal.dotRebarGroup_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pRebarGroup"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportModifyRebarMesh(Tekla.Structures.ModelInternal.dotRebarMesh_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pRebarMesh"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportModifyRebarStrand(Tekla.Structures.ModelInternal.dotRebarStrand_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pRebarStrand"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportModifyRebarSplice(Tekla.Structures.ModelInternal.dotRebarSplice_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pRebarSplice"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportModifyControlPlane(Tekla.Structures.ModelInternal.dotControlObject_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pControlObject"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportModifyGridPlane(Tekla.Structures.ModelInternal.dotGridPlane_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pGridPlane"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportModifyGrid(Tekla.Structures.ModelInternal.dotGrid_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pGrid"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportModifyReferenceModel(Tekla.Structures.ModelInternal.dotReferenceModel_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pReferenceModel"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportModifyTask(Tekla.Structures.ModelInternal.dotTask_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pTask"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportModifyTaskDependency(Tekla.Structures.ModelInternal.dotTaskDependency_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pTaskDependency"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportModifyTaskWorktype(Tekla.Structures.ModelInternal.dotTaskWorktype_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pTaskWorktype"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportModifyLoad(Tekla.Structures.ModelInternal.dotLoadCommonAttributes_t@,Tekla.Structures.ModelInternal.dotLoadClassAttributes_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pLoadCommonAttributes"></param>
            <param name="pLoadClassAttributes"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportModifyLoadGroup(Tekla.Structures.ModelInternal.dotLoadGroup_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pLoadGroup"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportModifyAssembly(Tekla.Structures.ModelInternal.dotAssembly_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pAssembly"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportModifyComponent(Tekla.Structures.ModelInternal.dotBaseComponent_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pBaseComponent"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportModifyPourObject(Tekla.Structures.ModelInternal.dotPourObject_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pPourObject"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportHierarchicDefinition(Tekla.Structures.ModelInternal.dotHierarchicDefinition_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pHierarchicDefinition"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportHierarchicObject(Tekla.Structures.ModelInternal.dotHierarchicObject_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pHierarchicObject"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportHierarchicObjectChildrenOperation(Tekla.Structures.ModelInternal.dotHierarchicList_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pHierarchicList"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportDeleteObject(Tekla.Structures.Internal.dotIdentifier_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pIdentifier"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportEnumerateObjects(Tekla.Structures.ModelInternal.dotEnumerator_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pEnumerator"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportGetSolid(Tekla.Structures.ModelInternal.dotSolid_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pSolid"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportGetIntersectionSolid(Tekla.Structures.ModelInternal.dotIntersectionSolid_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pSolid"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportCommitChanges(Tekla.Structures.ModelInternal.dotModelCommit_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pModelCommit"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportRunOrStopClashCheck(System.Boolean)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="RunningClashCheck"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportGetIntersectionBoundingBoxes(Tekla.Structures.Internal.dotIdentifier_t@,Tekla.Structures.Internal.dotIdentifier_t@,Tekla.Structures.ModelInternal.dotClientId_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="Identifier1"></param>
            <param name="Identifier2"></param>
            <param name="ClientId"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportGetDetectedClash(Tekla.Structures.ModelInternal.dotClash_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pClash"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportGetNumberOfClashes(System.Int32@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pClashes"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportGetDotType(Tekla.Structures.ModelInternal.dotModelObject_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pModelObject"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportGetPartMark(Tekla.Structures.ModelInternal.dotPartMark_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pPartMark"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportGetCoordinateSystem(Tekla.Structures.ModelInternal.dotModelObject_t@,Tekla.Structures.Internal.dotCoordinateSystem_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pModelObject"></param>
            <param name="pCoordinateSystem"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportGetPlane(Tekla.Structures.ModelInternal.dotPlane_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pPlane"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportSetPlane(Tekla.Structures.ModelInternal.dotPlane_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pPlane"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportGetTransformationPlane(Tekla.Structures.ModelInternal.dotTransformationPlane_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pPlane"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportSetTransformationPlane(Tekla.Structures.ModelInternal.dotTransformationPlane_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pPlane"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportSetProperty(Tekla.Structures.ModelInternal.dotSetProperty_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pProperty"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportGetAllReportProperties(System.Collections.Generic.List{Tekla.Structures.ModelInternal.dotGetProperties_t}@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pProperties"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportGetAllProperties(Tekla.Structures.ModelInternal.dotGetProperties_t@,System.Collections.Generic.List{System.Object}@,System.Collections.Generic.List{System.Object}@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pProperties"></param>
            <param name="pNames"></param>
            <param name="pValues"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportGetProperties(Tekla.Structures.ModelInternal.dotGetProperties_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pProperties"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportGetSetModelInfo(Tekla.Structures.ModelInternal.dotModelInfo_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportGetProjectInfo(Tekla.Structures.ModelInternal.dotProjectInfo_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportModifyProjectInfo(Tekla.Structures.ModelInternal.dotProjectInfo_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportInitializeComponentStacks">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportAddComponentAttributeToStack(Tekla.Structures.ModelInternal.dotComponentAttribute_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pAttr"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportAddComponentInputToStack(Tekla.Structures.ModelInternal.dotComponentInputObject_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pObj"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportGetComponentInput(Tekla.Structures.ModelInternal.dotComponentInputObject_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pObj"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportLoadComponentAttributes(Tekla.Structures.ModelInternal.dotBaseComponent_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pBaseComponent"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportGetComponentAttribute(Tekla.Structures.Internal.dotIdentifier_t@,Tekla.Structures.ModelInternal.dotComponentAttribute_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pIdentifier"></param>
            <param name="pAttribute"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportGetNumberingUpToDate(Tekla.Structures.ModelInternal.dotNumberingQuery_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pNumberingQuery"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportCreateReport(Tekla.Structures.ModelInternal.dotCreateReportFromModel_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="aReport"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportDisplayReport(System.String)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="FileName"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportDisplayPrompt(System.String)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="Message"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportWriteToSessionLog(System.String)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="Message"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportCreateNC(Tekla.Structures.ModelInternal.dotCreateNCFromModel_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="aNC"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportRunMacro(System.String)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="FileName"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.IsMacroRunning">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportSaveAsWebModel(Tekla.Structures.ModelInternal.dotSaveAsWebModel_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pSaveAsWebModel"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportManipulateObject(Tekla.Structures.ModelInternal.dotManipulateObject_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pArgument"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportObjectMatchesToFilter(Tekla.Structures.Internal.dotIdentifier_t@,System.String)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pObjectId"></param>
            <param name="FileName"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportProgressBarOperation(Tekla.Structures.ModelInternal.dotProgressBar_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pProgressBar"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportDrawTemporaryText(Tekla.Structures.ModelInternal.dotDrawText_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pArgument"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportDrawTemporaryPolyLine(Tekla.Structures.ModelInternal.dotDrawPolyLine_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pArgument"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportDrawTemporaryPolyLineWithId(Tekla.Structures.ModelInternal.dotGraphicPolyLine_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pArgument"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportRemoveTemporaryGraphicsObjects(Tekla.Structures.ModelInternal.dotClientId_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pArgument"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportDrawTemporaryPolygonSurface(Tekla.Structures.ModelInternal.dotDrawPolygonSurface_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pArgument"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportSetObjectPhase(Tekla.Structures.ModelInternal.dotPhase_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pArgument"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportSetGetPhaseProperty(Tekla.Structures.ModelInternal.dotSetGetProperty_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pArgument"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportGetObjectPhase(Tekla.Structures.ModelInternal.dotPhase_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pArgument"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportGetPhaseNumbers(Tekla.Structures.ModelInternal.dotPhaseNumbers_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pArgument"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportGetModificationStamp(Tekla.Structures.ModelInternal.dotModificationStamp_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pModStmp"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportInsertView(Tekla.Structures.ModelInternal.dotView_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pDotView"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportModifyView(Tekla.Structures.ModelInternal.dotView_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pDotView"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportSelectView(Tekla.Structures.ModelInternal.dotView_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pDotView"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportGetViews(Tekla.Structures.ModelInternal.dotViewSelector_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pViews"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportSetRepresentation(System.String)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pViews"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportGetClipPlanes(Tekla.Structures.ModelInternal.dotView_t@,Tekla.Structures.ModelInternal.dotGetClipPlanes_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pView"></param>
            <param name="pGetClipPlanes"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportCreateClipPlane(Tekla.Structures.ModelInternal.dotView_t@,Tekla.Structures.ModelInternal.dotClipPlane_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pView"></param>
            <param name="pClipPlane"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportDeleteClipPlane(Tekla.Structures.ModelInternal.dotView_t@,Tekla.Structures.ModelInternal.dotClipPlane_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pView"></param>
            <param name="pClipPlane"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportModifyClipPlane(Tekla.Structures.ModelInternal.dotView_t@,Tekla.Structures.ModelInternal.dotClipPlane_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pView"></param>
            <param name="pClipPlane"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportSetTemporaryState(Tekla.Structures.Internal.dotIdentifier_t@,Tekla.Structures.ModelInternal.dotTemporaryStatesEnum@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pObjectId"></param>
            <param name="pNewState"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportSetTemporaryStates(Tekla.Structures.ModelInternal.dotSetTemporaryStates_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pSetTemporaryStates"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportClearTemporaryState(Tekla.Structures.Internal.dotIdentifier_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pObjectId"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportClearAllTemporaryStates">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportGetViewCamera(Tekla.Structures.ModelInternal.dotView_t@,Tekla.Structures.ModelInternal.dotCamera_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pView"></param>
            <param name="pCamera"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportSetViewCamera(Tekla.Structures.ModelInternal.dotView_t@,Tekla.Structures.ModelInternal.dotCamera_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pView"></param>
            <param name="pCamera"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportDasStartCommand(System.String,System.String)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="CommandName"></param>
            <param name="Parameter"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportDasStartAction(System.String,System.String)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="ActionName"></param>
            <param name="Parameter"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportRefreshReferenceModel(Tekla.Structures.ModelInternal.dotRefreshReferenceModel_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="RefreshReferenceModel"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportSaveOperation(Tekla.Structures.ModelInternal.dotSaveOperation_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportGetDataBaseVersionInfoFromModel(Tekla.Structures.ModelInternal.dotModelInfo_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportCreateEmptyModel(Tekla.Structures.ModelInternal.dotModelInfo_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportSharingOperation(Tekla.Structures.ModelInternal.dotSharingOperation_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pOperation"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportIntListHandler(Tekla.Structures.ModelInternal.dotnetIntList_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>    
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ImportIntListHandler(Tekla.Structures.ModelInternal.dotnetIntList_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>    
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportStringListHandler(Tekla.Structures.ModelInternal.dotnetStringList_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>    
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ImportStringListHandler(Tekla.Structures.ModelInternal.dotnetStringList_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>    
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportPointListHandler(Tekla.Structures.ModelInternal.dotnetPointList_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>    
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ImportPointListHandler(Tekla.Structures.ModelInternal.dotnetPointList_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>    
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportChangeManagerAllowSave(System.Boolean)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="SaveFlag"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportChangeManagerAllowNumbering(System.Boolean)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="NumberingFlag"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportShadowArea(Tekla.Structures.ModelInternal.dotAreaPolygons_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pArgument"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportShadowAreaComplement(Tekla.Structures.ModelInternal.dotAreaPolygons_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pArgument"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportGetSnapshotFromDatabase(Tekla.Structures.ModelInternal.dotEnumerator_t@,System.Collections.Generic.List{System.Object}@,System.Boolean)">
            <summary>
            
            </summary>
            <param name="Enumerator"></param>
            <param name="SerializedObjects"></param>
            <param name="SelectInstances"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportGetSolidSerialized(Tekla.Structures.ModelInternal.dotSolid_t@,System.Collections.Generic.List{System.Object}@,System.Collections.Generic.List{Tekla.Structures.Geometry3d.Vector}@)">
            <summary>
            
            </summary>
            <param name="dotSolid"></param>
            <param name="serializedFaceList"></param>
            <param name="serializedVectorList"></param>
            <returns></returns>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.AreWeUnitTesting">
            <summary>
            This is to enable unit-testing specific features like faking TS connection.
            This class hold a flag that is set to true when user wants to prevent 
            DelegateProxy's static constructor from running and creating IPC connection.
            </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.AreWeUnitTesting.Value">
            <summary>
            Gets or sets a value indicating whether we are running in unit testing
            environment where ICDelegate is replaced with a fake.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.Synchronize">
            <summary>
            Synchronization class for .NET picking and synced commands where we
            start a command and wait for it to complete.
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Synchronize.Sync">
            <summary>
            Releases the sync handle. Called from TeklaStructures.exe
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Synchronize.WaitForSynchronization">
            <summary>
            Waits until sync handle is released.
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Synchronize.Reset">
            <summary>
            Reset the sync handle
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Synchronize.GetSyncCallback">
            <summary>
            Get sync callback to Sync()
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.CDelegate">
            <summary>
            CDelegate includes all the platform invoke commands user process can call.
            It uses CDelegateSynchronized to deliver the calls to C-interface.
            </summary>
            Adding a new class to interface goes like this:
            1. Add a new delegate function type to definitions in this class.
            2. Add Create/Select/Modify functions according to examples to this class.
            3. Add Matching EndInvoke function to CDelegateSynchronized class.
            4. Add Create/Select/Modify functions according to examples to CDelegateSynchronized
            5. Add public static extern int functions for Create/Select/Modify to the end of CDelegateSynchronized.
            6. Implement the static functions to TS.
            7. Test
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegate.#ctor">
            <summary>
            Instantiates a new CDelegate
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.CDelegate.Singletons">
            <summary>
            Storage class for singleton instances.
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegate.Singletons.#cctor">
            <summary>
            Explicit static constructor to tell C# compiler
            not to mark type as beforefieldinit. Do not remove.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.DelegateFake">
            <summary>
            Implements ICDelegate so that every method throws NotImplementedException.
            Can be used in unit testing to mock Tekla Structures behavior, by setting
            a ICDelegate instance using <see cref="T:Tekla.Structures.ModelInternal.CDelegateSetter"/>.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.DelegateProxy">
            <summary>
            CDelegate remote class proxy.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.DelegateProxy._Instance">
            <summary>
            The remote delegate object.
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.DelegateProxy.#cctor">
            <summary>
            Initializes static instance variable.
            </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.DelegateProxy.Delegate">
            <summary>
            Gets the singleton CDelegate instance that includes model API methods.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.CDelegateSetter">
            <summary>
            This class is purely available for the reason to enable faking of
            ICDelegate interface for the sake of testing.
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSetter.SetInstanceForUnitTesting(Tekla.Structures.ModelInternal.ICDelegate)">
            <summary>
            Set the current ICDelegate instance to your fake/mock class.
            The instance must be restored to null when test method ends.
            </summary>
            <param name="cdelegate">The delegate implementation</param>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.ScopedCDelegateSetter">
            <summary>
            Can be used for scoped settings of ICDelegate.
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ScopedCDelegateSetter.#ctor(Tekla.Structures.ModelInternal.ICDelegate)">
            <summary>
            Construct scoped setter and set the DelegateProxy.Delegate to what is provided for constructor.
            </summary>
            <param name="deleg"></param>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ScopedCDelegateSetter.Dispose">
            <summary>
            Restores the DelegateProxy.Delegate to what it was before this class was constructed.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.DotNetModelProxy">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.DotNetModelProxy.Run(System.String)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="Param">Not used.</param>
            <returns>The return value is not usefull because AKIT doesn't send it to Core.</returns>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.EventHandler">
            <summary>
            EventHandler is a class that TS calls when an event is raised. Handler
            then calls all the listener "Events" objects.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.IEventHandler">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.IEventHandler.AddListener(Tekla.Structures.Model.Events)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.IEventHandler.RemoveListener(Tekla.Structures.Model.Events)">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.EventHandler.EventListeners">
            <summary>
            List of Events objects waiting to be called
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.EventHandler.AddListener(Tekla.Structures.Model.Events)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="EventListener"></param>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.EventHandler.RemoveListener(Tekla.Structures.Model.Events)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="EventListener"></param>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.EventHandler.OnEvent(System.String)">
            <summary>
            TS calls when event is raised.
            </summary>
            <param name="Param">Name of the event</param>
            <returns>1</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.EventHandler.GetDetectedClash(Tekla.Structures.Model.ClashCheckData)">
            <summary>
            Gets the data of the detected clash in dotClash_t struct and sets the attributes
            to its ClashCheckData object parameter.
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.EventHandler.GetNumberOfClashes(System.Int32@)">
            <summary>
            Gets the number of clashes that have been found when the clash check has been
            started from .NET API.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.EventHandlerProxy">
            <summary>
            EventHandler remote class proxy.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.EventHandlerProxy._Instance">
            <summary>
            The remote EventHandler object.
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.EventHandlerProxy.#cctor">
            <summary>
            Initializes static instance variable.
            </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.EventHandlerProxy.EventHandler">
            <summary>
            Gets the singleton EventHandler instance that includes model API event handlers.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.EventHandlerWrapper">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.EventHandlerWrapper.Instance">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.EventHandlerWrapper.Functionality">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.EventHandlerWrapper.#ctor(Tekla.Structures.ModelInternal.IEventHandler,Tekla.Structures.Internal.WrapperFunctionalityBase)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.EventHandlerWrapper.AddListener(Tekla.Structures.Model.Events)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.EventHandlerWrapper.RemoveListener(Tekla.Structures.Model.Events)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.ModelModuleManager">
            <summary> Internal Module Manager to check configuration against Insert/Modify commands.</summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ModelModuleManager.CheckModules(Tekla.Structures.Model.ModelObject.ModelObjectEnum)">
            <summary> Checks current module configuration against Insert/Modify command.</summary>
            <param name="Type">Type of the object to check for creation</param>
            <exception cref="T:System.MethodAccessException">Cast an exception if operation is not allowed.</exception>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.Remoter">
            <summary>
            Summary description for Remoter.
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Remoter.#ctor">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Remoter.InitializeSandBox">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <returns></returns>
        </member>
        <member name="T:Tekla.Structures.Model.Solid">
            <summary>
            The Solid class represents the physical object in the model created by a part instance.
            A solid instance can be used to query the actual geometry of the part and intersect that
            geometry with, for example, lines and planes.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures.Solid;
            using Tekla.Structures.Geometry3d;
            using System.Collections;
            
            public class Example
            {
                public void Example1()
                {
                    Beam MyPart = new Beam();
                    ArrayList MyList = new ArrayList();
                    ArrayList MyFaceNormalList = new ArrayList();
            
                    Solid Solid = MyPart.GetSolid();
                    FaceEnumerator MyFaceEnum = Solid.GetFaceEnumerator();
                    while (MyFaceEnum.MoveNext())
                    {
                        Face MyFace = MyFaceEnum.Current as Face;
                        if (MyFace != null)
                        {
                            MyFaceNormalList.Add(MyFace.Normal);
            
                            LoopEnumerator MyLoopEnum = MyFace.GetLoopEnumerator();
                            while (MyLoopEnum.MoveNext())
                            {
                                Loop MyLoop = MyLoopEnum.Current as Loop;
                                if (MyLoop != null)
                                {
                                    VertexEnumerator MyVertexEnum = MyLoop.GetVertexEnumerator() as VertexEnumerator;
                                    while (MyVertexEnum.MoveNext())
                                    {
                                        Point MyVertex = MyVertexEnum.Current as Point;
                                        if (MyVertex != null)
                                        {
                                            MyList.Add(MyVertex);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="F:Tekla.Structures.Model.Solid.faceList">
            <summary>
            List of solid faces. Each item of the list is itself a list of loops,
            and each loop is a list of vertexes.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Solid.edgeList">
            <summary>
            List of global edges.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Solid.normalVectorList">
            <summary>
            List of face normal vectors.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Solid.intersectionFaceList">
            <summary>
            List of all faces with loop points fetched with intersection.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Solid.solidId">
            <summary>
            Identifier of the solid.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Solid.solidCreationType">
            <summary>
            Creation type of the solid.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Solid.solidFormingStates">
            <summary>
            Forming states of the solid.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.Solid.#ctor(Tekla.Structures.Identifier)">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Model.Solid"/> class.
            </summary>
            <param name="solidId">Solid id.</param>
        </member>
        <member name="M:Tekla.Structures.Model.Solid.#ctor(Tekla.Structures.Identifier,Tekla.Structures.Model.Solid.SolidCreationTypeEnum)">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Model.Solid"/> class.
            </summary>
            <param name="solidId">Solid id.</param>
            <param name="creationType">Creation type.</param>
        </member>
        <member name="M:Tekla.Structures.Model.Solid.#ctor(Tekla.Structures.Identifier,Tekla.Structures.Forming.FormingStates)">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Model.Solid"/> class.
            </summary>
            <param name="solidId">Solid id.</param>
            <param name="formingStates">Solid forming states.</param>
        </member>
        <member name="M:Tekla.Structures.Model.Solid.#ctor(Tekla.Structures.Identifier,Tekla.Structures.Model.Solid.SolidCreationTypeEnum,Tekla.Structures.Forming.FormingStates)">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Model.Solid"/> class.
            </summary>
            <param name="solidId">Solid id.</param>
            <param name="creationType">Creation type</param>
            <param name="formingStates">Solid forming states.</param>
        </member>
        <member name="M:Tekla.Structures.Model.Solid.Intersect(Tekla.Structures.Geometry3d.LineSegment)">
            <summary>
            Returns a list of line - solid intersection points.
            </summary>
            <param name="line">The intersection line to be used.</param>
            <returns>A list of intersection points.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Solid.Intersect(Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point)">
            <summary>
            Returns a list of line - solid intersection points.
            </summary>
            <param name="point1">The first end of the intersection line.</param>
            <param name="point2">The second end of the intersection line.</param>
            <returns>A list of intersection points.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Solid.Intersect(Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point)">
            <summary>
            Returns a list of plane - solid intersection points. The first item of the list contains
            a list of the outmost intersection polygon and the rest of the items (if there are any)
            inner polygons.
            </summary>
            <param name="point1">The first plane point.</param>
            <param name="point2">The second plane point.</param>
            <param name="point3">The third plane point.</param>
            <returns>An array list of intersection point lists.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Solid.IntersectAllFaces(Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point)">
             <summary>
             Returns an enumerator for an array list of lists of plane - solid intersection points from all intersecting faces. 
             The first item of one list contains points of the outmost intersection polygon and then the inner polygons (if there are any).
             </summary>
             <param name="point1">The first plane point.</param>
             <param name="point2">The second plane point.</param>
             <param name="point3">The third plane point.</param>
             <returns>An enumerator for an array list of intersection point lists.</returns>
             <example>
             <code>
             using Tekla.Structures.Model;
             using Tekla.Structures.Solid;
             using Tekla.Structures.Geometry3d;
             using System.Collections;
             
             public class Example
             {
                 public void Example1()
                 {
                     Beam Beam = new Beam(new Point(0, 0, 0), new Point(500, 0, 0));
                     Beam.Profile.ProfileString = "HEA400";
                     Beam.Name = "SolidPlane";
                     Beam.Finish = "Normal";
                     Beam.Class = "6";
                     Beam.Insert();
            
                     Solid Solid = Beam.GetSolid();
            
                     IEnumerator FaceEnum = Solid.IntersectAllFaces(new Point(0, -50, 0), new Point(1000, -50, 0), new Point(0, -50, 1000));
                     int FaceIndex = 0;
                     while (FaceEnum.MoveNext())
                     {
                         ArrayList Points = FaceEnum.Current as ArrayList;
                         IEnumerator LoopsEnum = Points.GetEnumerator();
            
                         int LoopIndex = 0;
                         while (LoopsEnum.MoveNext())
                         {
                             ArrayList LoopPoints = LoopsEnum.Current as ArrayList;
                             if (LoopPoints != null)
                             {
                                 IEnumerator LoopPointsEnum = LoopPoints.GetEnumerator();
                                 while (LoopPointsEnum.MoveNext())
                                 {
                                     Point SolidPoint = LoopPointsEnum.Current as Point;
                                     if(SolidPoint != null)
                                     {
                                         System.Diagnostics.Debug.WriteLine("Face " + FaceIndex.ToString() + " Loop " + LoopIndex.ToString() + " Point " + SolidPoint.ToString());
                                     }
                                 }
                             }
                             LoopIndex++;
                         }
                         FaceIndex++;
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:Tekla.Structures.Model.Solid.GetFaceEnumerator">
            <summary>
            Returns a new face enumerator in the current plane.
            </summary>
            <returns>A face enumerator to enumerate through solid faces.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Solid.GetEdgeEnumerator">
            <summary>
            Returns a new edge enumerator in the current plane.
            </summary>
            <returns>An edge enumerator to enumerate through the solid's global edges.</returns>
        </member>
        <member name="P:Tekla.Structures.Model.Solid.MinimumPoint">
            <summary>
            Gets the minimum axis-aligned point of the solid in the current plane.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Solid.MaximumPoint">
            <summary>
            Gets the maximum axis-aligned point of the solid in the current plane.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Solid.SolidCreationTypeEnum">
            <summary>
            The creation type of the solid.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Solid.SolidCreationTypeEnum.RAW">
            <summary>
            The solid is created without any boolean operations.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Solid.SolidCreationTypeEnum.FITTED">
            <summary>
            The solid is created with fittings.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Solid.SolidCreationTypeEnum.NORMAL">
            <summary>
            The solid is created including all cutting and fitting operations.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Solid.SolidCreationTypeEnum.HIGH_ACCURACY">
            <summary>
            The solid is created as normal with an exact profile cross section.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Solid.SolidCreationTypeEnum.PLANECUTTED">
            <summary>
            The solid is created with fittings and cut planes.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Solid.SolidCreationTypeEnum.NORMAL_WITHOUT_EDGECHAMFERS">
            <summary>
            The solid is created including all cutting and fitting operations without edge chamfers.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Solid.SolidQueryTypeEnum">
            <summary>
            Solid query type enumeration.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Solid.SolidQueryTypeEnum.SOLID_GET_EXTREMA_MIN">
            <summary>
            Get extrema min.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Solid.SolidQueryTypeEnum.SOLID_GET_EXTREMA_MAX">
            <summary>
            Get extrema max.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Solid.SolidQueryTypeEnum.SOLID_GET_SOLID_DATA">
            <summary>
            Get solid data.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Solid.SolidQueryTypeEnum.SOLID_GET_FACE_NORMAL">
            <summary>
            Get face normal.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Solid.SolidQueryTypeEnum.SOLID_GET_EDGES">
            <summary>
            Get edges.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Solid.SolidReturnValueEnum">
            <summary>
            Solid return value enumeration.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Solid.SolidReturnValueEnum.SOLID_RET_FAILURE">
            <summary>
            Return failure.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Solid.SolidReturnValueEnum.SOLID_RET_CONTINUE_CURRENT_LOOP">
            <summary>
            Return continue current loop.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Solid.SolidReturnValueEnum.SOLID_RET_CONTINUE_NEXT_LOOP">
            <summary>
            Return continue next loop.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Solid.SolidReturnValueEnum.SOLID_RET_CONTINUE_NEXT_FACE">
            <summary>
            Return continue next face.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Solid.SolidReturnValueEnum.SOLID_RET_CONTINUE_NEXT_EDGE">
            <summary>
            Return continue next edge.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Solid.SolidReturnValueEnum.SOLID_RET_SOLID_COMPLETE">
            <summary>
            Return solid complete.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Solid.SolidIntersectionQueryTypeEnum">
            <summary>
            Solid intersection query type enumeration.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Solid.SolidIntersectionQueryTypeEnum.SOLID_LINE_INTERSECTION">
            <summary>
            Line intersection.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Solid.SolidIntersectionQueryTypeEnum.SOLID_PLANE_INTERSECTION">
            <summary>
            Plane intersection.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Solid.SolidIntersectionQueryTypeEnum.SOLID_PLANE_INTERSECTION_ALL">
            <summary>
            Plane intersection all.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Solid.SolidIntersectionReturnTypeEnum">
            <summary>
            Solid intersection return type enumeration.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Solid.SolidIntersectionReturnTypeEnum.SOLID_INTERSECTION_COMPLETE">
            <summary>
            Intersection complete.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Solid.SolidIntersectionReturnTypeEnum.SOLID_INTERSECTION_CONTINUE_FACE">
            <summary>
            Intersection continue face.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Solid.SolidIntersectionReturnTypeEnum.SOLID_INTERSECTION_CONTINUE_LOOP">
            <summary>
            Intersection continue loop.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Solid.SolidIntersectionReturnTypeEnum.SOLID_INTERSECTION_CONTINUE_NEXT_FACE">
            <summary>
            Intersection continue next face.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotSolid_t">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.dotSolid_t.#ctor(System.Int32)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="Size"></param>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSolid_t.SolidId">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSolid_t.FaceIndex">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSolid_t.LoopIndex">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSolid_t.VertexIndex">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSolid_t.VertexStartNumber">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSolid_t.EdgeIndex">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSolid_t.VertexPoint">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSolid_t.Polygon">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSolid_t.FormingStates">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSolid_t.Edges">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSolid_t.QueryType">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSolid_t.CreationType">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSolid_t.ReturnValue">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotIntersectionSolid_t">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.dotIntersectionSolid_t.#ctor(System.Int32)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="Size"></param>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIntersectionSolid_t.SolidId">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIntersectionSolid_t.FaceIndex">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIntersectionSolid_t.LoopIndex">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIntersectionSolid_t.VertexIndex">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIntersectionSolid_t.IntersectionPoint1">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIntersectionSolid_t.IntersectionPoint2">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIntersectionSolid_t.IntersectionPoint3">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIntersectionSolid_t.Polygon">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIntersectionSolid_t.FormingStates">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIntersectionSolid_t.QueryType">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIntersectionSolid_t.CreationType">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIntersectionSolid_t.ReturnValue">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotFormingStates_t">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotFormingStates_t.DeformingType">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotFormingStates_t.FoldingType">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotFormingStates_t.WrappingType">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.dotFormingStates_t.ToStruct(Tekla.Structures.Forming.FormingStates)">
            <summary>
            FormingStates to dotFormingStates_t.
            </summary>
            <param name="formingStates">Instance of FormingState class.</param>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.dotFormingStates_t.FromStruct(Tekla.Structures.Forming.FormingStates)">
            <summary>
            dotFormingStates_t to FormingStates.
            </summary>
            <param name="formingStates">Instance of FormingState class.</param>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotEdges_t">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotEdges_t.nEdges">
            <summary>
            Number of edges in solid.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotEdges_t.EdgeType">
            <summary>
            The edge types of all edges.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotEdges_t.StartX">
            <summary>
            The x-coordinates of start points of all edges.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotEdges_t.StartY">
            <summary>
            The y-coordinates of start points of all edges.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotEdges_t.StartZ">
            <summary>
            The z-coordinates of start points of all edges.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotEdges_t.EndX">
            <summary>
            The x-coordinates of end points of all edges.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotEdges_t.EndY">
            <summary>
            The y-coordinates of end points of all edges.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotEdges_t.EndZ">
            <summary>
            The z-coordinates of end points of all edges.
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.dotEdges_t.GetEdges">
            <summary>
            Get edges in ArrayList.
            </summary>
            <returns>ArrayList of polygon Points</returns>
        </member>
        <member name="T:Tekla.Structures.Model.SurfaceTreatment">
            <summary>
            The SurfaceTreatment class defines a layer above a building element defining what a surface looks like.
            The surface could for example have a tiled look.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures.Geometry3d;
            
            public class Example
            {
                   public void Example1()
                   {
                       ContourPlate cp = new ContourPlate();
                       cp.AddContourPoint(new ContourPoint(new Point( 6000,  6000,0),null));
                       cp.AddContourPoint(new ContourPoint(new Point( 9000,  6000,0),null));
                       cp.AddContourPoint(new ContourPoint(new Point( 9000, 12000,0),null));
                       cp.AddContourPoint(new ContourPoint(new Point(10500, 15000,0),null));
                       cp.AddContourPoint(new ContourPoint(new Point( 6000, 12000,0),null));
            
                       Contour c = new Contour();
                       c.AddContourPoint(new ContourPoint(new Point( 6000,  6000,5), null));
                       c.AddContourPoint(new ContourPoint(new Point( 9000,  6000,5), null));
                       c.AddContourPoint(new ContourPoint(new Point( 9000, 12000,5), null));
                       c.AddContourPoint(new ContourPoint(new Point(10500, 15000,5), null));
                       c.AddContourPoint(new ContourPoint(new Point( 7500, 12000,5), null));
            
                       cp.Insert();
            
                       SurfaceTreatment treatment = new SurfaceTreatment();
                       treatment.Father = cp;
                       treatment.Polygon = c;
                       treatment.StartPoint = new Point(1500,0000,0);
                       treatment.EndPoint = new Point(1500,6000,0);
            
                       bool Result = false;
                       Result = treatment.Insert();
                   }
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.Structures.Model.SurfaceTreatment.#ctor">
            <summary>
            Creates a new surface treatment instance.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.SurfaceTreatment.Insert">
            <summary>
            Inserts the surface treatment to the database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.SurfaceTreatment.Select">
            <summary>
            Selects the surface treatment with the given identifier.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.SurfaceTreatment.Modify">
            <summary>
            Modifies the surface treatment with the given identifier in the database to match
            the current one.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.SurfaceTreatment.Delete">
            <summary>
            Deletes the surface treatment with the given identifier from the database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="P:Tekla.Structures.Model.SurfaceTreatment.Type">
            <summary>
            The type of the surfacing.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.SurfaceTreatment.Color">
            <summary>
            The color of the surfacing.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.SurfaceTreatment.Material">
            <summary>
            Defines the material for the surface treatment.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.SurfaceTreatment.Position">
            <summary>
            Defines the position for the surface treatment.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.SurfaceTreatment.Polygon">
            <summary>
            Defines the area for the surface treatment.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.SurfaceTreatment.StartPoint">
            <summary>
            Determines the origin of the surfacing. The surfacing is then filled out from
            the start point towards the end point.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.SurfaceTreatment.EndPoint">
            <summary>
            Determines the direction the surfacing is filled in. The direction is from the start point
            towards the end point.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.SurfaceTreatment.Father">
            <summary>
            Defines the father part for the surface treatment: the part that the surface treatment is created on.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.SurfaceTreatment.Thickness">
            <summary>
            Defines how thick the surface treatment is.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.SurfaceTreatment.Name">
            <summary>
            The name of the surface treatment.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.SurfaceTreatment.Class">
            <summary>
            The class of the surface treatment.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.SurfaceTreatment.CutByFatherBooleans">
            <summary>
            Defines if the part is cut by the father's cuts.
            </summary>
            <remarks>Polygon cuts are not supported.</remarks>
        </member>
        <member name="P:Tekla.Structures.Model.SurfaceTreatment.TypeName">
            <summary>
            The name of the surface treatment type. The valid names are defined in the product_finishes.dat file.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.SurfaceTreatment.SurfaceTypeEnum">
            <summary>
            The different surfacing types.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.SurfaceTreatment.SurfaceTypeEnum.CONCRETE_FINISH">
            <summary>
            The concrete finish surface type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.SurfaceTreatment.SurfaceTypeEnum.SPECIAL_MIX">
            <summary>
            The special mix surface type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.SurfaceTreatment.SurfaceTypeEnum.TILE_SURFACE">
            <summary>
            The tile surface type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.SurfaceTreatment.SurfaceTypeEnum.STEEL_FINISH">
            <summary>
            The steel finish surface type.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.SurfaceTreatment.SurfaceColorEnum">
            <summary>
            The different surfacing colors.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.SurfaceTreatment.SurfaceColorEnum.WHITE">
            <summary>
            The white surface color.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.SurfaceTreatment.SurfaceColorEnum.RED">
            <summary>
            The red surface color.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.SurfaceTreatment.SurfaceColorEnum.GREEN">
            <summary>
            The green surface color.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.SurfaceTreatment.SurfaceColorEnum.BLUE">
            <summary>
            The blue surface color.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.SurfaceTreatment.SurfaceColorEnum.CYAN">
            <summary>
            The cyan surface color.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.SurfaceTreatment.SurfaceColorEnum.YELLOW">
            <summary>
            The yellow surface color.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.SurfaceTreatment.SurfaceColorEnum.MAGENTA">
            <summary>
            The magenta surface color.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotSurfaceTreatment_t">
            <summary>
            Struct for the Surface Treatment
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSurfaceTreatment_t.ModelObject">
            <summary>
            The object we are extending (Inherited from)
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSurfaceTreatment_t.Type">
            <summary>
            Which Surfacing type the object is.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSurfaceTreatment_t.Color">
            <summary>
            Which colour the Surfacing has.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSurfaceTreatment_t.Material">
            <summary>
            Defines the Material for the Surface Treatment.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSurfaceTreatment_t.Position">
            <summary>
            Defines the Position for the Surface Treatment.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSurfaceTreatment_t.Polygon">
            <summary>
            Defines the area for the Surface Treatment.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSurfaceTreatment_t.StartPoint">
            <summary>
            The StartPoint determines the origin of the Surfacing, it is then filled out from
            here towards the EndPoint.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSurfaceTreatment_t.EndPoint">
            <summary>
            Determines the direction the Surfacing is filled in, the direction is from the StartPoint
            towards the EndPoint.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSurfaceTreatment_t.Father">
            <summary>
            Defines the Father part for the SurfaceTreatment, the part that we create the SurfaceTreatment on.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSurfaceTreatment_t.Thickness">
            <summary>
            Defines how thick the SurfaceTreatment is.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSurfaceTreatment_t.aName">
            <summary>
            The name of the Surface Treatment.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSurfaceTreatment_t.aClass">
            <summary>
            Class
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSurfaceTreatment_t.aTypeName">
            <summary>
            Type name
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSurfaceTreatment_t.CutByFatherBooleans">
            <summary>
            Defines if the part is cut by the father's cuts.
            </summary>
            <remarks>It doesn't support polygon cuts.</remarks>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.IntList">
            <summary>
            The IntList class defines a type safe list of integers.
            </summary>
            <example>
            The following example adds some integers to the list and calculates the sum of them:
            <code>
            using Tekla.Structures.ModelInternal;
            
            public class Example
            {
                   public void Example1()
                   {
                       int Sum = 0;
                       IntList MyIntList = new IntList();
            
                       MyIntList.Add(1);
                       MyIntList.Add(2);
                       MyIntList.Add(5);
            
                       foreach(int MyInt in MyIntList)
                       {
                           Sum += MyInt;
                       }
                   }
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.IntList.#ctor">
            <summary>
            Create an empty IntList.
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.IntList.#ctor(System.Collections.IEnumerable)">
            <summary>
            Create an IntList with content.
            </summary>
            <param name="integers">An IEnumberable of integers. All the objects must be int's.</param>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.IntList.Add(System.Int32)">
            <summary>
            Adds a new integer to the end of the string list.
            </summary>
            <param name="Value">The integer to be added to the list.</param>
            <returns>The index where the integer was added.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.IntList.Contains(System.Int32)">
            <summary>
            Checks if the given integer is in the list.
            </summary>
            <param name="Value">The integer to be checked.</param>
            <returns>True if the integer is in the list, otherwise false.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.IntList.IndexOf(System.Int32)">
            <summary>
            Gets the index of the specified integer.
            </summary>
            <param name="Value">The integer to locate in the list.</param>
            <returns>The index of the integer if found in the list, otherwise -1.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.IntList.IndexOf(System.Int32,System.Int32)">
            <summary>
            Gets the index of the specified integer between the index to start
            the search from and the end of the list.
            </summary>
            <param name="Value">The integer to locate in the list.</param>
            <param name="StartIndex">The index to start the search from.</param>
            <returns>The index of the integer if found in the list, otherwise -1.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.IntList.IndexOf(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the index of the specified integer between the index to start the search from and StartIndex + Count.
            </summary>
            <param name="Value">The integer to locate in the list.</param>
            <param name="StartIndex">The index to start the search from.</param>
            <param name="Count">The number of items searched.</param>
            <returns>The index of the integer if found in the list, otherwise -1.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.IntList.Insert(System.Int32,System.Int32)">
            <summary>
            Inserts the integer to the specified index.
            </summary>
            <param name="Index">The index where the integer is inserted.</param>
            <param name="Value">The integer to be inserted.</param>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.IntList.GetRange(System.Int32,System.Int32)">
            <summary>
            Gets a sub-list of the integer list.
            </summary>
            <param name="Index">The start index of the new list.</param>
            <param name="Count">The number of items in the new list.</param>
            <returns>The new integer list.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.IntList.LastIndexOf(System.Int32)">
            <summary>
            Searches for the last occurence of the integer in the list.
            </summary>
            <param name="Value">The integer to locate.</param>
            <returns>The last index of the integer if found, otherwise -1.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.IntList.LastIndexOf(System.Int32,System.Int32)">
            <summary>
            Searches for the last occurence of the integer in the list.
            </summary>
            <param name="Value">The integer to locate.</param>
            <param name="StartIndex">The index to start the search from.</param>
            <returns>The last index of the integer if found, otherwise -1.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.IntList.LastIndexOf(System.Int32,System.Int32,System.Int32)">
            <summary>
            Searches for the last occurence of the integer in the list.
            </summary>
            <param name="Value">The integer to locate.</param>
            <param name="StartIndex">The index to start the search from.</param>
            <param name="Count">The number of items searched.</param>
            <returns>The last index of the integer if found, otherwise -1.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.IntList.Remove(System.Int32)">
            <summary>
            Removes the first occurence of the integer from the list.
            </summary>
            <param name="Value">The integer to be removed.</param>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.IntList.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of items starting from the given index.
            </summary>
            <param name="Index">The start index.</param>
            <param name="Count">The number of items to be removed.</param>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.IntList.ToArray">
            <summary>
            Copies the integers to an integer array.
            </summary>
            <returns>The array of integers.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.IntList.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.IntList.Item(System.Int32)">
            <summary>
            Gets or sets the integer at the specified index.
            </summary>
            <param name="Index">The zero-based index of the element to get or set.</param>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotnetIntList_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotnetIntList_t.IndexCurrentItem">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotnetIntList_t.NumberItems">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotnetIntList_t.NumberItemsInSet">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotnetIntList_t.aIntList">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotnetIntList_t.ClientId">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.dotnetIntList_t.#ctor(System.Int32)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.dotnetIntList_t.ToStruct(Tekla.Structures.ModelInternal.IntList)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.dotnetIntList_t.FromStruct(Tekla.Structures.ModelInternal.IntList)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.PointList">
            <summary>
            The PointList class defines a type safe point list.
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.PointList.Add(Tekla.Structures.Geometry3d.Point)">
            <summary>
            Adds a new point to the end of the point list.
            </summary>
            <param name="Value">The point to be added to the list.</param>
            <returns>The index where the point was added.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.PointList.Contains(Tekla.Structures.Geometry3d.Point)">
            <summary>
            Checks if the given point is in the list.
            </summary>
            <param name="Value">The point to be checked.</param>
            <returns>True if the point is in the list, otherwise false.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.PointList.IndexOf(Tekla.Structures.Geometry3d.Point)">
            <summary>
            Gets the index of the specified point.
            </summary>
            <param name="Value">The point to locate in the list.</param>
            <returns>The index of the point if found in the list, otherwise -1.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.PointList.IndexOf(Tekla.Structures.Geometry3d.Point,System.Int32)">
            <summary>
            Gets the index of the specified point between the index to start the search
            from and the end of the list.
            </summary>
            <param name="Value">The point to locate in the list.</param>
            <param name="StartIndex">The index to start the search from.</param>
            <returns>The index of the point if found in the list, otherwise -1.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.PointList.IndexOf(Tekla.Structures.Geometry3d.Point,System.Int32,System.Int32)">
            <summary>
            Gets the index of the specified point between the index to start the search from and StartIndex + Count.
            </summary>
            <param name="Value">The point to locate in the list.</param>
            <param name="StartIndex">The index to start the search from.</param>
            <param name="Count">The number of items searched.</param>
            <returns>The index of the point if found in the list, otherwise -1.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.PointList.Insert(System.Int32,Tekla.Structures.Geometry3d.Point)">
            <summary>
            Inserts the point to the specified index.
            </summary>
            <param name="Index">The index where the point is inserted.</param>
            <param name="Value">The point to be inserted.</param>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.PointList.GetRange(System.Int32,System.Int32)">
            <summary>
            Gets a part of the point list.
            </summary>
            <param name="Index">The start index of the new list.</param>
            <param name="Count">The number of items in the new list.</param>
            <returns>The new point list.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.PointList.LastIndexOf(Tekla.Structures.Geometry3d.Point)">
            <summary>
            Searches for the last occurence of the point in the list.
            </summary>
            <param name="Value">The point to locate.</param>
            <returns>The last index of the point if found, otherwise -1.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.PointList.LastIndexOf(Tekla.Structures.Geometry3d.Point,System.Int32)">
            <summary>
            Searches for the last occurence of the point in the list.
            </summary>
            <param name="Value">The point to locate.</param>
            <param name="StartIndex">The index to start the search from.</param>
            <returns>The last index of the point if found, otherwise -1.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.PointList.LastIndexOf(Tekla.Structures.Geometry3d.Point,System.Int32,System.Int32)">
            <summary>
            Searches for the last occurence of the point in the list.
            </summary>
            <param name="Value">The point to locate.</param>
            <param name="StartIndex">The index to start the search from.</param>
            <param name="Count">The number of items searched.</param>
            <returns>The last index of the point if found, otherwise -1.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.PointList.Remove(Tekla.Structures.Geometry3d.Point)">
            <summary>
            Removes the first occurence of the point from the list.
            </summary>
            <param name="Value">The point to be removed.</param>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.PointList.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of items starting from the given index.
            </summary>
            <param name="Index">The start index.</param>
            <param name="Count">The number of items to be removed.</param>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.PointList.ToArray">
            <summary>
            Copies the points to a point array.
            </summary>
            <returns>The array of points.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.PointList.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.PointList.Item(System.Int32)">
            <summary>
            Gets or sets the point at the specified index.
            </summary>
            <param name="Index">The zero-based index of the element to get or set.</param>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotnetPointList_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotnetPointList_t.IndexCurrentItem">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotnetPointList_t.NumberItems">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotnetPointList_t.NumberItemsInSet">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotnetPointList_t.aPointList">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotnetPointList_t.ClientId">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.dotnetPointList_t.#ctor(System.Int32)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.dotnetPointList_t.ToStruct(Tekla.Structures.ModelInternal.PointList)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.dotnetPointList_t.FromStruct(Tekla.Structures.ModelInternal.PointList)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.StringList">
            <summary>
            The StringList class defines a type safe string collection.
            </summary>
            <example>
            <code>
            using Tekla.Structures.ModelInternal;
            
            public class Example
            {
                   public void Example1()
                   {
                       StringList stringList = new StringList();
            
                       stringList.Add("MyString");
                       stringList.Add("MySecondString");
                   }
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.StringList.#ctor(System.Int32)">
            <summary>
            Creates a new string list instance with the given capacity.
            </summary>
            <param name="Capacity">The capacity of the string list.</param>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.StringList.#ctor">
            <summary>
            Creates a new string list instance.
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.StringList.Add(System.String)">
            <summary>
            Adds a new string to the end of the string list.
            </summary>
            <param name="Value">The string to be added to the list.</param>
            <returns>The index where the string was added.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.StringList.Contains(System.String)">
            <summary>
            Checks if the string is in the list.
            </summary>
            <param name="Value">The string to be checked.</param>
            <returns>True if the string is in the list, otherwise false.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.StringList.IndexOf(System.String)">
            <summary>
            Gets the index of the specified string.
            </summary>
            <param name="Value">The string to locate in the list.</param>
            <returns>The index of the string if found in the list, otherwise -1.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.StringList.IndexOf(System.String,System.Int32)">
            <summary>
            Gets the index of the specified string between the index to start
            the search from and the end of the list.
            </summary>
            <param name="Value">The string to locate in the list.</param>
            <param name="StartIndex">The index to start the search from.</param>
            <returns>The index of the string if found in the list, otherwise -1.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.StringList.IndexOf(System.String,System.Int32,System.Int32)">
            <summary>
            Gets the index of the specified string between the index to start the search from and StartIndex + Count.
            </summary>
            <param name="Value">The string to locate in the list.</param>
            <param name="StartIndex">The index to start the search from.</param>
            <param name="Count">The number of items searched.</param>
            <returns>The index of the string if found in the list, otherwise -1.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.StringList.Insert(System.Int32,System.String)">
            <summary>
            Inserts the string to the specified index.
            </summary>
            <param name="Index">The index where the string is inserted.</param>
            <param name="Value">The string to be inserted.</param>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.StringList.GetRange(System.Int32,System.Int32)">
            <summary>
            Gets a part of the string list.
            </summary>
            <param name="Index">The start index of the new list.</param>
            <param name="Count">The number of items in the new list.</param>
            <returns>The new string list.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.StringList.LastIndexOf(System.String)">
            <summary>
            Searches for the last occurence of the string in the list.
            </summary>
            <param name="Value">The string to locate.</param>
            <returns>The last index of the string if found, otherwise -1.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.StringList.LastIndexOf(System.String,System.Int32)">
            <summary>
            Searches for the last occurence of the string in the list.
            </summary>
            <param name="Value">The string to locate.</param>
            <param name="StartIndex">The index to start the search from.</param>
            <returns>The last index of the string if found, otherwise -1.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.StringList.LastIndexOf(System.String,System.Int32,System.Int32)">
            <summary>
            Searches for the last occurence of the string in the list.
            </summary>
            <param name="Value">The string to locate.</param>
            <param name="StartIndex">The index to start the search from.</param>
            <param name="Count">The number of items searched.</param>
            <returns>The last index of the string if found, otherwise -1.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.StringList.Remove(System.String)">
            <summary>
            Removes the first occurence of the string from the list.
            </summary>
            <param name="Value">The string to be removed.</param>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.StringList.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of items starting from the given index.
            </summary>
            <param name="Index">The start index.</param>
            <param name="Count">The number of items to be removed.</param>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.StringList.ToArray">
            <summary>
            Copies the strings to a string array.
            </summary>
            <returns>The array of strings.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.StringList.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.StringList.Item(System.Int32)">
            <summary>
            Gets or sets the string at the specified index.
            </summary>
            <param name="Index">The zero-based index of the element to get or set.</param>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotnetStringList_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotnetStringList_t.IndexCurrentItem">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotnetStringList_t.CurrentItem">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotnetStringList_t.ClientId">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.Model.UI.ClipPlane">
            <summary>
            The ClipPlane class defines a clip plane which can be used together with a visible view.
            </summary>
            <example>
            The following example shows how three ClipPlanes are created to the first visible view:
            <code>
            using System;
            using Tekla.Structures.Model.UI;
            using Tekla.Structures.Geometry3d;
            
            public class ClipPlaneExample
            {
                public void ClipPlaneExample1()
                {
                    ModelViewEnumerator ViewEnum = ViewHandler.GetVisibleViews();
                    ViewEnum.MoveNext();
                    View ActiveView = ViewEnum.Current;
                    ClipPlane CPlane = new ClipPlane();
                    CPlane.View = ActiveView;
                    CPlane.UpVector = new Vector(1, 0, 0);
                    CPlane.Location = new Point(20000, 10000, 5000);
                    CPlane.Insert();
            
                    CPlane.UpVector = new Vector(0, 1, 0);
                    CPlane.Location = new Point(10000, 20000, 2000);
                    CPlane.Insert();
            
                    CPlane.UpVector = new Vector(0, 0, 1);
                    CPlane.Location = new Point(20000, 20000, 6000);
                    CPlane.Insert();
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.Structures.Model.UI.ClipPlane.Insert">
             <summary>
            Creates a new clip plane to the application view.
            The application view must be visible.
            </summary>
             <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.UI.ClipPlane.Delete">
             <summary>
            Deletes the clip plane from the application view.
            The application view must be visible.
            </summary>
             <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.UI.ClipPlane.Modify">
             <summary>
            Modifies the clip plane position in the application view.
            The application view must be visible.
            </summary>
             <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.UI.ClipPlane.#ctor">
            <summary>Instantiates a new view camera instance with zero length vectors.</summary>
        </member>
        <member name="M:Tekla.Structures.Model.UI.ClipPlane.#ctor(System.Int32)">
            <summary>Instantiates a new view camera instance with zero length vectors.</summary>
        </member>
        <member name="P:Tekla.Structures.Model.UI.ClipPlane.Location">
            <summary>The clip plane location in global coordinates (XYZ).</summary>
        </member>
        <member name="P:Tekla.Structures.Model.UI.ClipPlane.UpVector">
            <summary>The clip plane up vector in global coordinates (XYZ).</summary>
        </member>
        <member name="P:Tekla.Structures.Model.UI.ClipPlane.View">
            <summary>The view the clip plane belongs to.</summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotClipPlane_t">
            <summary>
            View ClipPlane struct
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotClipPlane_t.ID">
            <summary> Clipplane ID </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotClipPlane_t.Location">
            <summary> Clipplane location in global coordinates (XYZ) </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotClipPlane_t.UpVector">
            <summary> Clipplane up vector (Roll) </summary>
        </member>
        <member name="T:Tekla.Structures.Model.UI.ClipPlaneCollection">
            <summary>
            The ClipPlaneCollection class handles the collection of the clip planes.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.UI.ClipPlaneCollection._ClipPlanes">
            <summary>
            Contains all the Inputs, in the same order as they were entered
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.UI.ClipPlaneCollection.#ctor">
            <summary>
            Creates a new input item collection.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.UI.ClipPlaneCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"></see> to
            an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from
            the <see cref="T:System.Collections.ICollection"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.
            </param>
            <param name="index">The zero-based index in the array at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the array is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the index is less than zero.</exception>
            <exception cref="T:System.ArgumentException">
            Thrown when the array is multidimensional, or the index is equal to or greater than the length of the array, or the number of elements
            in the source <see cref="T:System.Collections.ICollection"></see> is greater than the available space from the index to
            the end of the destination array.
            </exception>
            <exception cref="T:System.InvalidCastException">
            Thrown when the type of the source <see cref="T:System.Collections.ICollection"></see> cannot be cast automatically to the type of
            the destination array.
            </exception>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Tekla.Structures.Model.UI.ClipPlaneCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.</returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Tekla.Structures.Model.UI.ClipPlaneCollection.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.ICollection"></see>.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Tekla.Structures.Model.UI.ClipPlaneCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe).
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Tekla.Structures.Model.UI.ClipPlaneCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:Tekla.Structures.Model.UI.Color">
            <summary>
            The Color class represents an RGB color with transparency. The color values must be between 0.0 and 1.0.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Model.UI;
            
            public class Example
            {
                   public void Example1()
                   {
                       Color SolidGreen = new Color(0.0, 1.0, 0.0);
                       Color SeeThroughBlue = new Color(0.0, 0.0, 1.0, 0.5);
                   }
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.Structures.Model.UI.Color.#ctor">
            <summary>
            Creates a new color object. The default object is black.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.UI.Color.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Creates a new color object with the given values.
            </summary>
            <param name="Red">The red value of the color, between 0.0 and 1.0.</param>
            <param name="Green">The green value of the color, between 0.0 and 1.0.</param>
            <param name="Blue">The blue value of the color, between 0.0 and 1.0.</param>
        </member>
        <member name="M:Tekla.Structures.Model.UI.Color.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a new color object with the given values.
            </summary>
            <param name="Red">The red value of the color, between 0.0 and 1.0.</param>
            <param name="Green">The green value of the color, between 0.0 and 1.0.</param>
            <param name="Blue">The blue value of the color, between 0.0 and 1.0.</param>
            <param name="Transparency">The transparency value of the color, 
            between 0.0 (completely see-through) and 1.0 (completely solid).</param>
        </member>
        <member name="M:Tekla.Structures.Model.UI.Color.ToStruct(Tekla.Structures.ModelInternal.dotColor_t@)">
            <summary>
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.UI.Color.FromStruct(Tekla.Structures.ModelInternal.dotColor_t@)">
            <summary>
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.UI.Color.Red">
            <summary>
            The red value of the color, between 0.0 and 1.0.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.UI.Color.Green">
            <summary>
            The green value of the color, between 0.0 and 1.0.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.UI.Color.Blue">
            <summary>
            The blue value of the color, between 0.0 and 1.0.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.UI.Color.Transparency">
            <summary>
            The transparency value of the color, between 0.0 (completely see-through) and 1.0 (completely solid).
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotColor_t">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotColor_t.Red">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotColor_t.Green">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotColor_t.Blue">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotColor_t.Transparency">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.UI.GraphicPolyLine">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.UI.GraphicPolyLine.#ctor">
            <summary>
            Create a black line with width 1 and solid line type.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.UI.GraphicPolyLine.#ctor(Tekla.Structures.Model.UI.Color,System.Int32,Tekla.Structures.Model.UI.GraphicPolyLine.LineType)">
            <summary>
            Create a graphic polyline object with 0 points.
            </summary>
            <param name="color">The color of the line.</param>
            <param name="width">The width of the line.</param>
            <param name="type">The type of the line. For example solid, dashed or dotted.</param>
        </member>
        <member name="M:Tekla.Structures.Model.UI.GraphicPolyLine.#ctor(Tekla.Structures.Geometry3d.PolyLine,Tekla.Structures.Model.UI.Color,System.Int32,Tekla.Structures.Model.UI.GraphicPolyLine.LineType)">
            <summary>
            Create a graphic polyline object.
            </summary>
            <param name="polyLine">The path of the line.</param>
            <param name="color">The color of the line.</param>
            <param name="width">The width of the line.</param>
            <param name="type">The type of the line. For example solid, dashed or dotted.</param>
        </member>
        <member name="M:Tekla.Structures.Model.UI.GraphicPolyLine.ToStruct(Tekla.Structures.ModelInternal.dotGraphicPolyLine_t@)">
            <summary>
            
            </summary>
            <param name="graphicPolyLine"></param>
        </member>
        <member name="M:Tekla.Structures.Model.UI.GraphicPolyLine.FromStruct(Tekla.Structures.ModelInternal.dotGraphicPolyLine_t@)">
            <summary>
            
            </summary>
            <param name="graphicPolyLine"></param>
        </member>
        <member name="P:Tekla.Structures.Model.UI.GraphicPolyLine.PolyLine">
            <summary>
            The path of the line.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.UI.GraphicPolyLine.Color">
            <summary>
            The line color.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.UI.GraphicPolyLine.Width">
            <summary>
            The line width in pixels.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.UI.GraphicPolyLine.Type">
            <summary>
            The appearance of the line. For instance solid, dashed or dotted.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.UI.GraphicPolyLine.LineType">
            <summary>
            The appearance of the line. For instance solid, dashed or dotted.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.UI.GraphicPolyLine.LineType.Solid">
            <summary>
            The solid line type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.UI.GraphicPolyLine.LineType.Dashed1">
            <summary>
            The first dashed line type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.UI.GraphicPolyLine.LineType.Dashed2">
            <summary>
            The second dashed line type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.UI.GraphicPolyLine.LineType.DashedAndDotted">
            <summary>
            The dashed and dotted line type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.UI.GraphicPolyLine.LineType.Dotted">
            <summary>
            The dotted line type.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotGraphicPolyLine_t">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGraphicPolyLine_t.Color">
            <summary>
            
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGraphicPolyLine_t.Width">
            <summary>
            
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGraphicPolyLine_t.Type">
            <summary>
            
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGraphicPolyLine_t.ClientId">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.Model.UI.PickInput">
            <summary>
            The PickInput class handles the input of picked objects and positions. 
            </summary>
            <example>
            The following example asks the user to pick a face and then shows the input for the plug-in:
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures.Model.UI;
            using Tekla.Structures.Geometry3d;
            using TSG = Tekla.Structures.Geometry3d;
            
            using System;
            using System.Collections;
            using System.Windows.Forms;
            
            public class Example
            {
                public void Example1()
                {
                    Picker Picker = new Picker();
                    try
                    {
                        PickInput Input = Picker.PickFace("");
                        IEnumerator MyEnum = Input.GetEnumerator();
                        while (MyEnum.MoveNext())
                        {
                            InputItem Item = MyEnum.Current as InputItem;
                            if (Item.GetInputType() == InputItem.InputTypeEnum.INPUT_1_OBJECT)
                            {
                                ModelObject M = Item.GetData() as ModelObject;
                                MessageBox.Show(M.Identifier.ToString());
                            }
                            if (Item.GetInputType() == InputItem.InputTypeEnum.INPUT_POLYGON)
                            {
                                ArrayList Points = Item.GetData() as ArrayList;
                                MessageBox.Show((Points[0] as TSG.Point).ToString());
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        MessageBox.Show(e.ToString());
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="F:Tekla.Structures.Model.UI.PickInput._InputItems">
            <summary>
            Contains all the Inputs, in the same order as they were entered
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.UI.PickInput.#ctor">
            <summary>
            Creates a new component input object.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.UI.PickInput.AddInputPositions(Tekla.Structures.Geometry3d.Point)">
            <summary>
            Adds an input positions to the pick input. 1-n Positions 
            </summary>
            <param name="P">The position to be added.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.UI.PickInput.AddTwoInputPositions(Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point)">
            <summary>
            Adds two input positions to the pick input.
            </summary>
            <param name="Position1">The first position to be added.</param>
            <param name="Position2">The second position to be added.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.UI.PickInput.AddInputPolygon(Tekla.Structures.Model.Polygon)">
            <summary>
            Adds a polygon to the pick input.
            </summary>
            <param name="P">The polygon to be added.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.UI.PickInput.AddInputObject(Tekla.Structures.Model.ModelObject)">
            <summary>
            Adds a model object to the pick input.
            </summary>
            <param name="M">The model object to be added.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.UI.PickInput.AddInputObjects(System.Collections.ArrayList)">
            <summary>
            Adds an array list of  model objects to the pick input.
            </summary>
            <param name="PickObjects">A list of model objects in the correct order.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.UI.PickInput.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"></see> to
            an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from
            the <see cref="T:System.Collections.ICollection"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.
            </param>
            <param name="index">The zero-based index in the array at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">The array is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The index is less than zero.</exception>
            <exception cref="T:System.ArgumentException">
            The array is multidimensional, or the index is equal to or greater than the length of the array, or the number of elements
            in the source <see cref="T:System.Collections.ICollection"></see> is greater than the available space from the index to
            the end of the destination array.
            </exception>
            <exception cref="T:System.InvalidCastException">
            The type of the source <see cref="T:System.Collections.ICollection"></see> cannot be cast automatically to the type of
            the destination array.
            </exception>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Tekla.Structures.Model.UI.PickInput.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.</returns>
            <filterpriority>2</filterpriority>
            <example>
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures.Geometry3d;
            using System;
            using System.Collections;
            
            public class Example
            {
                public void Example1()
                {
                    Beam B = new Beam(new Point(12000, 0, 0), new Point(12000, 0, 6000));
                    B.Profile.ProfileString = "380*380";
                    B.Material.MaterialString = "K40-1";
                    if (B.Insert())
                    {
                        Component C = new Component();
                        C.Name = "Component Test";
                        C.Number = 30000063;
            
                        ComponentInput CI = new ComponentInput();
                        CI.AddInputObject(B);
            
                        C.SetComponentInput(CI);
            
                        C.LoadAttributesFromFile("standard");
            
                        C.SetAttribute("side_bar_space", 333.0);
            
                        if (!C.Insert())
                        {
                            Console.WriteLine("Component Insert failed");
                        }
                        else
                        {
                            // test fetching component input
                            ComponentInput ComponentSel = C.GetComponentInput();
                            IEnumerator Enumerator = ComponentSel.GetEnumerator();
                            while (Enumerator.MoveNext())
                            {
                                InputItem ObjectInput = Enumerator.Current as InputItem;
                                if (ObjectInput.GetInputType() == InputItem.InputTypeEnum.INPUT_1_OBJECT)
                                {
                                    Beam BeamInput = ObjectInput.GetData() as Beam;
                                }
                            }
                        }
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="P:Tekla.Structures.Model.UI.PickInput.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.ICollection"></see>.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Tekla.Structures.Model.UI.PickInput.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe).
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Tekla.Structures.Model.UI.PickInput.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:Tekla.Structures.Model.UI.GraphicsDrawer">
            <summary>
            The GraphicsDrawer class draws temporary graphics in the currently active rendered view in Tekla Structures.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Model.UI;
            using Tekla.Structures.Geometry3d;
            
            public class Example
            {
                   public void Example1()
                   {
                       GraphicsDrawer drawer = new GraphicsDrawer();
            
                       drawer.DrawText(new Point(0.0, 1000.0, 1000.0), "TEXT SAMPLE", new Color(1.0, 0.5, 0.0));
                       drawer.DrawLineSegment(new Point(0.0, 0.0, 0.0), new Point(1000.0, 1000.0, 1000.0), new Color(1.0, 0.0, 0.0));
            
                       Mesh mesh = new Mesh();
                       mesh.AddPoint(new Point(   0.0,    0.0, 0.0));
                       mesh.AddPoint(new Point(1000.0,    0.0, 0.0));
                       mesh.AddPoint(new Point(1000.0, 1000.0, 0.0));
                       mesh.AddPoint(new Point(   0.0, 1000.0, 0.0));
                       mesh.AddTriangle(0,1,2);
                       mesh.AddTriangle(0,2,3);
                       mesh.AddLine(0,1); mesh.AddLine(1,2); mesh.AddLine(2,3); mesh.AddLine(3,1);
            
                       drawer.DrawMeshSurface(mesh, new Color(1.0, 0.0, 0.0, 0.5));
                       drawer.DrawMeshLines(mesh, new Color(0.0, 0.0, 1.0));
                   }
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.Structures.Model.UI.GraphicsDrawer.#ctor">
            <summary>
            Creates a new graphics drawer instance.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.UI.GraphicsDrawer.DrawText(Tekla.Structures.Geometry3d.Point,System.String,Tekla.Structures.Model.UI.Color)">
            <summary>
            Draws a temporary text in the currently active rendered view.
            </summary>
            <param name="Location">The location of the text's top-left corner.</param>
            <param name="Text">The text to be drawn. The maximum length is 511 characters.</param>
            <param name="Color">The color of the text. The transparency value of the color is ignored.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.UI.GraphicsDrawer.DrawLineSegment(Tekla.Structures.Geometry3d.LineSegment,Tekla.Structures.Model.UI.Color)">
            <summary>
            Draws a temporary line segment in the currently active rendered view.
            </summary>
            <param name="LineSegment">The line to draw.</param>
            <param name="Color">The color of the line. The transparency value of the color is ignored.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.UI.GraphicsDrawer.DrawLineSegment(Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Model.UI.Color)">
            <summary>
            Draws a temporary line segment in the currently active rendered view.
            </summary>
            <param name="Point1">The first point of the line.</param>
            <param name="Point2">The second point of the line.</param>
            <param name="Color">The color of the line. The transparency value of the color is ignored.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.UI.GraphicsDrawer.DrawMeshSurface(Tekla.Structures.Model.UI.Mesh,Tekla.Structures.Model.UI.Color)">
            <summary>
            Draws the mesh surface as temporary graphics in the 
            currently active Tekla Structures rendered view. The counterclockwise sides
            of the mesh triangles are drawn.
            </summary>
            <param name="Mesh">The mesh to draw.</param>
            <param name="Color">The color of the mesh.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.UI.GraphicsDrawer.DrawMeshLines(Tekla.Structures.Model.UI.Mesh,Tekla.Structures.Model.UI.Color)">
            <summary>
            Draws the mesh lines as temporary graphics in the 
            currently active Tekla Structures rendered view.
            </summary>
            <param name="Mesh">The mesh to draw.</param>
            <param name="Color">The color of the mesh lines. The transparency value of the color is ignored.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.UI.GraphicsDrawer.DrawPolyLine(Tekla.Structures.Model.UI.GraphicPolyLine)">
            <summary>
            Draw a temporary polyline into all open Tekla Structures views.
            </summary>
            <param name="GraphicPolyLine">The polyline to draw.</param>
            <returns>The identifier of the temporary graphic. You can delete the graphic with RemoveTemporaryGraphicsObject.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.UI.GraphicsDrawer.RemoveTemporaryGraphicsObject(System.Int32)">
            <summary>
            Remove a temporary graphic object from all views.
            </summary>
            <param name="GraphicObjectID">The identifier that was returned when the object was created.</param>
        </member>
        <member name="M:Tekla.Structures.Model.UI.GraphicsDrawer.RemoveTemporaryGraphicsObjects(System.Collections.IEnumerable)">
            <summary>
            Remove a list of temporary graphic objects from all views.
            </summary>
            <param name="GraphicObjectIDs">The identifiers that was returned when the object was created.</param>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotDrawText_t">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotDrawText_t.Location">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotDrawText_t.aText">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotDrawText_t.Color">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotDrawPolyLine_t">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotDrawPolyLine_t.Polygon">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotDrawPolyLine_t.Color">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotDrawPolygonSurface_t">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotDrawPolygonSurface_t.Polygon">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotDrawPolygonSurface_t.Color">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.UI.Mesh">
            <summary>
            The Mesh class represents a mesh for drawing three-dimensional data.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Model.UI;
            using Tekla.Structures.Geometry3d;
            using System;
            
            public class ConeMesh
            {
                private Mesh _mesh;
            
                public Mesh Mesh
                {
                    get { return _mesh; }
                }
            
                public ConeMesh(Point center, double height, double radius, int segmentCount)
                {
                    _mesh = new Mesh();
                    Point centerTop = new Point(center);
                    centerTop.Z = centerTop.Z + height;
                    _mesh.Points.Add(centerTop);
            
                    double x = center.X + radius * Math.Cos(0.0);
                    double y = center.Y + radius * Math.Sin(0.0);
                    double z = center.Z;
            
                    Point p = new Point(x, y, z);
                    _mesh.AddPoint(p);
                    _mesh.AddLine(0, 1);
            
                    for (int i = 1; i &lt; segmentCount; i++)
                    {
                        x = center.X + radius * Math.Cos(i * (2 * Math.PI) / segmentCount);
                        y = center.Y + radius * Math.Sin(i * (2 * Math.PI) / segmentCount);
                        z = center.Z;
            
                        p = new Point(x, y, z);
            
                        _mesh.AddPoint(p);
                        _mesh.AddTriangle(0, i, i + 1);
                        _mesh.AddLine(0, i + 1);
                        _mesh.AddLine(i, i + 1);
                    }
            
                    _mesh.AddTriangle(0, segmentCount, 1);
                    _mesh.AddLine(segmentCount, 1);
                }
            }
            
            public class Example
            {
                   public void Example1()
                   {
                       GraphicsDrawer drawer = new GraphicsDrawer();
                       ConeMesh cone = new ConeMesh(new Point(0.0, 0.0, 0.0), 5000.0, 5000.0, 100);
            
                       drawer.DrawMeshSurface(cone.Mesh, new Color(1.0, 0.0, 0.0, 1.0));
                       drawer.DrawMeshLines(cone.Mesh, new Color(0.0, 0.0, 1.0));
                   }
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.Structures.Model.UI.Mesh.#ctor">
            <summary>
            Creates a new empty mesh instance.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.UI.Mesh.#ctor(System.Collections.ArrayList,System.Collections.ArrayList,System.Collections.ArrayList)">
            <summary>
            Creates a new mesh instance with the given points, triangles and lines. Does not check
            the indices in the given triangles and lines array lists for correctness.
            </summary>
            <param name="Points">An array list of point objects representing the mesh points. Null represents
            no points. </param>
            <param name="Triangles">An array list of indices (of type integer) pointing to the points array list. 
            Three consecutive indices represent a single triangle. The first index is 0. If null, the mesh
            will not contain any triangles.</param>
            <param name="Lines">An array list of indices (of type integer) pointing to the points array list. 
            Two consecutive indices represent a single line. The first index is 0. If null, the mesh
            will not contain any lines.</param>
        </member>
        <member name="M:Tekla.Structures.Model.UI.Mesh.AddPoint(Tekla.Structures.Geometry3d.Point)">
            <summary>
            Adds a new point in the mesh.
            </summary>
            <param name="Point">The point to be added, must not be null.</param>
            <returns>The index of the added point.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.UI.Mesh.AddTriangle(System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds a new triangle in the mesh.
            </summary>
            <param name="Index1">The index of the triangle's first point in the points array list.</param>
            <param name="Index2">The index of the triangle's second point in the points array list.</param>
            <param name="Index3">The index of the triangle's third point in the points array list.</param>
        </member>
        <member name="M:Tekla.Structures.Model.UI.Mesh.AddLine(System.Int32,System.Int32)">
            <summary>
            Adds a new line in the mesh.
            </summary>
            <param name="Index1">The index of the line's start point in the points array list.</param>
            <param name="Index2">The index of the line's end point in the points array list.</param>
        </member>
        <member name="P:Tekla.Structures.Model.UI.Mesh.Points">
            <summary>
            An array list of point objects representing the mesh points.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.UI.Mesh.Triangles">
            <summary>
            An array list of indices (as integers) pointing to the points array list. Three consecutive indices
            always represent a single triangle.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.UI.Mesh.Lines">
            <summary>
            An array list of indices (as integers) pointing to the points array list. Two consecutive indices
            always represent a single line.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.UI.ModelObjectSelector">
            <summary>
            The ModelObjectSelector class can be used to select objects from the Tekla Structures user interface.
            Currently, these selections both select the objects from the database and highlight them visually.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures.Geometry3d;
            using System.Collections;
            
            public class Example
            {
                   public void Example1()
                   {
                       Model Model = new Model();
            
                       Beam B = new Beam(new Point(0,0,0), new Point(0,0,6000));
                       Beam B1 = new Beam(new Point(0,1000,0), new Point(0,1000,6000));
                       Beam B2 = new Beam(new Point(0,2000,0), new Point(0,2000,6000));
            
                       B.Insert();
                       B1.Insert();
                       B2.Insert();
            
                       ArrayList ObjectsToSelect = new ArrayList();
                       ObjectsToSelect.Add(B);
                       ObjectsToSelect.Add(B2);
            
                       Tekla.Structures.Model.UI.ModelObjectSelector MS = new Tekla.Structures.Model.UI.ModelObjectSelector();
                       MS.Select(ObjectsToSelect);
            
                       Model.CommitChanges();
                   }
            }
            </code>
            </example>
        </member>
        <member name="F:Tekla.Structures.Model.UI.ModelObjectSelector.SELECT_MAX_SIZE">
            <summary>
            Maximum amount of elements in one function call
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.UI.ModelObjectSelector.#ctor">
            <summary>
            Creates a new model object selector instance.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.UI.ModelObjectSelector.GetSelectedObjects">
            <summary>
            Returns an enumerator of all the selected model objects in the model view.
            </summary>
            <returns>A model object enumerator of all the selected model objects.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.UI.ModelObjectSelector.GetObjectsByBoundingBox(Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Model.UI.View)">
            <summary>
            Returns an enumerator of the given view's visible model objects that collide with the given
            geometrical bounding box. Note that this method uses approximate bounding
            boxes and thus is NOT EXACT, and may return objects not necessarily colliding
            with the given box but only being somewhere near to it.
            </summary>
            <param name="MinPoint">The minimum point of the bounding box.</param>
            <param name="MaxPoint">The maximum point of the bounding box.</param>
            <param name="View">The view to get the objects from.</param>
            <returns>
            A model object enumerator of the visible model objects colliding with the given bounding box.
            </returns>
        </member>
        <member name="M:Tekla.Structures.Model.UI.ModelObjectSelector.Select(System.Collections.ArrayList)">
            <summary>
            Selects a list of objects from the user interface.
            </summary>
            <param name="ModelObjects">The list of model objects to select.</param>
            <returns>True on success.</returns>
        </member>
        <member name="T:Tekla.Structures.Model.UI.ModelObjectSelector.FunctionalityEnum">
            <summary>
            Enumeration about what to do in TS size
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotUIModelObjectSelector_t">
            <summary>
            Struct for UI selection
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotUIModelObjectSelector_t.Functionality">
            <summary>
            FunctionalityEnum
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotUIModelObjectSelector_t.nObjects">
            <summary>
            Number of objects
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotUIModelObjectSelector_t.aObjects">
            <summary>
            IDs
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.UI.ModelViewEnumerator">
            <summary>
            The ModelViewEnumerator class is an enumerator class for model views.
            The enumerator enables model view items to be looped.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.UI.ModelViewEnumerator.MoveNext">
            <summary>Moves to the next view in the enumerator.</summary>
            <returns>False on failure.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.UI.ModelViewEnumerator.Reset">
            <summary>Resets the enumerator.</summary>
        </member>
        <member name="P:Tekla.Structures.Model.UI.ModelViewEnumerator.Current">
            <summary>Returns the current view.</summary>
        </member>
        <member name="P:Tekla.Structures.Model.UI.ModelViewEnumerator.Count">
            <summary>Returns the number of views in the enumerator.</summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotViewSelector_t">
            <summary>
            Struct for ModelViewSelector
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotViewSelector_t.ClientId">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotViewSelector_t.ViewCount">
            <summary> Number of returned views. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotViewSelector_t.SelectorType">
            <summary> Defines what type of views are fetched. </summary>
        </member>
        <member name="T:Tekla.Structures.Model.UI.Picker">
            <summary>
            The Picker class can be used to query the user to do manual picks of objects and points from the Tekla Structures model.
            The methods throw an exception if the user interrupts (cancels) the pick command.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Model.UI;
            using Tekla.Structures.Geometry3d;
            
            using System;
            using System.Windows.Forms;
            
            public class Example
            {
                   public void Example1()
                   {
                       Picker Picker = new Picker();
                       Point p = null;
                       try
                       {
                           p = Picker.PickPoint();
                       }
                       catch (Exception e)
                       {
                           MessageBox.Show(e.ToString());
                       }
                   }
            }
            </code>
            </example>
            <remarks>
            Prompts
            <para>
            Tekla Structures prefixes the given prompt with "prompt_" and
            looks for a translation in the <c>prompts.ail</c> file. If the translation
            (e.g. "prompt_Pick_first_position") is not found in the <c>prompts.ail</c>
            file, the prompt string is displayed as such. This feature can be used to
            give already translated strings to the picker.
            </para>
            </remarks>
        </member>
        <member name="M:Tekla.Structures.Model.UI.Picker.#ctor">
            <summary>
            Creates a new picker instance.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.UI.Picker.PickPoint">
            <summary>
            Queries the user to pick a point from the model. 
            </summary>
            <returns>The point the user picked.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.UI.Picker.PickPoint(System.String)">
            <summary>
            Queries the user to pick a point from the model with the given prompt.
            </summary>
            <param name="Prompt">The string to display as user guidance.</param>
            <returns>The point the user picked.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.UI.Picker.PickPoints(Tekla.Structures.Model.UI.Picker.PickPointEnum)">
            <summary>
            Queries the user to pick points from the model.
            </summary>
            <param name="Enum">Indicates how many points the user must pick.</param>
            <returns>A list of points the user picked.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.UI.Picker.PickPoints(Tekla.Structures.Model.UI.Picker.PickPointEnum,System.String)">
            <summary>
            Queries the user to pick points from the model with the given prompt.
            </summary>
            <param name="Enum">Indicates how many points the user must pick.</param>
            <param name="Prompt">The string to display as user guidance.</param>
            <returns>A list of points the user picked.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.UI.Picker.PickLine">
            <summary>
            Queries the user to pick a line from the model.
            </summary>
            <returns>A list of points the user picked.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.UI.Picker.PickLine(System.String)">
            <summary>
            Queries the user to pick a line from the model with the given prompt.
            </summary>
            <param name="Prompt">The string to display as user guidance.</param>
            <returns>A list of points the user picked.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.UI.Picker.PickFace">
            <summary>
            Queries the user to pick a face from the model.
            </summary>
            <returns>A list of the vertices of the face and the object the user picked as one PickInput instance.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.UI.Picker.PickFace(System.String)">
            <summary>
            Queries the user to pick a face from the model with the given prompt.
            </summary>
            <param name="Prompt">The string to display as user guidance.</param>
            <returns>A list of the vertices of the face and the object the user picked as one PickInput instance.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.UI.Picker.PickObject(Tekla.Structures.Model.UI.Picker.PickObjectEnum)">
            <summary>
            Queries the user to pick one model object from the model.
            </summary>
            <param name="Enum">Indicates the type of objects to pick.</param>
            <returns>One model object instance.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.UI.Picker.PickObject(Tekla.Structures.Model.UI.Picker.PickObjectEnum,System.String)">
            <summary>
            Queries the user to pick one model object from the model with the given prompt.
            </summary>
            <param name="Enum">Indicates the type of objects to pick.</param>
            <param name="Prompt">The string to display as user guidance.</param>
            <returns>One model object instance.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.UI.Picker.PickObjects(Tekla.Structures.Model.UI.Picker.PickObjectsEnum)">
            <summary>
            Queries the user to pick model objects from the model.
            </summary>
            <param name="Enum">Indicates the type and amount of objects to pick.</param>
            <returns>An enumerator of model object instances.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.UI.Picker.PickObjects(Tekla.Structures.Model.UI.Picker.PickObjectsEnum,System.String)">
            <summary>
            Queries the user to pick model objects from the model with the given prompt.
            </summary>
            <param name="Enum">Indicates the type and amount of objects to pick.</param>
            <param name="Prompt">The string to display as user guidance.</param>
            <returns>An enumerator of model object instances.</returns>
        </member>
        <member name="T:Tekla.Structures.Model.UI.Picker.PickPointEnum">
            <summary>
            The possible point pick types.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.UI.Picker.PickPointEnum.PICK_ONE_POINT">
            <summary>
            Pick one point (x,y,z).
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.UI.Picker.PickPointEnum.PICK_TWO_POINTS">
            <summary>
            Pick two points.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.UI.Picker.PickPointEnum.PICK_POLYGON">
            <summary>
            Pick multiple points.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.UI.Picker.PickPointEnum.PICK_LINE">
            <summary>
            Pick one line.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.UI.Picker.PickPointEnum.PICK_FACE">
            <summary>
            Pick one face.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.UI.Picker.PickObjectEnum">
            <summary>
            The possible model object pick types for a single object.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.UI.Picker.PickObjectEnum.PICK_ONE_OBJECT">
            <summary>
            Pick one model object of any type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.UI.Picker.PickObjectEnum.PICK_ONE_PART">
            <summary>
            Pick one part.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.UI.Picker.PickObjectEnum.PICK_ONE_WELD">
            <summary>
            Pick one welding.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.UI.Picker.PickObjectEnum.PICK_ONE_BOLTGROUP">
            <summary>
            Pick one bolt group.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.UI.Picker.PickObjectEnum.PICK_ONE_REINFORCEMENT">
            <summary>
            Pick one reinforcement.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.UI.Picker.PickObjectsEnum">
            <summary>
            The possible model object pick types for many objects.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.UI.Picker.PickObjectsEnum.PICK_N_OBJECTS">
            <summary>
            Pick multiple model objects of any type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.UI.Picker.PickObjectsEnum.PICK_N_PARTS">
            <summary>
            Pick multiple parts.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.UI.Picker.PickObjectsEnum.PICK_N_WELDS">
            <summary>
            Pick multiple welds.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.UI.Picker.PickObjectsEnum.PICK_N_BOLTGROUPS">
            <summary>
            Pick multiple bolt groups.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.UI.Picker.PickObjectsEnum.PICK_N_REINFORCEMENTS">
            <summary>
            Pick multiple reinforcements.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.SyncHandler">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotUIPicker_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotUIPicker_t.MaxPicks">
            <summary>
            The expected length of all arrays associated to the pick result.
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.dotUIPicker_t.#ctor(System.Int32)">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotUIPicker_t.PickType">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotUIPicker_t.PickEnum">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotUIPicker_t.nPoints">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotUIPicker_t.Prompt">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotUIPicker_t.aX">
            <summary>
            The x-coordinates of all points.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotUIPicker_t.aY">
            <summary>
            The y-coordinates of all points.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotUIPicker_t.aZ">
            <summary>
            The z-coordinates of all points.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotUIPicker_t.PickCommandStart">
            <summary>
            Indicates an actual start of pick command, handled in cdelegate.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotUIPicker_t.MoreObjectsLeft">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotUIPicker_t.nObjects">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotUIPicker_t.nObjectToStart">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotUIPicker_t.aObjects">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotUIPicker_t.aObjectTypes">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotUIPicker_t.SyncCallback">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.dotUIPicker_t.Construct">
            <summary>
            Constructs a new instance of the <see cref="T:Tekla.Structures.ModelInternal.dotUIPicker_t"/> struct.
            </summary>
            <returns>A new instance of the <see cref="T:Tekla.Structures.ModelInternal.dotUIPicker_t"/> struct.</returns>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotTemporaryStatesEnum">
            <summary> 
            The possible temporary states. Used to temporarily change color
               of a model object to visualize some state in the model.
               Only use a state for its named purpose. If you need to make some
               part orange even though it is not a modified part, talk to TORI
               or ERFA about adding a new state. Do not use DOT_TEMPORARY_STATE_MODIFIED
               unless the part is actually modified.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotTemporaryStatesEnum.DOT_TEMPORARY_STATE_UNKNOWN">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotTemporaryStatesEnum.DOT_TEMPORARY_STATE_NEW">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotTemporaryStatesEnum.DOT_TEMPORARY_STATE_MODIFIED">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotTemporaryStatesEnum.DOT_TEMPORARY_STATE_DELETED">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotTemporaryStatesEnum.DOT_TEMPORARY_STATE_DM_ONGOING">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotTemporaryStatesEnum.DOT_TEMPORARY_STATE_UNCHANGED">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotTemporaryStatesEnum.DOT_TEMPORARY_STATE_ACTIVE">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotTemporaryStatesEnum.DOT_TEMPORARY_STATE_ORIGINAL">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotTemporaryStatesEnum.DOT_TEMPORARY_STATE_ACCEPTED">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotTemporaryStatesEnum.DOT_TEMPORARY_STATE_REJECTED">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotTemporaryStatesEnum.DOT_TEMPORARY_STATE_USE_EXISTING_REPRESENTATION">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotTemporaryTransparenciesEnum">
            <summary> 
            The possible temporary transparencies. Used to temporarily change transparency
               of a model object to visualize some state in the model.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotTemporaryTransparenciesEnum.DOT_TEMPORARY_TRANSPARENCY_HIDDEN">
            <summary>
            Object is hidden.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotTemporaryTransparenciesEnum.DOT_TEMPORARY_TRANSPARENCY_TRANSPARENT">
            <summary>
            Object is transparent.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotTemporaryTransparenciesEnum.DOT_TEMPORARY_TRANSPARENCY_SEMITRANSPARENT">
            <summary>
            Object is semi transparent.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotTemporaryTransparenciesEnum.DOT_TEMPORARY_TRANSPARENCY_SEMIVISIBLE">
            <summary>
            Object is almost fully visible.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotTemporaryTransparenciesEnum.DOT_TEMPORARY_TRANSPARENCY_VISIBLE">
            <summary>
            Object is fully visible.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotTemporaryState">
            <summary>//TODO </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotTemporaryState.OBJECT_MAX_SIZE">
            <summary>
            Maximum amount of elements in one function call
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.dotTemporaryState.SetState(Tekla.Structures.ModelInternal.dotTemporaryStatesEnum,Tekla.Structures.ModelInternal.dotTemporaryTransparenciesEnum)">
            <summary>
            Set state for all objects
            </summary>
            <param name="State"></param>
            <param name="Transparency"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.dotTemporaryState.SetState(Tekla.Structures.ModelInternal.dotTemporaryStatesEnum)">
            <summary>
            Set state for all objects
            Transparency is VISIBLE. 
            </summary>
            <param name="State"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.dotTemporaryState.SetState(Tekla.Structures.Model.ModelObject,Tekla.Structures.ModelInternal.dotTemporaryStatesEnum)">
            <summary>
            Set state for one object.
            Transparency is VISIBLE. 
            </summary>
            <param name="MO"></param>
            <param name="State"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.dotTemporaryState.SetState(System.Collections.ArrayList,Tekla.Structures.ModelInternal.dotTemporaryStatesEnum,Tekla.Structures.ModelInternal.dotTemporaryTransparenciesEnum)">
            <summary>
            </summary>
            <param name="ModelObjects"></param>
            <param name="State"></param>
            <param name="Transparency"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.dotTemporaryState.SetState(System.Collections.ArrayList,Tekla.Structures.ModelInternal.dotTemporaryStatesEnum)">
            <summary>
            </summary>
            <param name="ModelObjects"></param>
            <param name="State"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.dotTemporaryState.ClearState(Tekla.Structures.Model.ModelObject)">
            <summary>
            </summary>
            <param name="MO"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.dotTemporaryState.ClearAllStates">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotSetTemporaryStates_t">
            <summary>
            Struct for UI selection
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSetTemporaryStates_t.State">
            <summary>
            FunctionalityEnum
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSetTemporaryStates_t.Transparency">
            <summary>
            Transparency enum
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSetTemporaryStates_t.nObjects">
            <summary>
            Number of objects
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSetTemporaryStates_t.AllObjects">
            <summary>
            All objects
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSetTemporaryStates_t.aObjectIDs">
            <summary>
            IDs
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSetTemporaryStates_t.aObjectSubIDs">
            <summary>
            Sub IDs
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.UI.View">
            <summary>
            The View class contains methods related to views.
            </summary>
            <example>
            An example of using the View and ViewHandler classes:
            <code>
            using System;
            using Tekla.Structures.Model.UI;
            using Tekla.Structures.Geometry3d;
            
            public class ViewExample
            {
                   public void ViewExample1()
                   {
                       View View = new View();
                       View.Name = "Example View";
                       View.ViewCoordinateSystem.AxisX = new Vector(1, 0, 0);
                       View.ViewCoordinateSystem.AxisY = new Vector(0, 1, 0);
                       // Work area has to be set for new views
                       View.WorkArea.MinPoint = new Point(-3000, -3000, -3000);
                       View.WorkArea.MaxPoint = new Point(15000, 33000, 12000);
                       View.ViewDepthUp = 10000;
                       View.ViewDepthDown = 2000;
                       View.Insert();
                       View.WorkArea.MinPoint = new Point(-3000, -3000, -3000);
                       View.WorkArea.MaxPoint = new Point(5000, 3000, 2000);
                       View.Modify();
                   }
            }
            </code>
            <code>
            using Tekla.Structures.Model.UI;
            
            public class Example
            {
                   public void Example1()
                   {
                       ModelViewEnumerator ViewEnum = ViewHandler.GetAllViews();
                       while(ViewEnum.MoveNext())
                       {
                           View View = ViewEnum.Current;
                           ViewHandler.HideView(View);
                       }
                   }
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.Structures.Model.UI.View.Insert">
            <summary>Inserts a new view to the model.</summary>
            <returns>True if the operation was successful.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.UI.View.Modify">
            <summary>Modifies the view parameters.</summary>
            <returns>True if the operation was successful.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.UI.View.Select">
            <summary>Selects the view.</summary>
            <returns>True if the operation was successful.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.UI.View.Delete">
            <summary>Deletes the view.</summary>
            <returns>True if the operation was successful.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.UI.View.IsPerspectiveViewProjection">
            <summary>Tells whether the view projection is a perspective projection.</summary>
            <returns>True if the view projection type is perspective projection.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.UI.View.IsVisible">
            <summary>Tells whether the view is currently visible.</summary>
            <returns>True if the view is visible.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.UI.View.GetClipPlanes">
            <summary>Returns all the clip planes of the view.</summary>
            <returns>The clip planes of the view.</returns>
            <example>
            The following example shows how all ClipPlanes are deleted from the first visible view:
            <code>
            using System;
            using System.Collections;
            using Tekla.Structures.Model.UI;
            using Tekla.Structures.Geometry3d;
            
            public class GetClipPlanesExample
            {
                public void GetClipPlanesExample1()
                {
                    ModelViewEnumerator ViewEnum = ViewHandler.GetVisibleViews();
                    ViewEnum.MoveNext();
                    View ActiveView = ViewEnum.Current;
                    ClipPlaneCollection ClipPlanes = ActiveView.GetClipPlanes();
                    if (ClipPlanes.Count > 0)
                    {
                        IEnumerator PlaneEnum = ClipPlanes.GetEnumerator();
                        while (PlaneEnum.MoveNext())
                        {
                            ClipPlane CPlane = PlaneEnum.Current as ClipPlane;
                            if (CPlane != null)
                                CPlane.Delete();
                        }
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.Structures.Model.UI.View.InsertInstance">
            <summary> Inserts view instance to model </summary>
            <returns>true if new view was inserted</returns>
        </member>
        <member name="M:Tekla.Structures.Model.UI.View.ModifyInstance">
            <summary> Modifies selected view </summary>
            <returns> true if view was succesfully updated</returns>
        </member>
        <member name="M:Tekla.Structures.Model.UI.View.DeleteInstance">
            <summary> Deletes selected view from database </summary>
            <returns> true if view was deleted</returns>
        </member>
        <member name="M:Tekla.Structures.Model.UI.View.SelectInstance">
            <summary> Selects view from model </summary>
            <returns> true if given view was selected</returns>
        </member>
        <member name="P:Tekla.Structures.Model.UI.View.Identifier">
            <summary>The view identifier.</summary>
        </member>
        <member name="P:Tekla.Structures.Model.UI.View.ViewCoordinateSystem">
            <summary>
            The local coordinate system for the view.
            Can be set when creating a view.
            The origin is always set to zero.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.UI.View.DisplayCoordinateSystem">
            <summary>The local coordinate system for the display.</summary>
        </member>
        <member name="P:Tekla.Structures.Model.UI.View.Name">
            <summary>The name of the view. 84 characters at most.</summary>
        </member>
        <member name="P:Tekla.Structures.Model.UI.View.WorkArea">
            <summary>The view working area.</summary>
        </member>
        <member name="P:Tekla.Structures.Model.UI.View.ViewDepthUp">
            <summary>The view depth up.</summary>
        </member>
        <member name="P:Tekla.Structures.Model.UI.View.ViewDepthDown">
            <summary>The view depth down.</summary>
        </member>
        <member name="P:Tekla.Structures.Model.UI.View.ViewProjection">
            <summary>The view projection type.</summary>
        </member>
        <member name="P:Tekla.Structures.Model.UI.View.DisplayType">
            <summary>The display plane type.</summary>
        </member>
        <member name="P:Tekla.Structures.Model.UI.View.ViewRendering">
            <summary>The view rendering type.</summary>
        </member>
        <member name="P:Tekla.Structures.Model.UI.View.ViewFilter">
            <summary>The name of the view filter. 256 characters at most.</summary>
        </member>
        <member name="T:Tekla.Structures.Model.UI.View.ViewModifyType">
            <summary> The view modification types. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.UI.View.ViewModifyType.DOT_MODIFY_VIEW_PROPERTIES">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.UI.View.ViewModifyType.DOT_DELETE_VIEW">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.UI.View.ViewModifyType.DOT_OPEN_VIEW">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.UI.View.ViewModifyType.DOT_CLOSE_VIEW">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.UI.View.ViewModifyType.DOT_REDRAW_VIEW">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.UI.View.ViewModifyType.DOT_ZOOM_VIEW">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.UI.View.ViewProjectionType">
            <summary>
            The view projection types.
            The projection type can be read but not changed.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.UI.View.ViewProjectionType.ORTHOGONAL_PROJECTION">
            <summary>
            The orthogonal view projection type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.UI.View.ViewProjectionType.PERSPECTIVE_PROJECTION">
            <summary>
            The perspective view projection type.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.UI.View.DisplayOrientationType">
            <summary>
            The view plane types.
            The plane type can be changed.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.UI.View.DisplayOrientationType.DISPLAY_VIEW_PLANE">
            <summary>
            The display orientation is in the view plane defined by the view coordinate system.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.UI.View.DisplayOrientationType.DISPLAY_3D">
            <summary>
            The display orientation is in 3D defined by the display coordinate system.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.UI.View.ViewRenderingType">
            <summary>
            The view rendering types.
            Only rendered views can be modified.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.UI.View.ViewRenderingType.WIREFRAME_VIEW">
            <summary>
            The wireframe view type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.UI.View.ViewRenderingType.RENDERED_VIEW">
            <summary>
            The rendered view type.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotView_t">
            <summary> Struct for ModelView </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotView_t.Identifier">
            <summary> Internal number of the View. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotView_t.ModifyType">
            <summary> Tells how the View is modified. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotView_t.aName">
            <summary> Defines the View Name. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotView_t.ViewCoordinateSystem">
            <summary> View Plane Coordinate System </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotView_t.DisplayCoordinateSystem">
            <summary> Display Plane Coordinate System </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotView_t.MinPoint">
            <summary> MinPoint of Work Area </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotView_t.MaxPoint">
            <summary> MaxPoint of Work Area </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotView_t.aRepresentation">
            <summary> Defines the representation filter. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotView_t.ViewDepthUp">
            <summary> View Depth Up </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotView_t.ViewDepthDown">
            <summary> View Depth Down </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotView_t.DisplayOrientationType">
            <summary> Display angle type </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotView_t.ViewProjectionType">
            <summary> View projection </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotView_t.ViewRenderingType">
            <summary> The view rendering type. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotView_t.ZoomMinPoint">
            <summary> MinPoint of Zoom Area </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotView_t.ZoomMaxPoint">
            <summary> MaxPoint of Zoom Area </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotView_t.aViewFilter">
            <summary> Defines the View Filter. </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotGetClipPlanes_t">
            <summary> Struct for ClipPlanes </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGetClipPlanes_t.nPlanes">
            <summary>
            The number of clipplanes of view, max number is 6.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGetClipPlanes_t.aPlaneIDs">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGetClipPlanes_t.aX">
            <summary>
            The x-coordinates of all location points.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGetClipPlanes_t.aY">
            <summary>
            The y-coordinates of all location points.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGetClipPlanes_t.aZ">
            <summary>
            The z-coordinates of all location points.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGetClipPlanes_t.aUpX">
            <summary>
            The x-coordinates of all up direction vectors.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGetClipPlanes_t.aUpY">
            <summary>
            The y-coordinates of all up direction vectors.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGetClipPlanes_t.aUpZ">
            <summary>
            The z-coordinates of all up direction vectors.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.UI.ViewCamera">
             <summary>
             The ViewCamera class defines a camera which can be used together with a visible view.
             Always supply a properly orthogonalized camera up vector when rotating the camera.
             </summary>
             <example>
             The following example shows how the ViewCamera class can be used:
             <code>
             using System;
             using Tekla.Structures.Model.UI;
             using Tekla.Structures.Geometry3d;
             
             public class ViewCameraExample
             {
                 public void ViewCameraExample1()
                 {
                     ModelViewEnumerator ViewEnum = ViewHandler.GetVisibleViews();
                     ViewEnum.MoveNext();
                     View CurrentView = ViewEnum.Current;
                     ViewCamera Camera = new ViewCamera();
            
                     // Set the view to the camera
                     Camera.View = CurrentView;
                     if(CurrentView.IsVisible() &amp;&amp; CurrentView.IsPerspectiveViewProjection())
                     {
                         // Query camera settings from the application
                         Camera.Select();
             
                         // Tilt the camera
                         Vector DirectionVector = Camera.DirectionVector;
                         Vector UpVector = Camera.UpVector;
                         Vector CrossVector = DirectionVector.Cross(UpVector);
                         Matrix RotationMatrix = new Matrix();
                         RotationMatrix = MatrixFactory.Rotate(Math.PI/20.0, CrossVector);
                         Tekla.Structures.Geometry3d.Point RotPoint = RotationMatrix * (Tekla.Structures.Geometry3d.Point)Camera.DirectionVector;
                         DirectionVector = new Vector(RotPoint);
                         DirectionVector.Normalize();
                         Camera.DirectionVector = DirectionVector; 
             
                         // Orthogonalize the camera UpVector
                         UpVector = CrossVector.Cross(DirectionVector);
                         UpVector.Normalize();
                         Camera.UpVector = UpVector;
             
                         // Modify the camera settings in the application
                         Camera.Modify();
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:Tekla.Structures.Model.UI.ViewCamera.Select">
            <summary>Updates the camera parameters from the application view.</summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.UI.ViewCamera.Modify">
            <summary>Updates the camera to the application view.</summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.UI.ViewCamera.#ctor">
            <summary>Instantiates a new view camera instance with zero length vectors.</summary>
        </member>
        <member name="P:Tekla.Structures.Model.UI.ViewCamera.Location">
            <summary>The camera location in global coordinates (XYZ).</summary>
        </member>
        <member name="P:Tekla.Structures.Model.UI.ViewCamera.DirectionVector">
            <summary>The camera direction (controls the camera pan and tilt).</summary>
        </member>
        <member name="P:Tekla.Structures.Model.UI.ViewCamera.UpVector">
            <summary>The camera up vector (controls the camera roll).</summary>
        </member>
        <member name="P:Tekla.Structures.Model.UI.ViewCamera.FieldOfView">
            <summary>The camera field of view as an angle (degrees) in the perspective view.</summary>
        </member>
        <member name="P:Tekla.Structures.Model.UI.ViewCamera.ZoomFactor">
            <summary>The camera zoom factor (meter/pixel) in the orthogonal view.</summary>
        </member>
        <member name="P:Tekla.Structures.Model.UI.ViewCamera.View">
            <summary>The view where the camera belongs to.</summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotCamera_t">
            <summary>
            View Camera struct
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotCamera_t.Location">
            <summary> Camera location in global coordinates (XYZ) </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotCamera_t.DirectionVector">
            <summary> Camera direction (Pan and Tilt) </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotCamera_t.UpVector">
            <summary> Camera up vector (Roll) </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotCamera_t.FieldOfView">
            <summary> Perspective view camera field of view  </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotCamera_t.ZoomFactor">
            <summary> Otrogonal view camera zoom factor  </summary>
        </member>
        <member name="T:Tekla.Structures.Model.UI.ViewHandler">
            <summary>
            The ViewHandler class contains methods for handling views.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Model.UI;
            
            public class Example
            {
                   public void Example1()
                   {
                       ViewHandler.SetRepresentation("standard");
                       ModelViewEnumerator ViewEnum = ViewHandler.GetAllViews();
            
                       while (ViewEnum.MoveNext())
                       {
                           View ViewSel = ViewEnum.Current;
                           ViewHandler.ShowView(ViewSel);
                           ViewHandler.RedrawView(ViewSel);
                           ViewHandler.HideView(ViewSel);
                       }
                   }
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.Structures.Model.UI.ViewHandler.GetAllViews">
            <summary>Fetches all the views from the model.</summary>
            <returns>A model view enumerator with all the views.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.UI.ViewHandler.GetVisibleViews">
            <summary>Returns the visible views.</summary>
            <returns>A model view enumerator with the visible views.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.UI.ViewHandler.GetPermanentViews">
            <summary>Returns the permanent views.</summary>
            <returns>A model view enumerator with the permanent views.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.UI.ViewHandler.GetTemporaryViews">
            <summary>Returns the temporary views.</summary>
            <returns>A model view enumerator with the temporary views.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.UI.ViewHandler.GetSelectedViews">
            <summary>Returns the views the user has selected.</summary>
            <returns>A model view enumerator with the selected views.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.UI.ViewHandler.ShowView(Tekla.Structures.Model.UI.View)">
            <summary>Opens a model view.</summary>
            <param name="view">The view that is to be shown.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.UI.ViewHandler.HideView(Tekla.Structures.Model.UI.View)">
            <summary>Closes a model view.</summary>
            <param name="view">The view that is to be closed.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.UI.ViewHandler.RedrawView(Tekla.Structures.Model.UI.View)">
            <summary>Redraws a model view.</summary>
            <param name="view">The view that is to be redrawn.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.UI.ViewHandler.ZoomToBoundingBox(Tekla.Structures.Model.UI.View,Tekla.Structures.Geometry3d.AABB)">
            <summary>Zooms a model view.</summary>
            <param name="view">The view that is to be zoomed.</param>
            <param name="B">The bounding box the view is zoomed to.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.UI.ViewHandler.ZoomToBoundingBox(Tekla.Structures.Geometry3d.AABB)">
            <summary>Zooms the current model view.</summary>
            <param name="box">The bounding box the current view is zoomed to.</param>
            <returns>True on success.</returns>
            <example>
            In the following example a part is picked and all the visible views are zoomed
            using the part's bounding box as a parameter.
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures.Model.UI;
            using Tekla.Structures.Geometry3d;
            
            public class Example
            {
                   public void Example1()
                   {
                       Picker MyPicker = new Picker();
                       Part PickPart = MyPicker.PickObject(Picker.PickObjectEnum.PICK_ONE_PART) as Part;
                       AABB PartBoundingBox = new AABB();
            
                       if (PickPart != null)
                       {
                           Solid PartSolid = PickPart.GetSolid();
                           PartBoundingBox.MaxPoint = PartSolid.MaximumPoint;
                           PartBoundingBox.MinPoint = PartSolid.MinimumPoint;
                       }
            
                       ModelViewEnumerator ViewEnum = ViewHandler.GetVisibleViews();
            
                       while (ViewEnum.MoveNext())
                       {
                           View ViewSel = ViewEnum.Current;
                           ViewHandler.ZoomToBoundingBox(ViewSel, PartBoundingBox);
                       }
                   }
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.Structures.Model.UI.ViewHandler.SetRepresentation(System.String)">
            <summary>Sets the object representation.</summary>
            <param name="Representation">The representation that is to be used. 257 characters at most.</param>
            <returns>True on success.</returns>
        </member>
        <member name="T:Tekla.Structures.Model.BaseWeld">
            <summary> The BaseWeld abstract class defines a weld between two model objects. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.referenceText">
            <summary> Private member to hold the reference text. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.prefixAboveLine">
            <summary> Private member to hold the prefix above the line information. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.prefixBelowLine">
            <summary> Private member to hold the prefix below the line information. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.standard">
            <summary> Private member to hold the weld detail/standard infromation. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.weldNumberPrefix">
            <summary> Private member to hold the weld number prefix information. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.intermittentType">
            <summary> Private member to hold weld intermittent type information. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.placement">
            <summary> Private member to hold weld placement information. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.preparation">
            <summary> Private member to hold weld preaparation information. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.logicalWeldId">
            <summary> Defines the Logical Weld ID. Is equal to 0 if Weld is not Child. </summary>
        </member>
        <member name="M:Tekla.Structures.Model.BaseWeld.#ctor">
            <summary> Initializes a new instance of the <see cref="T:Tekla.Structures.Model.BaseWeld"/> class. </summary>
        </member>
        <member name="M:Tekla.Structures.Model.BaseWeld.GetWeldGeometries">
            <summary>
            Method for getting weld seam geometries.
            Every result represents one individual seam geometry in current weld.
            </summary>
            <returns>An array list that contains weld seam specific WeldGeometry objects.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.BaseWeld.GetSolid">
            <summary>
            Method for getting the weld solid.
            </summary>
            <returns>Weld solid.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.BaseWeld.GetLogicalWeldID">
            <summary>
            Method for getting the logical weld id.
            </summary>
            <returns>Logical weld id.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.BaseWeld.SetLogicalWeldID(System.Int32)">
            <summary>
            Method for setting the logical weld id.
            </summary>
            <param name="weldId">Logical weld id.</param>
        </member>
        <member name="M:Tekla.Structures.Model.BaseWeld.ToStruct(Tekla.Structures.ModelInternal.dotWeld_t@)">
            <summary>
            Method for populating dotWeld_t struct from the BaseWeld object.
            </summary>
            <param name="p">Reference to the dotWeld_t struct to be populated.</param>
        </member>
        <member name="M:Tekla.Structures.Model.BaseWeld.FromStruct(Tekla.Structures.ModelInternal.dotWeld_t@)">
            <summary>
            Method for populating the BaseWeld object data from the dotWeld_t struct.
            </summary>
            <param name="p">Reference to the dotWeld_t struct to be used in populating the BaseWeld data.</param>
        </member>
        <member name="P:Tekla.Structures.Model.BaseWeld.MainObject">
            <summary> Gets or sets the main part of the weld. </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BaseWeld.SecondaryObject">
            <summary> Gets or sets the secondary part of the weld. </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BaseWeld.SizeAbove">
            <summary> Gets or sets the size above. </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BaseWeld.TypeAbove">
            <summary> Gets or sets the type above. </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BaseWeld.AngleAbove">
            <summary> Gets or sets the angle above. </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BaseWeld.LengthAbove">
            <summary> Gets or sets the length above. </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BaseWeld.ContourAbove">
            <summary> Gets or sets the contour above. </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BaseWeld.FinishAbove">
            <summary> Gets or sets the finish above. </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BaseWeld.PitchAbove">
            <summary> Gets or sets the pitch above. </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BaseWeld.SizeBelow">
            <summary> Gets or sets the size below. </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BaseWeld.TypeBelow">
            <summary> Gets or sets the type below. </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BaseWeld.AngleBelow">
            <summary> Gets or sets the angle below.  </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BaseWeld.LengthBelow">
            <summary> Gets or sets the length below. </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BaseWeld.ContourBelow">
            <summary> Gets or sets the contour below. </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BaseWeld.FinishBelow">
            <summary> Gets or sets the finish below. </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BaseWeld.PitchBelow">
            <summary> Gets or sets the pitch below. </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BaseWeld.ShopWeld">
            <summary>
            Gets or sets a value indicating whether
            the weld is a shop weld (true) or a site weld (false).
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BaseWeld.AroundWeld">
            <summary>
            Gets or sets a value indicating whether
            the weld is an around weld (true) or an edge weld (false).
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BaseWeld.StitchWeld">
            <summary>
            Gets or sets a value indicating whether
            the weld is stitched (true) or not stitched (false).
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BaseWeld.RootOpeningAbove">
            <summary> Gets or sets the root opening above. </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BaseWeld.RootFaceAbove">
            <summary> Gets or sets the root face above. </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BaseWeld.EffectiveThroatAbove">
            <summary> Gets or sets the effective throat above. </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BaseWeld.IncrementAmountAbove">
            <summary>
            Gets or sets the increment amount above.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BaseWeld.RootOpeningBelow">
            <summary> Gets or sets the root opening below. </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BaseWeld.RootFaceBelow">
            <summary> Gets or sets the root face below. </summary>        
        </member>
        <member name="P:Tekla.Structures.Model.BaseWeld.EffectiveThroatBelow">
            <summary> Gets or sets the effective throat below. </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BaseWeld.IncrementAmountBelow">
            <summary>
            Gets or sets the increment amount below.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BaseWeld.ElectrodeClassification">
            <summary> Gets or sets the weld electrode classification. </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BaseWeld.ElectrodeStrength">
            <summary> Gets or sets the electrode strength. </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BaseWeld.ElectrodeCoefficient">
            <summary> Gets or sets the electrode strength coefficient. </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BaseWeld.ProcessType">
            <summary> Gets or sets the process type. </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BaseWeld.NDTInspection">
            <summary> Gets or sets the NDT inspection level. </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BaseWeld.ConnectAssemblies">
            <summary>
            Gets or sets a value indicating whether
            to connect a part or an assembly as a secondary part (false)
            or as a sub-assembly (true).
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BaseWeld.ReferenceText">
            <summary> Gets or sets the reference text. </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BaseWeld.PrefixAboveLine">
            <summary> Gets or sets the size prefix above the line. </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BaseWeld.PrefixBelowLine">
            <summary> Gets or sets the size prefix below the line. </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BaseWeld.Standard">
            <summary> Gets or sets the weld detail/standard. </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BaseWeld.WeldNumber">
            <summary> Gets the weld number. </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BaseWeld.WeldNumberPrefix">
            <summary> Gets or sets the weld number prefix. </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BaseWeld.IntermittentType">
            <summary>
            Gets or sets the weld intermittent type.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown when provided value is not defined in the WeldIntermittentTypeEnum.</exception>
        </member>
        <member name="P:Tekla.Structures.Model.BaseWeld.Placement">
            <summary>
            Gets or sets the weld placement.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown when provided value is not defined in the WeldPlacementTypeEnum.</exception>
        </member>
        <member name="P:Tekla.Structures.Model.BaseWeld.Preparation">
            <summary>
            Gets or sets the weld preparation.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown when provided value is not defined in the WeldPreparationTypeEnum.</exception>
        </member>
        <member name="T:Tekla.Structures.Model.BaseWeld.WeldTypeEnum">
            <summary> The weld types. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldTypeEnum.WELD_TYPE_NONE">
            <summary> No weld type. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldTypeEnum.WELD_TYPE_EDGE_FLANGE">
            <summary> The edge-flange weld. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldTypeEnum.WELD_TYPE_SQUARE_GROOVE_SQUARE_BUTT">
            <summary> The square-groove (square butt) weld. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldTypeEnum.WELD_TYPE_BEVEL_GROOVE_SINGLE_V_BUTT">
            <summary> The bevel-groove (single-V butt) weld.  </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldTypeEnum.WELD_TYPE_BEVEL_GROOVE_SINGLE_BEVEL_BUTT">
            <summary> The bevel-groove (single-bevel butt) weld. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldTypeEnum.WELD_TYPE_SINGLE_V_BUTT_WITH_BROAD_ROOT_FACE">
            <summary> The single-V butt weld with broad root face. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldTypeEnum.WELD_TYPE_SINGLE_BEVEL_BUTT_WITH_BROAD_ROOT_FACE">
            <summary> The single-bevel butt weld with broad root face. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldTypeEnum.WELD_TYPE_U_GROOVE_SINGLE_U_BUTT">
            <summary> The U-groove (single U-butt) weld. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldTypeEnum.WELD_TYPE_J_GROOVE_J_BUTT">
            <summary> The J-groove (single J-butt) weld. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldTypeEnum.WELD_TYPE_BEVEL_BACKING">
            <summary> The bevel backing weld. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldTypeEnum.WELD_TYPE_FILLET">
            <summary> The fillet weld. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldTypeEnum.WELD_TYPE_PLUG">
            <summary> The plug weld. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldTypeEnum.WELD_TYPE_SPOT">
            <summary> The spot weld. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldTypeEnum.WELD_TYPE_SEAM">
            <summary> The seam weld.  </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldTypeEnum.WELD_TYPE_SLOT">
            <summary> The slot weld. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldTypeEnum.WELD_TYPE_FLARE_BEVEL_GROOVE">
            <summary> The flare-bevel-groove weld. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldTypeEnum.WELD_TYPE_FLARE_V_GROOVE">
            <summary> The flare V-groove weld. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldTypeEnum.WELD_TYPE_CORNER_FLANGE">
            <summary> The corner-flange weld. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldTypeEnum.WELD_TYPE_PARTIAL_PENETRATION_SINGLE_BEVEL_BUTT_PLUS_FILLET">
            <summary> The partial penetration (single-bevel butt + fillet) weld. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldTypeEnum.WELD_TYPE_PARTIAL_PENETRATION_SQUARE_GROOVE_PLUS_FILLET">
            <summary> The partial penetration (square groove + fillet) weld. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldTypeEnum.WELD_TYPE_MELT_THROUGH">
            <summary> The melt-through weld. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldTypeEnum.STEEP_FLANKED_BEVEL_GROOVE_SINGLE_V_BUTT">
            <summary> The steep flanked bevel groove single-V butt weld. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldTypeEnum.STEEP_FLANKED_BEVEL_GROOVE_SINGLE_BEVEL_BUTT">
            <summary> The steep flanked bevel groove single-bevel butt weld. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldTypeEnum.WELD_TYPE_EDGE">
            <summary> The edge weld. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldTypeEnum.WELD_TYPE_ISO_SURFACING">
            <summary> The ISO surfacing weld. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldTypeEnum.WELD_TYPE_FOLD">
            <summary> The fold weld. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldTypeEnum.WELD_TYPE_INCLINED">
            <summary> The inclined weld. </summary>
        </member>
        <member name="T:Tekla.Structures.Model.BaseWeld.WeldContourEnum">
            <summary> The weld contour. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldContourEnum.WELD_CONTOUR_NONE">
            <summary> No contour. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldContourEnum.WELD_CONTOUR_FLUSH">
            <summary> The flush contour. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldContourEnum.WELD_CONTOUR_CONVEX">
            <summary> The convex contour. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldContourEnum.WELD_CONTOUR_CONCAVE">
            <summary> The concave contour. </summary>
        </member>
        <member name="T:Tekla.Structures.Model.BaseWeld.WeldFinishEnum">
            <summary> The weld finish. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldFinishEnum.WELD_FINISH_NONE">
            <summary> No weld finish. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldFinishEnum.WELD_FINISH_GRIND">
            <summary> The grind finish. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldFinishEnum.WELD_FINISH_MACHINE">
            <summary> The machine finish. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldFinishEnum.WELD_FINISH_CHIP">
            <summary> The chip finish. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldFinishEnum.WELD_FINISH_FINISHED_WELD">
            <summary> The normally treated finish. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldFinishEnum.WELS_FINISH_SMOOTH_TRANSITION">
            <summary> The smooth transition finish. </summary>
        </member>
        <member name="T:Tekla.Structures.Model.BaseWeld.WeldElectrodeClassificationEnum">
            <summary> The weld electrode classification. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldElectrodeClassificationEnum.WELD_ELECTRODE_CLASSIFICATION_NONE">
            <summary> No electrode classification. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldElectrodeClassificationEnum.WELD_ELECTRODE_CLASSIFICATION_35">
            <summary> The electrode classification 35. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldElectrodeClassificationEnum.WELD_ELECTRODE_CLASSIFICATION_42">
            <summary> The electrode classification 42. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldElectrodeClassificationEnum.WELD_ELECTRODE_CLASSIFICATION_50">
            <summary> The electrode classification 50. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldElectrodeClassificationEnum.WELD_ELECTRODE_CLASSIFICATION_E60XX">
            <summary> The electrode classification E60XX. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldElectrodeClassificationEnum.WELD_ELECTRODE_CLASSIFICATION_E70XX">
            <summary> The electrode classification E70XX. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldElectrodeClassificationEnum.WELD_ELECTRODE_CLASSIFICATION_E80XX">
            <summary> The electrode classification E80XX. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldElectrodeClassificationEnum.WELD_ELECTRODE_CLASSIFICATION_E90XX">
            <summary> The electrode classification E90XX. </summary>
        </member>
        <member name="T:Tekla.Structures.Model.BaseWeld.WeldProcessTypeEnum">
            <summary> The weld process type. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldProcessTypeEnum.WELD_PROCESS_NONE">
            <summary> No process type. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldProcessTypeEnum.WELD_PROCESS_SMAW">
            <summary> The shielded metal arc (SMAW) process type. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldProcessTypeEnum.WELD_PROCESS_SAW">
            <summary> The submerged arc (SAW) process type. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldProcessTypeEnum.WELD_PROCESS_GMAW">
            <summary> The gas metal arc (GMAW) process type. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldProcessTypeEnum.WELD_PROCESS_FCAW">
            <summary> The flux cored arc (FCAW) process type. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldProcessTypeEnum.WELD_PROCESS_ESW">
            <summary> The electroslag (ESW) process type. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldProcessTypeEnum.WELD_PROCESS_EGW">
            <summary> The electrogas (EGW) process type. </summary>
        </member>
        <member name="T:Tekla.Structures.Model.BaseWeld.WeldNDTInspectionEnum">
            <summary> The weld NDT inspection level. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldNDTInspectionEnum.WELD_NDT_INSPECTION_NONE">
            <summary> No NDT inspection level. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldNDTInspectionEnum.WELD_NDT_INSPECTION_A">
            <summary> The NDT inspection level A. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldNDTInspectionEnum.WELD_NDT_INSPECTION_B">
            <summary> The NDT inspection level B. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldNDTInspectionEnum.WELD_NDT_INSPECTION_C">
            <summary> The NDT inspection level C. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldNDTInspectionEnum.WELD_NDT_INSPECTION_D">
            <summary> The NDT inspection level D. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldNDTInspectionEnum.WELD_NDT_INSPECTION_E">
            <summary> The NDT inspection level E. </summary>
        </member>
        <member name="T:Tekla.Structures.Model.BaseWeld.WeldIntermittentTypeEnum">
            <summary>
            Weld intermittent types.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldIntermittentTypeEnum.CONTINUOUS">
            <summary> Continuous. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldIntermittentTypeEnum.CHAIN_INTERMITTENT">
            <summary> Chain intermittent. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldIntermittentTypeEnum.STAGGERED_INTERMITTENT">
            <summary> Staggered intermittent. </summary>
        </member>
        <member name="T:Tekla.Structures.Model.BaseWeld.WeldPlacementTypeEnum">
            <summary>
            Weld placement types.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldPlacementTypeEnum.PLACEMENT_AUTO">
            <summary> Auto placement. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldPlacementTypeEnum.PLACEMENT_MAIN">
            <summary> Main part placement. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldPlacementTypeEnum.PLACEMENT_SECONDARY">
            <summary> Secondary part placement. </summary>
        </member>
        <member name="T:Tekla.Structures.Model.BaseWeld.WeldPreparationTypeEnum">
            <summary>
            Weld preparation types.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldPreparationTypeEnum.PREPARATION_NONE">
            <summary> No preparation. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldPreparationTypeEnum.PREPARATION_AUTO">
            <summary> Auto preparation. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldPreparationTypeEnum.PREPARATION_MAIN">
            <summary> Main part preparation. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldPreparationTypeEnum.PREPARATION_SECONDARY">
            <summary> Secondary part preparation. </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotWeld_t">
            <summary> Struct for the BaseWeld Object. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWeld_t.ModelObject">
            <summary> The object we are extending (Inherited from). </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWeld_t.MainObject">
            <summary> Defines the main part of the Weld. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWeld_t.SecondaryObject">
            <summary> Defines the secondary part of the Weld. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWeld_t.SizeAbove">
            <summary> Defines the Size Above. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWeld_t.TypeAbove">
            <summary> Defines the Type Above. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWeld_t.AngleAbove">
            <summary> Defines the Angle Above. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWeld_t.ContourAbove">
            <summary> Defines the Contour Above. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWeld_t.FinishAbove">
            <summary> Defines the Finish Above. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWeld_t.LengthAbove">
            <summary> Defines the Length Above. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWeld_t.PitchAbove">
            <summary> Defines the Pitch Above. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWeld_t.IncrementAmountAbove">
            <summary> Defines the weld increment amount above. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWeld_t.SizeBelow">
            <summary> Defines the Size Below. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWeld_t.TypeBelow">
            <summary> Defines the Type Below. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWeld_t.AngleBelow">
            <summary> Defines the Angle Below.  </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWeld_t.ContourBelow">
            <summary> Defines the Contour Below. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWeld_t.FinishBelow">
            <summary> Defines the Finish Below. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWeld_t.LengthBelow">
            <summary> Defines the Length Below. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWeld_t.PitchBelow">
            <summary> Defines the Pitch Below. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWeld_t.IncrementAmountBelow">
            <summary> Defines the weld increment amount below. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWeld_t.aReferenceText">
            <summary> Defines the Reference Text. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWeld_t.ShopWeld">
            <summary>
            Defines whether it is a Shop Weld or a Site Weld. 
            If true then it is a Shop Weld.
            If false then it is a Site Weld.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWeld_t.AroundWeld">
            <summary>
            Defines whether it is an Around Weld or an Edge Weld.
            If true then it is an Around Weld.
            If false then it is an Edge Weld.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWeld_t.RootOpeningAbove">
            <summary> Defines the Root Opening Above. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWeld_t.Position">
            <summary> Defines the Position. For more accurate control use Direction(preferred). </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWeld_t.Direction">
            <summary> Defines the Weld edge search direction. Overrides Position if set.</summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWeld_t.StitchWeld">
            <summary> Defines if it is Stitch Weld or not. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWeld_t.RootFaceAbove">
            <summary> Defines the Root Face Above. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWeld_t.EffectiveThroatAbove">
            <summary> Defines the Effective Throat Above. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWeld_t.PrefixAboveLine">
            <summary> Defines the Size Prefix Above Line. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWeld_t.PrefixBelowLine">
            <summary> Defines the Size Prefix Below Line. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWeld_t.Standard">
            <summary> Defines the Weld Detail/Standard. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWeld_t.ElectrodeClassification">
            <summary> Defines the Weld Classification. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWeld_t.ElectrodeStrength">
            <summary> Defines the Electrode Strength. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWeld_t.ElectrodeCoefficient">
            <summary> Defines the Electrode Strength Coefficient. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWeld_t.ProcessType">
            <summary> Defines the Process Type. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWeld_t.NDTInspection">
            <summary> Defines the NDT Inspection Level. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWeld_t.LogicalWeld">
            <summary> Defines the children welds of a Logical Weld </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWeld_t.WeldNumber">
            <summary> Defines the Weld Number. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWeld_t.WeldNumberPrefix">
            <summary> Defines the Weld Number Prefix. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWeld_t.ConnectAssemblies">
            <summary> Defines connect as secondary part (false) or as sub-assembly (true). </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWeld_t.LogicalWeldID">
            <summary> Defines the Logical Weld ID. Is equal to 0 if Weld is not Child. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWeld_t.RootOpeningBelow">
            <summary> Defines the Root Opening Below. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWeld_t.RootFaceBelow">
            <summary> Defines the Root Face Below. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWeld_t.EffectiveThroatBelow">
            <summary> Defines the Effective Throat Below. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWeld_t.IntermittentType">
            <summary> Defines the weld intermittent type (Enum). </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWeld_t.Placement">
            <summary> Defines the weld placement (Enum). </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWeld_t.Preparation">
            <summary> Defines the weld preparation (Enum). </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWeld_t.ClientId">
            <summary> Defines weld client id</summary>
        </member>
        <member name="T:Tekla.Structures.Model.LogicalWeld">
            <summary>
            The LogicalWeld class represents a group of welds in the model.
            A logical weld contains a list of children welds. 
            The primary properties need to be the same in all the children welds.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Model;
            
            public class Example
            {
                   public void Example1()
                   {
                       Weld Weld1 = new Weld();
                       Weld Weld2 = new Weld();
                       Weld1.TypeBelow = Weld.WeldTypeEnum.WELD_TYPE_SLOT;
                       Weld2.TypeBelow = Weld.WeldTypeEnum.WELD_TYPE_SEAM;
            
                       LogicalWeld LogicalWeld = new LogicalWeld(Weld1);
                       LogicalWeld.AddWeld(Weld2);
            
                       LogicalWeld.Insert();
            
                       LogicalWeld.SetMainWeld(Weld2);
                       LogicalWeld.RemoveWeld(Weld1);
            
                       LogicalWeld.Modify();
            
                       LogicalWeld.Explode();
                   }
            }
            </code>
            </example>
        </member>
        <member name="F:Tekla.Structures.Model.LogicalWeld._LogicalWeldList">
            <summary>
            List of children welds of this Logical Weld.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.LogicalWeld.#ctor(Tekla.Structures.Model.BaseWeld)">
            <summary>
            Creates a new logical weld instance.
            </summary>
            <param name="MainWeld">The main weld for the logical weld.</param>
        </member>
        <member name="M:Tekla.Structures.Model.LogicalWeld.AddWeld(Tekla.Structures.Model.BaseWeld)">
            <summary>
            Adds a weld to the logical weld.
            </summary>
            <param name="Weld">The weld to be added.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.LogicalWeld.GetMainWeld">
            <summary>
            Returns the main weld of the logical weld.
            </summary>
            <returns>The main weld of the logical weld.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.LogicalWeld.SetMainWeld(Tekla.Structures.Model.BaseWeld)">
            <summary>
            Sets the main weld for the logical weld.
            </summary>
            <param name="Weld">The weld to be set as the main weld.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.LogicalWeld.RemoveWeld(Tekla.Structures.Model.BaseWeld)">
            <summary>
            Removes a weld from the logical weld.
            </summary>
            <param name="Weld">The weld to be removed.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.LogicalWeld.Explode">
            <summary>
            Removes the logical weld from the model but not the children welds.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.LogicalWeld.Insert">
            <summary>
            Inserts the logical weld into the model database. All the attributes must be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.LogicalWeld.Select">
            <summary>
            Selects a logical weld from the model database. The logical weld identifier must be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.LogicalWeld.Select(Tekla.Structures.Model.BaseWeld)">
            <summary>
            Selects the logical weld that a child weld belongs to.
            </summary>
            <param name="ChildWeld">A child weld whose logical weld we want to select.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.LogicalWeld.Modify">
            <summary>
            Modifies the existing logical weld in the model database to match the current one.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.LogicalWeld.Delete">
            <summary>
            Deletes the logical weld instance with the given identifier
            from the model database and also the children welds.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.LogicalWeld.AddWeldCheck(Tekla.Structures.Model.BaseWeld)">
            <summary>
            Checks that Weld can be added to the Logical Weld.
            </summary>
            <returns>Returns true on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.LogicalWeld.GetMainWeldId">
            <summary>
            Returns the Main Weld Identifier of this Logical Weld.
            </summary>
            <returns>
            Returns the Main Weld Identifier of this Logical Weld. 
            Returns 0 if there are no welds in this Logical Weld.
            </returns>
        </member>
        <member name="M:Tekla.Structures.Model.LogicalWeld.CopyPrimaryProperties(Tekla.Structures.Model.BaseWeld)">
            <summary>
            Copies the attributes of the Main Weld to the 
            attributes of the Logical Weld (Logical Weld 
            attributes = Main Weld attributes).
            </summary>
            <returns>Returns true on success.</returns>
        </member>
        <member name="T:Tekla.Structures.Model.Weld">
            <summary>
            The Weld class represents a normal weld in the model.
            A normal weld has a main part and a secondary part. 
            </summary>
            <example>
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures.Geometry3d;
            
            public class Example
            {
                   public void Example1()
                   {
                       Point Beam1P1 = new Point(   0, 12000, 0);
                       Point Beam1P2 = new Point(3000, 12000, 0);
            
                       Point Beam2P1 = new Point(3000, 12000, 0);
                       Point Beam2P2 = new Point(3000, 18000, 0);
            
                       Beam Beam1 = new Beam(Beam1P1, Beam1P2);
                       Beam Beam2 = new Beam(Beam2P1, Beam2P2);
            
                       Beam1.Profile.ProfileString = "HEA400";
                       Beam1.Finish = "PAINT";
                       Beam1.Name = "Beam 1";
                       Beam2.Name = "Beam 2";
            
                       Beam1.Insert();
                       Beam2.Insert();
            
                       Weld Weld = new Weld();
                       Weld.MainObject = Beam1;
                       Weld.SecondaryObject = Beam2;
                       Weld.TypeAbove = BaseWeld.WeldTypeEnum.WELD_TYPE_SQUARE_GROOVE_SQUARE_BUTT;
            
                       Weld.Insert();
            
                       Weld.LengthAbove = 12;
                       Weld.TypeBelow = BaseWeld.WeldTypeEnum.WELD_TYPE_SLOT;
            
                       Weld.Modify();
                   }
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.Structures.Model.Weld.#ctor">
            <summary> Creates a new weld instance. </summary>
        </member>
        <member name="M:Tekla.Structures.Model.Weld.Insert">
            <summary> Inserts the weld into the model database. All the attributes must be set. </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Weld.Select">
            <summary> Selects a weld from the model database. The weld identifier must be set. </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Weld.Modify">
            <summary>
            Modifies the existing weld in the model database to match the current one.
            The modification cannot be done if the weld is a part of a logical weld.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Weld.Delete">
            <summary> Deletes the weld instance with the given identifier from the model database. </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Weld.GetLogicalWeld(Tekla.Structures.Model.LogicalWeld@)">
            <summary>
            Gets the logical weld where the weld belongs. Returns false if
            the weld does not belong to any logical weld.
            </summary>
            <param name="LogicalWeld">An initialized logical weld object.</param>
            <returns>True if the logical weld was selected correctly; false otherwise.</returns>
        </member>
        <member name="P:Tekla.Structures.Model.Weld.Position">
            <summary> Defines the position. Use of Direction is preferred over this.</summary>
        </member>
        <member name="P:Tekla.Structures.Model.Weld.Direction">
            <summary> Defines the Weld edge search direction normalized to length 1000.0. Overrides Position if set.</summary>
        </member>
        <member name="T:Tekla.Structures.Model.Weld.WeldPositionEnum">
            <summary> The weld position. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Weld.WeldPositionEnum.WELD_POSITION_PLUS_X">
            <summary> The position +x. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Weld.WeldPositionEnum.WELD_POSITION_MINUS_X">
            <summary> The position -x. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Weld.WeldPositionEnum.WELD_POSITION_PLUS_Y">
            <summary> The position +y. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Weld.WeldPositionEnum.WELD_POSITION_MINUS_Y">
            <summary> The position -y. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Weld.WeldPositionEnum.WELD_POSITION_PLUS_Z">
            <summary> The position +z. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Weld.WeldPositionEnum.WELD_POSITION_MINUS_Z">
            <summary> The position -z. </summary>
        </member>
        <member name="T:Tekla.Structures.Model.PolygonWeld">
            <summary>
            The PolygonWeld class represents a polygon weld in the model.
            A polygon weld has a main part and a secondary part. 
            </summary>
            <example>
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures.Geometry3d;
            
            public class Example
            {
                   public void Example1()
                   {
                       Point Beam1P1 = new Point(6000, 12000, 0);
                       Point Beam1P2 = new Point(9000, 12000, 0);
            
                       Point Beam2P1 = new Point(9000, 12000, 0);
                       Point Beam2P2 = new Point(9000, 18000, 0);
            
                       Beam Beam1 = new Beam(Beam1P1, Beam1P2);
                       Beam Beam2 = new Beam(Beam2P1, Beam2P2);
            
                       Beam1.Profile.ProfileString = "HEA400";
                       Beam1.Finish = "PAINT";
                       Beam1.Name = "Beam 1";
                       Beam2.Name = "Beam 2";
            
                       Beam1.Insert();
                       Beam2.Insert();
            
                       PolygonWeld PolygonWeld = new PolygonWeld();
                       PolygonWeld.MainObject = Beam1;
                       PolygonWeld.SecondaryObject = Beam2;
                       Point WeldP1 = new Point(9000, 11850, 0);
                       Point WeldP2 = new Point(9000, 12000, 0);
                       Point WeldP3 = new Point(9150, 12000, 0);
                       PolygonWeld.Polygon.Points.Add(WeldP1);
                       PolygonWeld.Polygon.Points.Add(WeldP2);
                       PolygonWeld.Polygon.Points.Add(WeldP3);
                       PolygonWeld.TypeAbove = PolygonWeld.WeldTypeEnum.WELD_TYPE_SQUARE_GROOVE_SQUARE_BUTT;
            
                       PolygonWeld.Insert();
            
                       PolygonWeld.TypeBelow = PolygonWeld.WeldTypeEnum.WELD_TYPE_SLOT;
            
                       PolygonWeld.Modify();
                   }
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.Structures.Model.PolygonWeld.#ctor">
            <summary> Creates a new polygon weld instance. </summary>
        </member>
        <member name="M:Tekla.Structures.Model.PolygonWeld.Insert">
            <summary> Inserts the polygon weld into the model database. All the attributes must be set. </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.PolygonWeld.Select">
            <summary> Selects a polygon weld from the model database. The polygon weld identifier must be set. </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.PolygonWeld.Modify">
            <summary>
            Modifies the existing polygon weld in the model database to match the current one.
            The modification cannot be done if the polygon weld is a part of a logical weld.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.PolygonWeld.Delete">
            <summary> Deletes the polygon weld instance with the given identifier from the model database. </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.PolygonWeld.GetLogicalWeld(Tekla.Structures.Model.LogicalWeld@)">
            <summary>
            Gets the logical weld where the weld belongs. Returns false if 
            the weld does not belong to any logical weld.
            </summary>
            <param name="LogicalWeld">An initialized logical weld object.</param>
            <returns>True if the logical weld was selected correctly; false otherwise.</returns>
        </member>
        <member name="P:Tekla.Structures.Model.PolygonWeld.Polygon">
            <summary> The polygon for the polygon weld. </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Welding.WeldSeamPositionEnum">
            <summary>
            Weld seam position types.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Welding.WeldSeamPositionEnum.SEAM_ABOVE">
            <summary> Seam above. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Welding.WeldSeamPositionEnum.SEAM_BELOW">
            <summary> Seam below. </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Welding.WeldGeometry">
             <summary>
             Class that represents weld seam specific geometry.
             </summary>
             <example>
             <code>
             
             using System.Collections;
             using System.Text;
             using Tekla.Structures.Geometry3d;
             using Tekla.Structures.Model;
             using Tekla.Structures.Model.Welding;
             
             public class Example
             {
                private static Model _teklaModel;
             
                private Model TeklaModel
                {
                     get
                     {
                         if (_teklaModel == null)
                         {
                             _teklaModel = new Model();
                         }
            
                         return _teklaModel;
                     }
                }
             
                public void Example1()
                {
                     ModelObjectEnumerator weldEnumerator =
                      TeklaModel.GetModelObjectSelector().GetAllObjectsWithType(ModelObject.ModelObjectEnum.WELD);
                     
                     Weld weld = null;
                     
                     while (weldEnumerator.MoveNext())
                     {
                         weld = weldEnumerator.Current as Weld;
            
                         if (weld != null)
                         {
                             break;
                         }
                     }
            
                     if (weld != null)
                     {
                         ArrayList weldGeometries = weld.GetWeldGeometries();
                         StringBuilder sb = new StringBuilder();
            
                         foreach (WeldGeometry weldGeometry in weldGeometries)
                         {
                             if (weldGeometry != null)
                             {
                                 int polygonIndex = 1;
            
                                 sb.AppendLine(weldGeometry.Position.ToString());
             
                                 foreach (Polygon polygon in weldGeometry.Polygons)
                                 {
                                     if (polygon != null)
                                     {
                                        sb.AppendLine("Polygon: " + polygonIndex);
            
                                        if (polygon.Points != null)
                                        {
                                            foreach (Point point in polygon.Points)
                                            {
                                                if (point != null)
                                                { 
                                                    sb.AppendLine(point.ToString());
                                                }
                                            }                                    
                                        }
                                     }
             
                                     polygonIndex++;
                                 }
                             }
                             
                             sb.AppendLine();
                             sb.AppendLine();
                         }
                         // Print the string builder content to the desired place by calling sb.ToString();
                     }
                }
             }
             </code>
             </example>
        </member>
        <member name="F:Tekla.Structures.Model.Welding.WeldGeometry.position">
            <summary>
            Weld seam position.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Welding.WeldGeometry.polygons">
            <summary>
            Weld seam polygons.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.Welding.WeldGeometry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Model.Welding.WeldGeometry"/> class.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.Welding.WeldGeometry.#ctor(Tekla.Structures.Model.Welding.WeldSeamPositionEnum)">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Model.Welding.WeldGeometry"/> class.
            </summary>
            <param name="position">Weld seam position (above or below).</param> 
        </member>
        <member name="M:Tekla.Structures.Model.Welding.WeldGeometry.GetWeldGeometries(Tekla.Structures.Identifier)">
            <summary>
            Method for getting weld geometries.
            Every result represents one individual seam geometry in current weld.
            </summary>
            <param name="weldId">Weld identifier.</param>
            <returns>An array list that contains weld specific WeldGeometry objects.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Welding.WeldGeometry.GetWeldGeometry(Tekla.Structures.Identifier,Tekla.Structures.Model.Welding.WeldSeamPositionEnum)">
            <summary>
            Method for getting weld seam specific geometry.
            </summary>
            <param name="weldId">Weld identifier.</param>
            <param name="seamPosition">Weld seam position (above or below).</param>
            <returns>An instance of the <see cref="T:Tekla.Structures.Model.Welding.WeldGeometry"/> class.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Welding.WeldGeometry.CreateWeldGeometryPolygon(System.Collections.Generic.IList{Tekla.Structures.ModelInternal.dotWeldGeometry_t})">
            <summary>
            Method for creating weld geometry polygon out of weld geometry structs. 
            </summary>
            <param name="weldGeometryStructs">Seam specific list of weld geometry structs.</param>
            <returns>An instance of the <see cref="T:Tekla.Structures.Model.Polygon"/> class.</returns>
        </member>
        <member name="P:Tekla.Structures.Model.Welding.WeldGeometry.Position">
            <summary>
            Gets the weld seam position (above or below).
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Welding.WeldGeometry.Polygons">
            <summary>
            Gets the weld seam specific ArrayList of <see cref="T:Tekla.Structures.Model.Polygon"/> objects.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotWeldGeometry_t">
            <summary> Struct for the WeldGeometry object. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWeldGeometry_t.WeldId">
            <summary> Identifier of the weld. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWeldGeometry_t.Position">
            <summary> Enum to indicate seam position (above or below). </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWeldGeometry_t.NumberOfPolygons">
            <summary> Number of polygons. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWeldGeometry_t.PolygonIndex">
            <summary> Determines the current polygon index. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWeldGeometry_t.PointIndex">
            <summary> Defines the current polygon point index. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWeldGeometry_t.MorePoints">
            <summary> Determines if there are still more points in one polygon that must be fetched. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWeldGeometry_t.MaxPolygonPoints">
            <summary> Determines the maximum amount of polygon points per each request. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWeldGeometry_t.Polygon">
            <summary> Defines one polygon of a weld seam. </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.dotWeldGeometry_t.#ctor(Tekla.Structures.Identifier,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.ModelInternal.dotWeldGeometry_t"/> struct.
            </summary>
            <param name="weldId">Weld identifier.</param>
            <param name="position">Position of the seam (above or below).</param>
            <param name="maxPolygonPointsPerRequest">Maximum polygon points per request.</param>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.dotWeldGeometry_t.CopyAndInitialize">
            <summary>
            Makes a copy of another <see cref="T:Tekla.Structures.ModelInternal.dotWeldGeometry_t"/> struct and initializes the weld geometry polygon.
            </summary>
            <returns>An instance of the <see cref="T:Tekla.Structures.ModelInternal.dotWeldGeometry_t"/> struct.</returns>
        </member>
        <member name="T:Tekla.Structures.Model.WorkPlaneHandler">
            <summary>
            The WorkPlaneHandler class contains methods for getting and setting
            the current transformation plane.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.WorkPlaneHandler.#ctor">
            <summary>
            Internal constructor for WorkPlaneHander.
            Should be instantiated only from Model.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.WorkPlaneHandler.GetCurrentTransformationPlane">
            <summary>
            Gets the current transformation plane.
            </summary>
            <returns>The current transformation plane.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.WorkPlaneHandler.SetCurrentTransformationPlane(Tekla.Structures.Model.TransformationPlane)">
            <summary>
            Sets the current transformation plane.
            </summary>
            <param name="TransformationPlane">The transformation plane to be set as the current transformation plane.</param>
            <returns>False on failure.</returns>
        </member>
    </members>
</doc>
