<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Tekla.BIM.Toolkit</name>
    </assembly>
    <members>
        <member name="T:Tekla.BIM.Formatting.AreaFormatter">
            <summary>
            <see cref="T:Tekla.BIM.Quantities.Area"/> formatter.
            </summary>
        </member>
        <member name="T:Tekla.BIM.Formatting.QuantityFormatter`2">
            <summary>
            An abstract base class for quantity formatters.
            </summary>
            <typeparam name="TQuantity">The type of the formattable quantity.</typeparam>
            <typeparam name="TQuantityUnit">The type of the quantity unit.</typeparam>
        </member>
        <member name="T:Tekla.BIM.Formatting.Formatter`1">
            <summary>
            An abstract base class for formatters.
            </summary>
            <typeparam name="T">The type of the formattable value.</typeparam>
        </member>
        <member name="T:Tekla.BIM.Formatting.Formatter">
            <summary>
            An abstract base class for formatters.
            </summary>
        </member>
        <member name="M:Tekla.BIM.Formatting.Formatter.#ctor(System.String,System.IFormatProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.BIM.Formatting.Formatter"/> class.
            </summary>
            <param name="formatString">The format string.</param>
            <param name="formatProvider">The format provider.</param>
        </member>
        <member name="M:Tekla.BIM.Formatting.Formatter.ReadEnum``1(System.String,System.Collections.Generic.IDictionary{System.String,System.String},``0)">
            <summary>
            Reads an enumerated value.
            </summary>
            <typeparam name="TEnum">The type of the enumerated value.</typeparam>
            <param name="key">The key.</param>
            <param name="settings">The formatter settings.</param>
            <param name="defaultValue">The default value.</param>
            <returns>
            The enumerated value.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Formatting.Formatter.ReadFormatterNames(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Reads the formatter names.
            </summary>
            <param name="prefix">The name prefix.</param>
            <param name="settings">The formatter settings.</param>
            <returns>The formatter names.</returns>
        </member>
        <member name="M:Tekla.BIM.Formatting.Formatter.ReadFormatString(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Reads the format string.
            </summary>
            <param name="name">The formatter name.</param>
            <param name="settings">The formatter settings.</param>
            <returns>
            The format string.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Formatting.Formatter.ReadFormatProvider(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Reads the format provider.
            </summary>
            <param name="name">The formatter name.</param>
            <param name="settings">The formatter settings.</param>
            <returns>
            The format provider.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Formatting.Formatter.WriteFormatString(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Writes the format string.
            </summary>
            <param name="name">The formatter name.</param>
            <param name="settings">The formatter settings.</param>
        </member>
        <member name="M:Tekla.BIM.Formatting.Formatter.WriteFormatProvider(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Writes the format provider.
            </summary>
            <param name="name">The formatter name.</param>
            <param name="settings">The formatter settings.</param>
        </member>
        <member name="P:Tekla.BIM.Formatting.Formatter.FormatString">
            <summary>
            Gets the format string.
            </summary>
            <value>
            The format string.
            </value>
        </member>
        <member name="P:Tekla.BIM.Formatting.Formatter.FormatProvider">
            <summary>
            Gets the format provider.
            </summary>
            <value>
            The format provider.
            </value>
        </member>
        <member name="M:Tekla.BIM.Formatting.Formatter`1.#ctor(System.String,System.IFormatProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.BIM.Formatting.Formatter`1"/> class.
            </summary>
            <param name="formatString">The format string.</param>
            <param name="formatProvider">The format provider.</param>
        </member>
        <member name="M:Tekla.BIM.Formatting.Formatter`1.ToString(`0)">
            <summary>
            Returns a string representation of the specified value.
            </summary>
            <param name="value">The value to format.</param>
            <returns>
            The string representation of the value.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Formatting.Formatter`1.TryParse(System.String,`0@)">
            <summary>
            Attempts to parse the specified string.
            </summary>
            <param name="text">The string to parse.</param>
            <param name="value">The output variable for the parsed value.</param>
            <returns>
            True if the value was parsed, otherwise false.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Formatting.QuantityFormatter`2.#ctor(`1,System.String,System.IFormatProvider,Tekla.BIM.Quantities.QuantityUnitSymbols)">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.BIM.Formatting.QuantityFormatter`2"/> class.
            </summary>
            <param name="unit">The unit.</param>
            <param name="formatString">The format string.</param>
            <param name="formatProvider">The format provider.</param>
            <param name="symbols">The unit symbols.</param>
        </member>
        <member name="M:Tekla.BIM.Formatting.QuantityFormatter`2.ReadUnit(System.String,System.Collections.Generic.IDictionary{System.String,System.String},`1)">
            <summary>
            Reads the unit.
            </summary>
            <param name="name">The formatter name.</param>
            <param name="settings">The formatter settings.</param>
            <param name="defaultValue">The default value.</param>
            <returns>
            The unit.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Formatting.QuantityFormatter`2.ReadSymbols(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Reads the unit symbols.
            </summary>
            <param name="name">The formatter name.</param>
            <param name="settings">The formatter settings.</param>
            <returns>
            The unit symbols.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Formatting.QuantityFormatter`2.WriteUnit(System.String,System.Collections.Generic.IDictionary{System.String,System.String},`1)">
            <summary>
            Writes the unit.
            </summary>
            <param name="name">The formatter name.</param>
            <param name="settings">The formatter settings.</param>
            <param name="defaultValue">The default value.</param>
        </member>
        <member name="M:Tekla.BIM.Formatting.QuantityFormatter`2.WriteSymbols(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Writes the unit symbols.
            </summary>
            <param name="name">The formatter name.</param>
            <param name="settings">The formatter settings.</param>
        </member>
        <member name="P:Tekla.BIM.Formatting.QuantityFormatter`2.Unit">
            <summary>
            Gets the unit.
            </summary>
            <value>
            The unit.
            </value>
        </member>
        <member name="P:Tekla.BIM.Formatting.QuantityFormatter`2.Symbols">
            <summary>
            Gets the unit symbols.
            </summary>
            <value>
            The unit symbols.
            </value>
        </member>
        <member name="F:Tekla.BIM.Formatting.AreaFormatter.NamePrefix">
            <summary>
            The formatter name prefix.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Formatting.AreaFormatter.Default">
            <summary>
            The default formatter.
            </summary>
        </member>
        <member name="M:Tekla.BIM.Formatting.AreaFormatter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.BIM.Formatting.AreaFormatter"/> class.
            </summary>
        </member>
        <member name="M:Tekla.BIM.Formatting.AreaFormatter.#ctor(Tekla.BIM.Quantities.AreaUnit,System.String,System.IFormatProvider,Tekla.BIM.Quantities.QuantityUnitSymbols)">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.BIM.Formatting.AreaFormatter"/> class.
            </summary>
            <param name="unit">The unit.</param>
            <param name="formatString">The format string.</param>
            <param name="formatProvider">The format provider.</param>
            <param name="symbols">The unit symbols.</param>
        </member>
        <member name="M:Tekla.BIM.Formatting.AreaFormatter.ReadSettings(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Reads the formatter settings.
            </summary>
            <param name="settings">The formatter settings.</param>
            <returns>
            The named formatters.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Formatting.AreaFormatter.WriteSettings(System.Collections.Generic.IDictionary{System.String,Tekla.BIM.Formatting.AreaFormatter},System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Writes the formatter settings.
            </summary>
            <param name="formatters">The named formatters.</param>
            <param name="settings">The formatter settings.</param>
        </member>
        <member name="M:Tekla.BIM.Formatting.AreaFormatter.ToString(Tekla.BIM.Quantities.Area)">
            <summary>
            Returns a string representation of the specified value.
            </summary>
            <param name="value">The value to format.</param>
            <returns>
            The string representation of the value.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Formatting.AreaFormatter.TryParse(System.String,Tekla.BIM.Quantities.Area@)">
            <summary>
            Attempts to parse the specified string.
            </summary>
            <param name="text">The string to parse.</param>
            <param name="value">The output variable for the parsed value.</param>
            <returns>
            True if the value was parsed, otherwise false.
            </returns>
        </member>
        <member name="T:Tekla.BIM.Formatting.DateTimeFormatter">
            <summary>
            <see cref="T:System.DateTime"/> formatter.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Formatting.DateTimeFormatter.NamePrefix">
            <summary>
            The formatter name prefix.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Formatting.DateTimeFormatter.Default">
            <summary>
            The default formatter.
            </summary>
        </member>
        <member name="M:Tekla.BIM.Formatting.DateTimeFormatter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.BIM.Formatting.DateTimeFormatter"/> class.
            </summary>
        </member>
        <member name="M:Tekla.BIM.Formatting.DateTimeFormatter.#ctor(System.Globalization.DateTimeStyles,System.String,System.IFormatProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.BIM.Formatting.DateTimeFormatter"/> class.
            </summary>
            <param name="dateTimeStyle">The <see cref="T:System.DateTime"/> style.</param>
            <param name="formatString">The format string.</param>
            <param name="formatProvider">The format provider.</param>
        </member>
        <member name="M:Tekla.BIM.Formatting.DateTimeFormatter.ReadSettings(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Reads the formatter settings.
            </summary>
            <param name="settings">The formatter settings.</param>
            <returns>
            The named formatters.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Formatting.DateTimeFormatter.WriteSettings(System.Collections.Generic.IDictionary{System.String,Tekla.BIM.Formatting.DateTimeFormatter},System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Writes the formatter settings.
            </summary>
            <param name="formatters">The named formatters.</param>
            <param name="settings">The formatter settings.</param>
        </member>
        <member name="M:Tekla.BIM.Formatting.DateTimeFormatter.ToString(System.DateTime)">
            <summary>
            Returns a string representation of the specified value.
            </summary>
            <param name="value">The value to format.</param>
            <returns>
            The string representation of the value.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Formatting.DateTimeFormatter.TryParse(System.String,System.DateTime@)">
            <summary>
            Attempts to parse the specified string.
            </summary>
            <param name="text">The string to parse.</param>
            <param name="value">The output variable for the parsed value.</param>
            <returns>
            True if the value was parsed, otherwise false.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Formatting.DateTimeFormatter.ReadDateTimeStyle(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Globalization.DateTimeStyles)">
            <summary>
            Reads the date time style.
            </summary>
            <param name="name">The formatter name.</param>
            <param name="settings">The formatter settings.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The date time style.</returns>
        </member>
        <member name="M:Tekla.BIM.Formatting.DateTimeFormatter.WriteDateTimeStyle(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Writes the date time style.
            </summary>
            <param name="name">The formatter name.</param>
            <param name="settings">The formatter settings.</param>
        </member>
        <member name="P:Tekla.BIM.Formatting.DateTimeFormatter.DateTimeStyle">
            <summary>
            Gets the <see cref="T:System.DateTime"/> style.
            </summary>
            <value>
            The <see cref="T:System.DateTime"/> style.
            </value>
        </member>
        <member name="T:Tekla.BIM.Formatting.DoubleFormatter">
            <summary>
            <see cref="T:System.Double"/> formatter.
            </summary>
        </member>
        <member name="T:Tekla.BIM.Formatting.NumberFormatter`1">
            <summary>
            An abstract base class for number formatters.
            </summary>
            <typeparam name="TNumber">The type of the number.</typeparam>
        </member>
        <member name="M:Tekla.BIM.Formatting.NumberFormatter`1.#ctor(System.Globalization.NumberStyles,System.String,System.IFormatProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.BIM.Formatting.NumberFormatter`1"/> class.
            </summary>
            <param name="numberStyle">The number style.</param>
            <param name="formatString">The format string.</param>
            <param name="formatProvider">The format provider.</param>
        </member>
        <member name="M:Tekla.BIM.Formatting.NumberFormatter`1.ReadNumberStyle(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Globalization.NumberStyles)">
            <summary>
            Reads the number style.
            </summary>
            <param name="name">The formatter name.</param>
            <param name="settings">The formatter settings.</param>
            <param name="defaultValue">The default value.</param>
            <returns>
            The number style.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Formatting.NumberFormatter`1.WriteNumberStyle(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Globalization.NumberStyles)">
            <summary>
            Writes the number style.
            </summary>
            <param name="name">The formatter name.</param>
            <param name="settings">The formatter settings.</param>
            <param name="defaultValue">The default value.</param>
        </member>
        <member name="P:Tekla.BIM.Formatting.NumberFormatter`1.NumberStyle">
            <summary>
            Gets the number style.
            </summary>
            <value>
            The number style.
            </value>
        </member>
        <member name="F:Tekla.BIM.Formatting.DoubleFormatter.NamePrefix">
            <summary>
            The formatter name prefix.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Formatting.DoubleFormatter.Default">
            <summary>
            The default formatter.
            </summary>
        </member>
        <member name="M:Tekla.BIM.Formatting.DoubleFormatter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.BIM.Formatting.DoubleFormatter"/> class.
            </summary>
        </member>
        <member name="M:Tekla.BIM.Formatting.DoubleFormatter.#ctor(System.Globalization.NumberStyles,System.String,System.IFormatProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.BIM.Formatting.DoubleFormatter"/> class.
            </summary>
            <param name="numberStyle">The number style.</param>
            <param name="formatString">The format string.</param>
            <param name="formatProvider">The format provider.</param>
        </member>
        <member name="M:Tekla.BIM.Formatting.DoubleFormatter.ReadSettings(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Reads the formatter settings.
            </summary>
            <param name="settings">The formatter settings.</param>
            <returns>
            The named formatters.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Formatting.DoubleFormatter.WriteSettings(System.Collections.Generic.IDictionary{System.String,Tekla.BIM.Formatting.DoubleFormatter},System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Writes the formatter settings.
            </summary>
            <param name="formatters">The named formatters.</param>
            <param name="settings">The formatter settings.</param>
        </member>
        <member name="M:Tekla.BIM.Formatting.DoubleFormatter.ToString(System.Double)">
            <summary>
            Returns a string representation of the specified value.
            </summary>
            <param name="value">The value to format.</param>
            <returns>
            The string representation of the value.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Formatting.DoubleFormatter.TryParse(System.String,System.Double@)">
            <summary>
            Attempts to parse the specified string.
            </summary>
            <param name="text">The string to parse.</param>
            <param name="value">The output variable for the parsed value.</param>
            <returns>
            True if the value was parsed, otherwise false.
            </returns>
        </member>
        <member name="T:Tekla.BIM.Formatting.Int32Formatter">
            <summary>
            <see cref="T:System.Int32"/> formatter.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Formatting.Int32Formatter.NamePrefix">
            <summary>
            The formatter name prefix.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Formatting.Int32Formatter.Default">
            <summary>
            The default formatter.
            </summary>
        </member>
        <member name="M:Tekla.BIM.Formatting.Int32Formatter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.BIM.Formatting.Int32Formatter"/> class.
            </summary>
        </member>
        <member name="M:Tekla.BIM.Formatting.Int32Formatter.#ctor(System.Globalization.NumberStyles,System.String,System.IFormatProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.BIM.Formatting.Int32Formatter"/> class.
            </summary>
            <param name="numberStyle">The number style.</param>
            <param name="formatString">The format string.</param>
            <param name="formatProvider">The format provider.</param>
        </member>
        <member name="M:Tekla.BIM.Formatting.Int32Formatter.ReadSettings(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Reads the formatter settings.
            </summary>
            <param name="settings">The formatter settings.</param>
            <returns>
            The named formatters.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Formatting.Int32Formatter.WriteSettings(System.Collections.Generic.IDictionary{System.String,Tekla.BIM.Formatting.Int32Formatter},System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Writes the formatter settings.
            </summary>
            <param name="formatters">The named formatters.</param>
            <param name="settings">The formatter settings.</param>
        </member>
        <member name="M:Tekla.BIM.Formatting.Int32Formatter.ToString(System.Int32)">
            <summary>
            Returns a string representation of the specified value.
            </summary>
            <param name="value">The value to format.</param>
            <returns>
            The string representation of the value.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Formatting.Int32Formatter.TryParse(System.String,System.Int32@)">
            <summary>
            Attempts to parse the specified string.
            </summary>
            <param name="text">The string to parse.</param>
            <param name="value">The output variable for the parsed value.</param>
            <returns>
            True if the value was parsed, otherwise false.
            </returns>
        </member>
        <member name="T:Tekla.BIM.Formatting.MassFormatter">
            <summary>
            <see cref="T:Tekla.BIM.Quantities.Mass"/> formatter.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Formatting.MassFormatter.NamePrefix">
            <summary>
            The formatter name prefix.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Formatting.MassFormatter.Default">
            <summary>
            The default formatter.
            </summary>
        </member>
        <member name="M:Tekla.BIM.Formatting.MassFormatter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.BIM.Formatting.MassFormatter"/> class.
            </summary>
        </member>
        <member name="M:Tekla.BIM.Formatting.MassFormatter.#ctor(Tekla.BIM.Quantities.MassUnit,System.String,System.IFormatProvider,Tekla.BIM.Quantities.QuantityUnitSymbols)">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.BIM.Formatting.MassFormatter"/> class.
            </summary>
            <param name="unit">The unit.</param>
            <param name="formatString">The format string.</param>
            <param name="formatProvider">The format provider.</param>
            <param name="symbols">The unit symbols.</param>
        </member>
        <member name="M:Tekla.BIM.Formatting.MassFormatter.ReadSettings(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Reads the formatter settings.
            </summary>
            <param name="settings">The formatter settings.</param>
            <returns>
            The named formatters.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Formatting.MassFormatter.WriteSettings(System.Collections.Generic.IDictionary{System.String,Tekla.BIM.Formatting.MassFormatter},System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Writes the formatter settings.
            </summary>
            <param name="formatters">The named formatters.</param>
            <param name="settings">The formatter settings.</param>
        </member>
        <member name="M:Tekla.BIM.Formatting.MassFormatter.ToString(Tekla.BIM.Quantities.Mass)">
            <summary>
            Returns a string representation of the specified value.
            </summary>
            <param name="value">The value to format.</param>
            <returns>
            The string representation of the value.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Formatting.MassFormatter.TryParse(System.String,Tekla.BIM.Quantities.Mass@)">
            <summary>
            Attempts to parse the specified string.
            </summary>
            <param name="text">The string to parse.</param>
            <param name="value">The output variable for the parsed value.</param>
            <returns>
            True if the value was parsed, otherwise false.
            </returns>
        </member>
        <member name="T:Tekla.BIM.Formatting.NamespaceDoc">
            <summary>
            The Tekla.BIM.Formatting namespace contains the culture sensitive formatters for common types.
            </summary>
        </member>
        <member name="T:Tekla.BIM.Formatting.TimeSpanFormatter">
            <summary>
            <see cref="T:System.TimeSpan"/> formatter.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Formatting.TimeSpanFormatter.NamePrefix">
            <summary>
            The formatter name prefix.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Formatting.TimeSpanFormatter.Default">
            <summary>
            The default formatter.
            </summary>
        </member>
        <member name="M:Tekla.BIM.Formatting.TimeSpanFormatter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.BIM.Formatting.TimeSpanFormatter"/> class.
            </summary>
        </member>
        <member name="M:Tekla.BIM.Formatting.TimeSpanFormatter.#ctor(System.String,System.IFormatProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.BIM.Formatting.TimeSpanFormatter"/> class.
            </summary>
            <param name="formatString">The format string.</param>
            <param name="formatProvider">The format provider.</param>
        </member>
        <member name="M:Tekla.BIM.Formatting.TimeSpanFormatter.ReadSettings(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Reads the formatter settings.
            </summary>
            <param name="settings">The formatter settings.</param>
            <returns>
            The named formatters.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Formatting.TimeSpanFormatter.WriteSettings(System.Collections.Generic.IDictionary{System.String,Tekla.BIM.Formatting.TimeSpanFormatter},System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Writes the formatter settings.
            </summary>
            <param name="formatters">The named formatters.</param>
            <param name="settings">The formatter settings.</param>
        </member>
        <member name="M:Tekla.BIM.Formatting.TimeSpanFormatter.ToString(System.TimeSpan)">
            <summary>
            Returns a string representation of the specified value.
            </summary>
            <param name="value">The value to format.</param>
            <returns>
            The string representation of the value.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Formatting.TimeSpanFormatter.TryParse(System.String,System.TimeSpan@)">
            <summary>
            Attempts to parse the specified string.
            </summary>
            <param name="text">The string to parse.</param>
            <param name="value">The output variable for the parsed value.</param>
            <returns>
            True if the value was parsed, otherwise false.
            </returns>
        </member>
        <member name="T:Tekla.BIM.Formatting.VolumeFormatter">
            <summary>
            <see cref="T:Tekla.BIM.Quantities.Volume"/> formatter.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Formatting.VolumeFormatter.NamePrefix">
            <summary>
            The formatter name prefix.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Formatting.VolumeFormatter.Default">
            <summary>
            The default formatter.
            </summary>
        </member>
        <member name="M:Tekla.BIM.Formatting.VolumeFormatter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.BIM.Formatting.VolumeFormatter"/> class.
            </summary>
        </member>
        <member name="M:Tekla.BIM.Formatting.VolumeFormatter.#ctor(Tekla.BIM.Quantities.VolumeUnit,System.String,System.IFormatProvider,Tekla.BIM.Quantities.QuantityUnitSymbols)">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.BIM.Formatting.VolumeFormatter"/> class.
            </summary>
            <param name="unit">The unit.</param>
            <param name="formatString">The format string.</param>
            <param name="formatProvider">The format provider.</param>
            <param name="symbols">The unit symbols.</param>
        </member>
        <member name="M:Tekla.BIM.Formatting.VolumeFormatter.ReadSettings(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Reads the formatter settings.
            </summary>
            <param name="settings">The formatter settings.</param>
            <returns>
            The named formatters.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Formatting.VolumeFormatter.WriteSettings(System.Collections.Generic.IDictionary{System.String,Tekla.BIM.Formatting.VolumeFormatter},System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Writes the formatter settings.
            </summary>
            <param name="formatters">The named formatters.</param>
            <param name="settings">The formatter settings.</param>
        </member>
        <member name="M:Tekla.BIM.Formatting.VolumeFormatter.ToString(Tekla.BIM.Quantities.Volume)">
            <summary>
            Returns a string representation of the specified value.
            </summary>
            <param name="value">The value to format.</param>
            <returns>
            The string representation of the value.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Formatting.VolumeFormatter.TryParse(System.String,Tekla.BIM.Quantities.Volume@)">
            <summary>
            Attempts to parse the specified string.
            </summary>
            <param name="text">The string to parse.</param>
            <param name="value">The output variable for the parsed value.</param>
            <returns>
            True if the value was parsed, otherwise false.
            </returns>
        </member>
        <member name="T:Tekla.BIM.Formatting.LengthFormatter">
            <summary>
            <see cref="T:Tekla.BIM.Quantities.Length"/> formatter.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Formatting.LengthFormatter.NamePrefix">
            <summary>
            The formatter name prefix.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Formatting.LengthFormatter.Default">
            <summary>
            The default formatter.
            </summary>
        </member>
        <member name="M:Tekla.BIM.Formatting.LengthFormatter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.BIM.Formatting.LengthFormatter"/> class.
            </summary>
        </member>
        <member name="M:Tekla.BIM.Formatting.LengthFormatter.#ctor(Tekla.BIM.Quantities.LengthUnit,System.String,System.IFormatProvider,Tekla.BIM.Quantities.QuantityUnitSymbols)">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.BIM.Formatting.LengthFormatter"/> class.
            </summary>
            <param name="unit">The unit.</param>
            <param name="formatString">The format string.</param>
            <param name="formatProvider">The format provider.</param>
            <param name="symbols">The unit symbols.</param>
        </member>
        <member name="M:Tekla.BIM.Formatting.LengthFormatter.ReadSettings(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Reads the formatter settings.
            </summary>
            <param name="settings">The formatter settings.</param>
            <returns>
            The named formatters.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Formatting.LengthFormatter.WriteSettings(System.Collections.Generic.IDictionary{System.String,Tekla.BIM.Formatting.LengthFormatter},System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Writes the formatter settings.
            </summary>
            <param name="formatters">The named formatters.</param>
            <param name="settings">The formatter settings.</param>
        </member>
        <member name="M:Tekla.BIM.Formatting.LengthFormatter.ToString(Tekla.BIM.Quantities.Length)">
            <summary>
            Returns a string representation of the specified value.
            </summary>
            <param name="value">The value to format.</param>
            <returns>
            The string representation of the value.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Formatting.LengthFormatter.TryParse(System.String,Tekla.BIM.Quantities.Length@)">
            <summary>
            Attempts to parse the specified string.
            </summary>
            <param name="text">The string to parse.</param>
            <param name="value">The output variable for the parsed value.</param>
            <returns>
            True if the value was parsed, otherwise false.
            </returns>
        </member>
        <member name="T:Tekla.BIM.Quantities.FractionalLengthFormats">
            <summary>
            Fractional length formats.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Quantities.FractionalLengthFormats.Fractional1">
            <summary>
            The 1/1" fractional length format.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Quantities.FractionalLengthFormats.Fractional2">
            <summary>
            The 1/2" fractional length format.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Quantities.FractionalLengthFormats.Fractional4">
            <summary>
            The 1/4" fractional length format.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Quantities.FractionalLengthFormats.Fractional8">
            <summary>
            The 1/8" fractional length format.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Quantities.FractionalLengthFormats.Fractional16">
            <summary>
            The 1/16" fractional length format.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Quantities.FractionalLengthFormats.Fractional32">
            <summary>
            The 1/32" fractional length format.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Quantities.FractionalLengthFormats.Fractional64">
            <summary>
            The 1/64" fractional length format.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Quantities.FractionalLengthFormats.Fractional128">
            <summary>
            The 1/128" fractional length format.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Quantities.FractionalLengthFormats.WholeFeetDecimalInches">
            <summary>
            The whole feet and decimal inches fractional length format.
            </summary>
        </member>
        <member name="T:Tekla.BIM.Quantities.InchSymbolPlacement">
            <summary>
            Inch symbol placement in the fractional format.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Quantities.InchSymbolPlacement.AfterInches">
            <summary>
            Place the inch symbol after the whole inches.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Quantities.InchSymbolPlacement.AfterFractions">
            <summary>
            Places the inch symbol after the fractional inches.
            </summary>
        </member>
        <member name="T:Tekla.BIM.Quantities.INumericQuantity`1">
            <summary>
            Numeric quantity interface.
            </summary>
            <typeparam name="TQuantity">The type of the quantity.</typeparam>
        </member>
        <member name="T:Tekla.BIM.Quantities.INumericQuantity">
            <summary>
            Numeric quantity interface.
            </summary>
        </member>
        <member name="M:Tekla.BIM.Quantities.INumericQuantity.IsNaN">
            <summary>
            Determines whether the quantity represents a value that is not a number.
            </summary>
            <returns>True if the quantity represents a value that is not a number, otherwise false.</returns>
        </member>
        <member name="M:Tekla.BIM.Quantities.INumericQuantity.IsInfinity">
            <summary>
            Determines whether the quantity represents a value that is an infinity.
            </summary>
            <returns>True if the quantity represents a value that is an infinity, otherwise false.</returns>
        </member>
        <member name="M:Tekla.BIM.Quantities.INumericQuantity.IsPositiveInfinity">
            <summary>
            Determines whether the quantity represents a value that is a positive infinity.
            </summary>
            <returns>True if the quantity represents a value that is a positive infinity, otherwise false.</returns>
        </member>
        <member name="M:Tekla.BIM.Quantities.INumericQuantity.IsNegativeInfinity">
            <summary>
            Determines whether the quantity represents a value that is a negative infinity.
            </summary>
            <returns>True if the quantity represents a value that is a negative infinity, otherwise false.</returns>
        </member>
        <member name="M:Tekla.BIM.Quantities.INumericQuantity`1.Round(`0,Tekla.BIM.Quantities.RoundingMode)">
            <summary>
            Rounds to the specified precision unit.
            </summary>
            <param name="precision">The precision unit.</param>
            <param name="roundingMode">The rounding mode.</param>
            <returns>
            The rounded value.
            </returns>
        </member>
        <member name="T:Tekla.BIM.Quantities.NamespaceDoc">
            <summary>
            The Tekla.BIM.Quantities namespace contains the quantity types such as <see cref="T:Tekla.BIM.Quantities.Length"/>, <see cref="T:Tekla.BIM.Quantities.Area"/>, <see cref="T:Tekla.BIM.Quantities.Volume"/> and <see cref="T:Tekla.BIM.Quantities.Mass"/>.
            </summary>
        </member>
        <member name="T:Tekla.BIM.Quantities.RoundingMode">
            <summary>
            Rounding modes.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Quantities.RoundingMode.Nearest">
            <summary>
            Round to the nearest whole precision unit.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Quantities.RoundingMode.Up">
            <summary>
            Round up to the whole precision unit.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Quantities.RoundingMode.Down">
            <summary>
            Round down to the whole precision unit.
            </summary>
        </member>
        <member name="T:Tekla.BIM.Toolkit.ObjectReferenceComparer">
            <summary>
            Efficient object equality comparer. E.g. uses ReferenceEquals for comparing interned strings.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.ObjectReferenceComparer.getHasCodeFunc">
            <summary>
            Custom hashcode generator. Can be used for performance tuning in special cases.
            </summary>
        </member>
        <member name="M:Tekla.BIM.Toolkit.ObjectReferenceComparer.#ctor(System.Func{System.Object,System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.BIM.Toolkit.ObjectReferenceComparer"/> class.
            </summary>
            <param name="getHasCodeFunc">The custom hashcode generator.</param>
        </member>
        <member name="M:Tekla.BIM.Toolkit.ObjectReferenceComparer.System#Collections#Generic#IEqualityComparer{System#Object}#Equals(System.Object,System.Object)">
            <summary>
            Determines whether the specified objects are equal.
            </summary>
            <param name="x">The first object of type <paramref name="x" /> to compare.</param>
            <param name="y">The second object of type <paramref name="y" /> to compare.</param>
            <returns>
            True if the specified objects are equal; otherwise, false.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Toolkit.ObjectReferenceComparer.GetHashCode(System.Object)">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <param name="obj">The object.</param>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="T:Tekla.BIM.Toolkit.StringInterning">
            <summary>
            Class to intern strings, that is, having only one instance for each word.
            </summary>
            <remarks>
            Not thread safe, but every thread could have its own instance.
            </remarks>
        </member>
        <member name="F:Tekla.BIM.Toolkit.StringInterning.strings">
            <summary>
            The interned strings.
            </summary>
        </member>
        <member name="M:Tekla.BIM.Toolkit.StringInterning.Intern(System.String)">
            <summary>
            Gets or add string from this StringInterning instance.
            </summary>
            <param name="stringToIntern">
            The word To Intern.
            </param>
            <returns>
            The <see cref="T:System.String"/> reference.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Toolkit.StringInterning.Clear">
            <summary>
            Clear all strings from this StringInterning instance.
            </summary>
        </member>
        <member name="P:Tekla.BIM.Toolkit.StringInterning.Count">
            <summary>
            Gets the count.
            </summary>
            <value>
            The count.
            </value>
        </member>
        <member name="T:Tekla.BIM.Toolkit.AssemblyDirectory">
            <summary>
            Provides methods for discovering assemblies from a directory.
            </summary>
            <example>
            This example shows how to discover and load plugins.
            <code>
            // Plugins directory is placed in the application directory.
            var plugins = new AssemblyDirectory("Plugins");
            
            // Create instances of classes that derive from Plugin class and are annotated with PluginAttribute attribute.
            foreach (Plugin instance in plugins.CreateInstances&lt;Plugin, PluginAttribute&gt;())
            {
                // Use the instance here.
            }
            </code>
            </example>
        </member>
        <member name="F:Tekla.BIM.Toolkit.AssemblyDirectory.assemblyFileFilter">
            <summary>
            The assembly file filter.
            </summary>
        </member>
        <member name="M:Tekla.BIM.Toolkit.AssemblyDirectory.#ctor(System.String,System.String,System.Func{System.String,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.BIM.Toolkit.AssemblyDirectory"/> class.
            </summary>
            <param name="path">The assembly directory path. If the path is relative, the root is the current application domain base directory.</param>
            <param name="searchPattern">The assembly file search pattern.</param>
            <param name="assemblyFileFilter">The delegate to a method that filters the loaded assembly files. Can be null.</param>
        </member>
        <member name="M:Tekla.BIM.Toolkit.AssemblyDirectory.GetAssemblyFiles(Tekla.BIM.Toolkit.IEventLogWriter)">
            <summary>
            Gets the assembly files.
            </summary>
            <param name="eventLogWriter">The event log writer for errors. Can be null.</param>
            <returns>
            The assembly files in the directory.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Toolkit.AssemblyDirectory.GetAssemblies(Tekla.BIM.Toolkit.IEventLogWriter)">
            <summary>
            Gets the assemblies in the directory.
            </summary>
            <param name="eventLogWriter">The event log writer for errors. Can be null.</param>
            <returns>
            The assemblies in the directory.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Toolkit.AssemblyDirectory.GetExportedTypes(Tekla.BIM.Toolkit.IEventLogWriter)">
            <summary>
            Gets the exported types from the assemblies in the directory.
            </summary>
            <param name="eventLogWriter">The event log writer for errors. Can be null.</param>
            <returns>
            The exported types from the assemblies.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Toolkit.AssemblyDirectory.GetExportedTypes``1(Tekla.BIM.Toolkit.IEventLogWriter)">
            <summary>
            Gets the exported types with the specified base class or interface from the assemblies in the directory.
            </summary>
            <typeparam name="TBaseClassOrInterface">The type of the base class or interface.</typeparam>
            <param name="eventLogWriter">The event log writer for errors. Can be null.</param>
            <returns>
            The exported types from the assemblies.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Toolkit.AssemblyDirectory.GetExportedTypes``2(Tekla.BIM.Toolkit.IEventLogWriter)">
            <summary>
            Gets the exported types with the specified base class or interface and custom attribute from the assemblies in the directory.
            </summary>
            <typeparam name="TBaseClassOrInterface">The type of the base class or interface.</typeparam>
            <typeparam name="TCustomAttribute">The type of the custom attribute.</typeparam>
            <param name="eventLogWriter">The event log writer for errors. Can be null.</param>
            <returns>
            The exported types from the assemblies.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Toolkit.AssemblyDirectory.CreateInstances``1(Tekla.BIM.Toolkit.IEventLogWriter)">
            <summary>
            Creates an instance of every exported type with the specified base class or interface.
            </summary>
            <typeparam name="TBaseClassOrInterface">The type of the base class or interface.</typeparam>
            <param name="eventLogWriter">The event log writer for errors. Can be null.</param>
            <returns>
            The created instances.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Toolkit.AssemblyDirectory.CreateInstances``2(Tekla.BIM.Toolkit.IEventLogWriter)">
            <summary>
            Creates an instance of every exported type with the specified base class or interface and custom attributes.
            </summary>
            <typeparam name="TBaseClassOrInterface">The type of the base class or interface.</typeparam>
            <typeparam name="TCustomAttribute">The type of the custom attribute.</typeparam>
            <param name="eventLogWriter">The event log writer for errors. Can be null.</param>
            <returns>
            The created instances.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Toolkit.AssemblyDirectory.LoadAssembly(System.String,Tekla.BIM.Toolkit.IEventLogWriter)">
            <summary>
            Loads the assembly from the specified path.
            </summary>
            <param name="path">The assembly file path.</param>
            <param name="eventLogWriter">The event log writer for errors. Can be null.</param>
            <returns>
            The loaded assembly or null if the assembly could not be loaded.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Toolkit.AssemblyDirectory.GetExportedTypes(System.Reflection.Assembly,Tekla.BIM.Toolkit.IEventLogWriter)">
            <summary>
            Gets the exported types.
            </summary>
            <param name="assembly">The assembly.</param>
            <param name="eventLogWriter">The event log writer for errors. Can be null.</param>
            <returns>
            The exported types.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Toolkit.AssemblyDirectory.CreateInstance``1(System.Type,Tekla.BIM.Toolkit.IEventLogWriter)">
            <summary>
            Creates an instance of the specified type.
            </summary>
            <typeparam name="TBaseClassOrInterface">The type of the base class or interface.</typeparam>
            <param name="type">The type.</param>
            <param name="eventLogWriter">The event log writer for errors. Can be null.</param>
            <returns>
            The object instance or null if the instance could not be created.
            </returns>
        </member>
        <member name="P:Tekla.BIM.Toolkit.AssemblyDirectory.DirectoryPath">
            <summary>
            Gets the assembly directory path.
            </summary>
            <value>
            The assembly directory path.
            </value>
        </member>
        <member name="P:Tekla.BIM.Toolkit.AssemblyDirectory.SearchPattern">
            <summary>
            Gets the assembly file search pattern.
            </summary>
            <value>
            The assembly file search pattern.
            </value>
        </member>
        <member name="T:Tekla.BIM.Toolkit.CollectionBindingSource`1">
            <summary>
            Provides refresh support between an enumerable collection and a data binding.
            </summary>
            <typeparam name="T">The collection element type.</typeparam>
            <example>
            This example shows how wrap a list for data binding.
            <code>
            var list = new List&lt;int&gt;();
            var bindable = new CollectionBindingSource&lt;int&gt; { ItemsSource = list };
            
            list.Add(3);
            bindable.Refresh(); // Notifies the binding that the list has changed.
            </code>
            </example>
        </member>
        <member name="T:Tekla.BIM.Toolkit.BindingSource">
            <summary>
            Base class for objects that can be used as a source for data binding.
            </summary>
            <example>
            This example shows how to implement a simple binding source object.
            <code>
            public class MyBindingSource : BindingSource
            {
                // Text property backing field.
                private string _text = "default text";
                
                // Text property.
                public string Text
                {
                    get { return _text; }
                    set { SetValue(ref _text, value); }
                }
            }
            </code>
            </example>
        </member>
        <member name="T:Tekla.BIM.Toolkit.ISuppressNotifications">
            <summary>
            Provides a way to suppress notifications for a while.
            </summary>
        </member>
        <member name="M:Tekla.BIM.Toolkit.ISuppressNotifications.SuppressNotifications">
            <summary>
            Suppresses the notifications until the returned token is disposed of.
            </summary>
            <returns>
            The disposable token that re-enables the notifications.
            </returns>
            <example>
            This example shows how to suppress notifications for a while.
            <code>
            // myObj implements ISuppressNotifications
            using (myObj.SuppressNotifications())
            {
                // Normally this would cause notifications to be invoked.
                myObj.UpdateObjectState();
            }
            </code>
            </example>
        </member>
        <member name="F:Tekla.BIM.Toolkit.BindingSource.DefaultContext">
            <summary>
            The default context.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.BindingSource.PropertyChangedRaiseTimer">
            <summary>
            The PropertyChanged event raise timer.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.BindingSource.PendingPropertyChangedEvents">
            <summary>
            The pending PropertyChanged events.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.BindingSource.pendingNotifications">
            <summary>
            Pending notifications.
            </summary>
        </member>
        <member name="M:Tekla.BIM.Toolkit.BindingSource.SuppressNotifications">
            <summary>
            Suppresses the notifications until the returned token is disposed of.
            </summary>
            <returns>
            The disposable token that re-enables the notifications.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Toolkit.BindingSource.RaisePropertyChanged(System.String)">
            <summary>
            Raises the <see cref="E:Tekla.BIM.Toolkit.BindingSource.PropertyChanged"/> event.
            </summary>
            <param name="propertyName">The property name. If not specified, defaults to the caller member name.</param>
        </member>
        <member name="M:Tekla.BIM.Toolkit.BindingSource.RaisePropertyChangedAsync(System.String)">
            <summary>
            Raises the <see cref="E:Tekla.BIM.Toolkit.BindingSource.PropertyChanged"/> event asynchronously.
            </summary>
            <param name="propertyName">The property name. If not specified, defaults to the caller member name.</param>
        </member>
        <member name="M:Tekla.BIM.Toolkit.BindingSource.RaisePropertyChanged(System.String,System.String,System.String[])">
            <summary>
            Raises the <see cref="E:Tekla.BIM.Toolkit.BindingSource.PropertyChanged"/> event.
            </summary>
            <param name="propertyName1">The first property name.</param>
            <param name="propertyName2">The second property name.</param>
            <param name="propertyNames">The other property names.</param>
        </member>
        <member name="M:Tekla.BIM.Toolkit.BindingSource.RaisePropertyChangedAsync(System.String,System.String,System.String[])">
            <summary>
            Raises the <see cref="E:Tekla.BIM.Toolkit.BindingSource.PropertyChanged"/> event asynchronously.
            </summary>
            <param name="propertyName1">The first property name.</param>
            <param name="propertyName2">The second property name.</param>
            <param name="propertyNames">The other property names.</param>
        </member>
        <member name="M:Tekla.BIM.Toolkit.BindingSource.SetValue``1(``0@,``0,System.String)">
            <summary>
            Sets the property value. Raises the <see cref="E:Tekla.BIM.Toolkit.BindingSource.PropertyChanged"/> event, if needed.
            </summary>
            <typeparam name="T">The type of the property value.</typeparam>
            <param name="field">The property backing field.</param>
            <param name="value">The new property value.</param>
            <param name="propertyName">The property name. If not specified, defaults to the caller member name.</param>
        </member>
        <member name="M:Tekla.BIM.Toolkit.BindingSource.SetValueAsync``1(``0@,``0,System.String)">
            <summary>
            Sets the property value. Raises the <see cref="E:Tekla.BIM.Toolkit.BindingSource.PropertyChanged"/> event asynchronously, if needed.
            </summary>
            <typeparam name="T">The type of the property value.</typeparam>
            <param name="field">The property backing field.</param>
            <param name="value">The new property value.</param>
            <param name="propertyName">The property name. If not specified, defaults to the caller member name.</param>
        </member>
        <member name="M:Tekla.BIM.Toolkit.BindingSource.OnNotificationsReEnabled">
            <summary>
            Called when the notifications are re-enabled.
            </summary>
        </member>
        <member name="M:Tekla.BIM.Toolkit.BindingSource.RaisePropertyChangedEvent(System.Object)">
            <summary>
            Raises the property changed event.
            </summary>
            <param name="state">This parameter is not used.</param>
        </member>
        <member name="E:Tekla.BIM.Toolkit.BindingSource.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="P:Tekla.BIM.Toolkit.BindingSource.AreNotificationsSuppressed">
            <summary>
            Gets a value indicating whether the notifications are suppressed.
            </summary>
            <value>
            True if the notifications are suppressed, otherwise false.
            </value>
        </member>
        <member name="F:Tekla.BIM.Toolkit.CollectionBindingSource`1.itemsSource">
            <summary>
            The items source.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.CollectionBindingSource`1.pendingCollectionChanges">
            <summary>
            Indicates whether there are any pending collection changes.
            </summary>
        </member>
        <member name="M:Tekla.BIM.Toolkit.CollectionBindingSource`1.Refresh">
            <summary>
            Notifies the binding that the item source has changed.
            </summary>
        </member>
        <member name="M:Tekla.BIM.Toolkit.CollectionBindingSource`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An enumerator object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Toolkit.CollectionBindingSource`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An enumerator object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Toolkit.CollectionBindingSource`1.OnNotificationsReEnabled">
            <summary>
            Called when the notifications are re-enabled.
            </summary>
        </member>
        <member name="M:Tekla.BIM.Toolkit.CollectionBindingSource`1.ItemsSourceChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Handles events from items source changes.
            </summary>
            <param name="sender">Sender object.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="E:Tekla.BIM.Toolkit.CollectionBindingSource`1.CollectionChanged">
            <summary>
            Occurs when the collection changes.
            </summary>
        </member>
        <member name="P:Tekla.BIM.Toolkit.CollectionBindingSource`1.ItemsSource">
            <summary>
            Gets or sets the items source.
            </summary>
            <value>
            The items source.
            </value>
        </member>
        <member name="T:Tekla.BIM.Quantities.Area">
            <summary>
            Area quantity.
            </summary>
        </member>
        <member name="T:Tekla.BIM.Quantities.IFormattableQuantity`1">
            <summary>
            Formattable quantity interface.
            </summary>
            <typeparam name="TQuantityUnit">The quantity unit type.</typeparam>
        </member>
        <member name="M:Tekla.BIM.Quantities.IFormattableQuantity`1.ToString(`0,System.String,System.IFormatProvider,Tekla.BIM.Quantities.QuantityUnitSymbols)">
            <summary>
            Returns a string that represents the quantity.
            </summary>
            <param name="quantityUnit">The quantity unit.</param>
            <param name="format">The format string for the numeric part.</param>
            <param name="formatProvider">The format provider for the numeric part.</param>
            <param name="symbols">The unit symbols.</param>
            <returns>
            A string that represents the quantity.
            </returns>
        </member>
        <member name="F:Tekla.BIM.Quantities.Area.SquareMillimetersInSquareCentimeter">
            <summary>
            The square millimeters in one square centimeter.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Quantities.Area.SquareMillimetersInSquareMeter">
            <summary>
            The square millimeters in one square meter.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Quantities.Area.SquareMillimetersInSquareInch">
            <summary>
            The square millimeters in one square inch.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Quantities.Area.SquareMillimetersInSquareFoot">
            <summary>
            The square millimeters in one square foot.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Quantities.Area.SquareMillimetersInSquareYard">
            <summary>
            The square millimeters in one square yard.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Quantities.Area.Zero">
            <summary>
            The zero area.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Quantities.Area.SquareMillimeter">
            <summary>
            One square millimeter area.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Quantities.Area.SquareCentimeter">
            <summary>
            One square centimeter area.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Quantities.Area.SquareMeter">
            <summary>
            One square meter area.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Quantities.Area.SquareInch">
            <summary>
            One square inch area.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Quantities.Area.SquareFoot">
            <summary>
            One square foot area.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Quantities.Area.SquareYard">
            <summary>
            One square yard area.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Quantities.Area.DefaultSymbols">
            <summary>
            The default quantity unit symbols.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Quantities.Area.DecimalFormat">
            <summary>
            The accepted decimal format.
            </summary>
        </member>
        <member name="M:Tekla.BIM.Quantities.Area.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.BIM.Quantities.Area"/> struct.
            </summary>
            <param name="squareMillimeters">The area in square millimeters.</param>
        </member>
        <member name="M:Tekla.BIM.Quantities.Area.op_Equality(Tekla.BIM.Quantities.Area,Tekla.BIM.Quantities.Area)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="a">The left hand side operand.</param>
            <param name="b">The right hand side operand.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Quantities.Area.op_Inequality(Tekla.BIM.Quantities.Area,Tekla.BIM.Quantities.Area)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="a">The left hand side operand.</param>
            <param name="b">The right hand side operand.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Quantities.Area.op_LessThan(Tekla.BIM.Quantities.Area,Tekla.BIM.Quantities.Area)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="a">The left hand side operand.</param>
            <param name="b">The right hand side operand.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Quantities.Area.op_LessThanOrEqual(Tekla.BIM.Quantities.Area,Tekla.BIM.Quantities.Area)">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="a">The left hand side operand.</param>
            <param name="b">The right hand side operand.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Quantities.Area.op_GreaterThan(Tekla.BIM.Quantities.Area,Tekla.BIM.Quantities.Area)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="a">The left hand side operand.</param>
            <param name="b">The right hand side operand.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Quantities.Area.op_GreaterThanOrEqual(Tekla.BIM.Quantities.Area,Tekla.BIM.Quantities.Area)">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="a">The left hand side operand.</param>
            <param name="b">The right hand side operand.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Quantities.Area.op_Addition(Tekla.BIM.Quantities.Area,Tekla.BIM.Quantities.Area)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="a">The left hand side operand.</param>
            <param name="b">The right hand side operand.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Quantities.Area.op_UnaryNegation(Tekla.BIM.Quantities.Area)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="a">The operand.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Quantities.Area.op_Subtraction(Tekla.BIM.Quantities.Area,Tekla.BIM.Quantities.Area)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="a">The left hand side operand.</param>
            <param name="b">The right hand side operand.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Quantities.Area.op_Multiply(Tekla.BIM.Quantities.Area,System.Double)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="a">The left hand side operand.</param>
            <param name="b">The right hand side operand.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Quantities.Area.op_Multiply(System.Double,Tekla.BIM.Quantities.Area)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="a">The left hand side operand.</param>
            <param name="b">The right hand side operand.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Quantities.Area.op_Division(Tekla.BIM.Quantities.Area,System.Double)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="a">The left hand side operand.</param>
            <param name="b">The right hand side operand.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Quantities.Area.op_Division(Tekla.BIM.Quantities.Area,Tekla.BIM.Quantities.Area)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="a">The left hand side operand.</param>
            <param name="b">The right hand side operand.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Quantities.Area.op_Modulus(Tekla.BIM.Quantities.Area,Tekla.BIM.Quantities.Area)">
            <summary>
            Implements the operator %.
            </summary>
            <param name="a">The left hand side operand.</param>
            <param name="b">The right hand side operand.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Quantities.Area.From(System.Double,Tekla.BIM.Quantities.AreaUnit)">
            <summary>
            Creates an instance of the <see cref="T:Tekla.BIM.Quantities.Area"/> struct from the specified area and unit.
            </summary>
            <param name="area">The area in the specified units.</param>
            <param name="areaUnit">The area unit.</param>
            <returns>
            Created <see cref="T:Tekla.BIM.Quantities.Area"/> struct with the specified area.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Quantities.Area.Parse(System.String,Tekla.BIM.Quantities.AreaUnit,System.IFormatProvider,Tekla.BIM.Quantities.QuantityUnitSymbols)">
            <summary>
            Parses the specified text.
            </summary>
            <param name="text">The text to parse.</param>
            <param name="areaUnit">The area unit.</param>
            <param name="formatProvider">The format provider.</param>
            <param name="symbols">The unit symbols.</param>
            <returns>
            The parsed <see cref="T:Tekla.BIM.Quantities.Area"/> struct.
            </returns>
            <exception cref="T:System.FormatException">Thrown if the specified text could not be parsed.</exception>
        </member>
        <member name="M:Tekla.BIM.Quantities.Area.TryParse(System.String,Tekla.BIM.Quantities.Area@,Tekla.BIM.Quantities.AreaUnit,System.IFormatProvider,Tekla.BIM.Quantities.QuantityUnitSymbols)">
            <summary>
            Attempts to parse the specified text.
            </summary>
            <param name="text">The text to parse.</param>
            <param name="result">Output variable for the result.</param>
            <param name="areaUnit">The default area unit.</param>
            <param name="formatProvider">The format provider.</param>
            <param name="symbols">The unit symbols.</param>
            <returns>
            True if the specified text was parsed, otherwise false.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Quantities.Area.CompareTo(System.Object)">
            <summary>
            Compares the area to the specified object.
            </summary>
            <param name="other">The other object.</param>
            <returns>
            Integer value that indicates the relative order of the objects.
            </returns>
            <exception cref="T:System.ArgumentException">Thrown if the other object is not of type <see cref="T:Tekla.BIM.Quantities.Area"/>.</exception>
        </member>
        <member name="M:Tekla.BIM.Quantities.Area.CompareTo(Tekla.BIM.Quantities.Area)">
            <summary>
            Compares the two areas.
            </summary>
            <param name="other">The other area.</param>
            <returns>
            Integer value that indicates the relative order of the two areas.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Quantities.Area.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to this area.
            </summary>
            <param name="other">The other object.</param>
            <returns>
            True if the specified object is equal to the area, otherwise false.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Quantities.Area.Equals(Tekla.BIM.Quantities.Area)">
            <summary>
            Determines whether the two areas are equal.
            </summary>
            <param name="other">The other area.</param>
            <returns>
            True if the two areas are equal, otherwise false.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Quantities.Area.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A hash code for the object.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Quantities.Area.IsNaN">
            <summary>
            Determines whether the area represents a value that is not a number.
            </summary>
            <returns>
            True if the area represents a value that is not a number, otherwise false.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Quantities.Area.IsInfinity">
            <summary>
            Determines whether the area represents a value that is an infinity.
            </summary>
            <returns>
            True if the area represents a value that is an infinity, otherwise false.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Quantities.Area.IsPositiveInfinity">
            <summary>
            Determines whether the area represents a value that is a positive infinity.
            </summary>
            <returns>
            True if the area represents a value that is a positive infinity, otherwise false.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Quantities.Area.IsNegativeInfinity">
            <summary>
            Determines whether the area represents a value that is a negative infinity.
            </summary>
            <returns>
            True if the area represents a value that is a negative infinity, otherwise false.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Quantities.Area.Round(Tekla.BIM.Quantities.Area,Tekla.BIM.Quantities.RoundingMode)">
            <summary>
            Rounds to the specified precision unit.
            </summary>
            <param name="precision">The precision unit.</param>
            <param name="roundingMode">The rounding mode.</param>
            <returns>
            The rounded value.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Quantities.Area.To(Tekla.BIM.Quantities.AreaUnit)">
            <summary>
            Converts the <see cref="T:Tekla.BIM.Quantities.Area"/> struct to the specified area units.
            </summary>
            <param name="areaUnit">The area unit.</param>
            <returns>
            The area in the specified units.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Quantities.Area.ToString">
            <summary>
            Returns a string that represents the area.
            </summary>
            <returns>
            A string that represents the area.
            </returns>
            <example>
            The following example shows how to convert a value expressed in square millimeter into a string.
            <code>
                var area = Area.From(12, AreaUnit.SquareMillimeter);
                string mm2 = area.ToString(); // "12 mm2"
            </code>
            </example>
        </member>
        <member name="M:Tekla.BIM.Quantities.Area.ToString(Tekla.BIM.Quantities.AreaUnit,System.String,System.IFormatProvider,Tekla.BIM.Quantities.QuantityUnitSymbols)">
            <summary>
            Returns a string that represents the area.
            </summary>
            <param name="areaUnit">The area unit.</param>
            <param name="format">The format string.</param>
            <param name="formatProvider">The format provider.</param>
            <param name="symbols">The formatting options.</param>
            <returns>
            A string that represents the area.
            </returns>
            <remarks>The result will be the following in these conditions:
            - Empty string if the area is not a number.
            - "INF" if the area is positive infinity.
            - "-INF" if the area is negative infinity.
            </remarks>
            <example>
            The following example shows how to convert a value expressed in square meter into a string without the unit symbol.
            <code>
                var area = Area.From(123, AreaUnit.SquareMeter);
                var m2 = area.ToString(AreaUnit.SquareMeter, symbols: QuantityUnitSymbols.NoSymbols); // "123"
            </code>
            </example>
            <example>
            The following example shows how to convert a value expressed in square millimeter into a string representing a square centimeter value.
            <code>
                var area = Area.From(100, AreaUnit.SquareMillimeter);
                var cm2 = area.ToString(AreaUnit.SquareCentimeter); // "1 cm2"
            </code>
            </example>
            <example>
            The following example shows all the possible string conversion units.
            <code>
                Console.WriteLine("{0} cm2 --> {1}", 1,     Area.From(1,     AreaUnit.SquareCentimeter).ToString(AreaUnit.SquareMillimeter));
                Console.WriteLine("{0} mm2 --> {1}", 100,   Area.From(100,   AreaUnit.SquareMillimeter).ToString(AreaUnit.SquareCentimeter));
                Console.WriteLine("{0} cm2 --> {1}", 10000, Area.From(10000, AreaUnit.SquareCentimeter).ToString(AreaUnit.SquareMeter));
                Console.WriteLine("{0} ft2 --> {1}", 1,     Area.From(1,     AreaUnit.SquareFoot).ToString(AreaUnit.SquareInch));
                Console.WriteLine("{0} in2 --> {1}", 144,   Area.From(144,   AreaUnit.SquareInch).ToString(AreaUnit.SquareFoot));
                Console.WriteLine("{0} ft2 --> {1}", 9,     Area.From(9,     AreaUnit.SquareFoot).ToString(AreaUnit.SquareYard));
            </code>
            The output will be:
            <code>
                1 cm2 --> 100 mm2
                100 mm2 --> 1 cm2
                10000 cm2 --> 1 m2
                1 ft2 --> 144 in2
                144 in2 --> 1 ft2
                9 ft2 --> 1 yd2
            </code>
            </example>
        </member>
        <member name="M:Tekla.BIM.Quantities.Area.System#Xml#Serialization#IXmlSerializable#GetSchema">
            <summary>
            This method is reserved and should not be used.
            </summary>
            <returns>
            Always null.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Quantities.Area.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized.</param>
        </member>
        <member name="M:Tekla.BIM.Quantities.Area.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized.</param>
        </member>
        <member name="P:Tekla.BIM.Quantities.Area.SquareMillimeters">
            <summary>
            Gets the area in square millimeters.
            </summary>
            <value>
            The area in square millimeters.
            </value>
        </member>
        <member name="T:Tekla.BIM.Quantities.AreaUnit">
            <summary>
            Area units.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Quantities.AreaUnit.SquareMillimeter">
            <summary>
            Square millimeter area unit.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Quantities.AreaUnit.SquareCentimeter">
            <summary>
            Square centimeter area unit.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Quantities.AreaUnit.SquareMeter">
            <summary>
            Square meter area unit.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Quantities.AreaUnit.SquareInch">
            <summary>
            Square inch area unit.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Quantities.AreaUnit.SquareFoot">
            <summary>
            Square foot area unit.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Quantities.AreaUnit.SquareYard">
            <summary>
            Square yard area unit.
            </summary>
        </member>
        <member name="T:Tekla.BIM.Quantities.Length">
            <summary>
            Length quantity.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Quantities.Length.MillimetersInCentimeter">
            <summary>
            The millimeters in one centimeter.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Quantities.Length.MillimetersInMeter">
            <summary>
            The millimeters in one meter.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Quantities.Length.MillimetersInInch">
            <summary>
            The millimeters in one inch.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Quantities.Length.MillimetersInFoot">
            <summary>
            The millimeters in one foot.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Quantities.Length.MillimetersInYard">
            <summary>
            The millimeters in one yard.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Quantities.Length.InchesInFoot">
            <summary>
            The inches in one foot.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Quantities.Length.Zero">
            <summary>
            The zero length.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Quantities.Length.Millimeter">
            <summary>
            One millimeter length.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Quantities.Length.Centimeter">
            <summary>
            One centimeter length.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Quantities.Length.Meter">
            <summary>
            One meter length.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Quantities.Length.Inch">
            <summary>
            One inch length.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Quantities.Length.Foot">
            <summary>
            One foot length.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Quantities.Length.Yard">
            <summary>
            One yard length.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Quantities.Length.DefaultSymbols">
            <summary>
            The default quantity unit symbols.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Quantities.Length.DecimalFormat">
            <summary>
            The accepted decimal format.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Quantities.Length.FractionalFormat">
            <summary>
            The accepted fractional formats.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Quantities.Length.MixedFormat">
            <summary>
            The accepted mixed format string.
            </summary>
        </member>
        <member name="M:Tekla.BIM.Quantities.Length.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.BIM.Quantities.Length"/> struct.
            </summary>
            <param name="millimeters">The length in millimeters.</param>
        </member>
        <member name="M:Tekla.BIM.Quantities.Length.op_Equality(Tekla.BIM.Quantities.Length,Tekla.BIM.Quantities.Length)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="a">The left hand side operand.</param>
            <param name="b">The right hand side operand.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Quantities.Length.op_Inequality(Tekla.BIM.Quantities.Length,Tekla.BIM.Quantities.Length)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="a">The left hand side operand.</param>
            <param name="b">The right hand side operand.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Quantities.Length.op_LessThan(Tekla.BIM.Quantities.Length,Tekla.BIM.Quantities.Length)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="a">The left hand side operand.</param>
            <param name="b">The right hand side operand.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Quantities.Length.op_LessThanOrEqual(Tekla.BIM.Quantities.Length,Tekla.BIM.Quantities.Length)">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="a">The left hand side operand.</param>
            <param name="b">The right hand side operand.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Quantities.Length.op_GreaterThan(Tekla.BIM.Quantities.Length,Tekla.BIM.Quantities.Length)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="a">The left hand side operand.</param>
            <param name="b">The right hand side operand.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Quantities.Length.op_GreaterThanOrEqual(Tekla.BIM.Quantities.Length,Tekla.BIM.Quantities.Length)">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="a">The left hand side operand.</param>
            <param name="b">The right hand side operand.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Quantities.Length.op_Addition(Tekla.BIM.Quantities.Length,Tekla.BIM.Quantities.Length)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="a">The left hand side operand.</param>
            <param name="b">The right hand side operand.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Quantities.Length.op_UnaryNegation(Tekla.BIM.Quantities.Length)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="a">The operand.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Quantities.Length.op_Subtraction(Tekla.BIM.Quantities.Length,Tekla.BIM.Quantities.Length)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="a">The left hand side operand.</param>
            <param name="b">The right hand side operand.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Quantities.Length.op_Multiply(Tekla.BIM.Quantities.Length,System.Double)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="a">The left hand side operand.</param>
            <param name="b">The right hand side operand.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Quantities.Length.op_Multiply(System.Double,Tekla.BIM.Quantities.Length)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="a">The left hand side operand.</param>
            <param name="b">The right hand side operand.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Quantities.Length.op_Division(Tekla.BIM.Quantities.Length,System.Double)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="a">The left hand side operand.</param>
            <param name="b">The right hand side operand.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Quantities.Length.op_Division(Tekla.BIM.Quantities.Length,Tekla.BIM.Quantities.Length)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="a">The left hand side operand.</param>
            <param name="b">The right hand side operand.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Quantities.Length.op_Modulus(Tekla.BIM.Quantities.Length,Tekla.BIM.Quantities.Length)">
            <summary>
            Implements the operator %.
            </summary>
            <param name="a">The left hand side operand.</param>
            <param name="b">The right hand side operand.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Quantities.Length.From(System.Double,Tekla.BIM.Quantities.LengthUnit)">
            <summary>
            Creates an instance of the <see cref="T:Tekla.BIM.Quantities.Length"/> struct from the specified length and unit.
            </summary>
            <param name="length">The length in the specified units.</param>
            <param name="lengthUnit">The length unit.</param>
            <returns>Created <see cref="T:Tekla.BIM.Quantities.Length"/> struct with the specified length.</returns>
        </member>
        <member name="M:Tekla.BIM.Quantities.Length.Parse(System.String,Tekla.BIM.Quantities.LengthUnit,System.IFormatProvider,Tekla.BIM.Quantities.QuantityUnitSymbols)">
            <summary>
            Parses the specified text.
            </summary>
            <param name="text">The text to parse.</param>
            <param name="lengthUnit">The default length unit.</param>
            <param name="formatProvider">The format provider.</param>
            <param name="symbols">The unit symbols.</param>
            <returns>
            The parsed <see cref="T:Tekla.BIM.Quantities.Length"/> struct.
            </returns>
            <exception cref="T:System.FormatException">Thrown if the specified text could not be parsed.</exception>
        </member>
        <member name="M:Tekla.BIM.Quantities.Length.TryParse(System.String,Tekla.BIM.Quantities.Length@,Tekla.BIM.Quantities.LengthUnit,System.IFormatProvider,Tekla.BIM.Quantities.QuantityUnitSymbols)">
            <summary>
            Attempts to parse the specified text.
            </summary>
            <param name="text">The text to parse.</param>
            <param name="result">Output variable for the result.</param>
            <param name="lengthUnit">The default length unit.</param>
            <param name="formatProvider">The format provider.</param>
            <param name="symbols">The unit symbols.</param>
            <returns>
            True if the specified text was parsed, otherwise false.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Quantities.Length.CompareTo(System.Object)">
            <summary>
            Compares the length to the specified object.
            </summary>
            <param name="other">The other object.</param>
            <returns>Integer value that indicates the relative order of the objects.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the other object is not of type <see cref="T:Tekla.BIM.Quantities.Length"/>.</exception>
        </member>
        <member name="M:Tekla.BIM.Quantities.Length.CompareTo(Tekla.BIM.Quantities.Length)">
            <summary>
            Compares the two lengths.
            </summary>
            <param name="other">The other length.</param>
            <returns>Integer value that indicates the relative order of the two lengths.</returns>
        </member>
        <member name="M:Tekla.BIM.Quantities.Length.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to this length.
            </summary>
            <param name="other">The other object.</param>
            <returns>True if the specified object is equal to the length, otherwise false.</returns>
        </member>
        <member name="M:Tekla.BIM.Quantities.Length.Equals(Tekla.BIM.Quantities.Length)">
            <summary>
            Determines whether the two lengths are equal.
            </summary>
            <param name="other">The other length.</param>
            <returns>True if the two lengths are equal, otherwise false.</returns>
        </member>
        <member name="M:Tekla.BIM.Quantities.Length.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>A hash code for the object.</returns>
        </member>
        <member name="M:Tekla.BIM.Quantities.Length.IsNaN">
            <summary>
            Determines whether the length represents a value that is not a number.
            </summary>
            <returns>True if the length represents a value that is not a number, otherwise false.</returns>
        </member>
        <member name="M:Tekla.BIM.Quantities.Length.IsInfinity">
            <summary>
            Determines whether the length represents a value that is an infinity.
            </summary>
            <returns>True if the length represents a value that is an infinity, otherwise false.</returns>
        </member>
        <member name="M:Tekla.BIM.Quantities.Length.IsPositiveInfinity">
            <summary>
            Determines whether the length represents a value that is a positive infinity.
            </summary>
            <returns>True if the length represents a value that is a positive infinity, otherwise false.</returns>
        </member>
        <member name="M:Tekla.BIM.Quantities.Length.IsNegativeInfinity">
            <summary>
            Determines whether the length represents a value that is a negative infinity.
            </summary>
            <returns>True if the length represents a value that is a negative infinity, otherwise false.</returns>
        </member>
        <member name="M:Tekla.BIM.Quantities.Length.Round(Tekla.BIM.Quantities.Length,Tekla.BIM.Quantities.RoundingMode)">
            <summary>
            Rounds to the specified precision unit.
            </summary>
            <param name="precision">The precision unit.</param>
            <param name="roundingMode">The rounding mode.</param>
            <returns>
            The rounded value.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Quantities.Length.To(Tekla.BIM.Quantities.LengthUnit)">
            <summary>
            Converts the <see cref="T:Tekla.BIM.Quantities.Length"/> struct to the specified length units.
            </summary>
            <param name="lengthUnit">The length unit.</param>
            <returns>
            The length in the specified units.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Quantities.Length.ToString">
            <summary>
            Returns a string that represents the length.
            </summary>
            <returns>
            A string that represents the length.
            </returns>
            <example>
            The following example shows how to convert a value expressed in millimeter into a string.
            <code>
                var length = Length.From(12, LengthUnit.Millimeter);
                string mm = length.ToString(); // "12 mm"
            </code>
            </example>
        </member>
        <member name="M:Tekla.BIM.Quantities.Length.ToString(Tekla.BIM.Quantities.LengthUnit,System.String,System.IFormatProvider,Tekla.BIM.Quantities.QuantityUnitSymbols)">
            <summary>
            Returns a string that represents the length.
            </summary>
            <param name="lengthUnit">The length unit.</param>
            <param name="format">
            The format string. For fractional feet and inches format, use one of the following formats: "1/1", "1/2", "1/4", "1/8", "1/16", "1/32", "1/64", "1/128".
            For decimal feet and inches format, use "0'0.00\"" where the "0'" is the format string for the feet and the "0.00\"" is the format string for the inches.
            Either of the format strings may also be used without the other: "0.00'" (decimal feet only), "0.00\"" (decimal inches only).
            </param>
            <param name="formatProvider">The format provider.</param>
            <param name="symbols">The unit symbols.</param>
            <returns>
            A string that represents the length.
            </returns>
            <example>
            The following example shows how to convert a value expressed in meter into a string without the unit symbol.
            <code>
                var length = Length.From(123, LengthUnit.Meter);
                var m = length.ToString(LengthUnit.Meter, symbols: QuantityUnitSymbols.NoSymbols); // "123"
            </code>
            </example>
            <example>
            The following example shows how to convert a value expressed in millimeter into a string representing a centimeter value.
            <code>
                var length = Length.From(10, LengthUnit.Millimeter);
                var cm = length.ToString(LengthUnit.Centimeter); // "1 cm"
            </code>
            </example>
            <example>
            The following example shows some of the possible string conversions.
            <code>
                Console.WriteLine("{0} cm --&gt; {1}", 1,      Length.From(1,      LengthUnit.Centimeter).ToString(LengthUnit.Millimeter));
                Console.WriteLine("{0} mm --&gt; {1}", 10,     Length.From(10,     LengthUnit.Millimeter).ToString(LengthUnit.Centimeter));
                Console.WriteLine("{0} cm --&gt; {1}", 100,    Length.From(100,    LengthUnit.Centimeter).ToString(LengthUnit.Meter));
                Console.WriteLine("{0} ft --&gt; {1}", 1,      Length.From(1,      LengthUnit.Foot).ToString(LengthUnit.Inch));
                Console.WriteLine("{0} in --&gt; {1}", 12,     Length.From(12,     LengthUnit.Inch).ToString(LengthUnit.Foot));
                Console.WriteLine("{0} ft --&gt; {1}", 3,      Length.From(3,      LengthUnit.Foot).ToString(LengthUnit.Yard));
                Console.WriteLine("{0} in --&gt; {1}", 123.44, Length.From(123.44, LengthUnit.Inch).ToString(LengthUnit.Foot, format: "0.00"));
                Console.WriteLine("{0} in --&gt; {1}", 123.44, Length.From(123.44, LengthUnit.Inch).ToString(LengthUnit.Foot, format: "0.00'"));
                Console.WriteLine("{0} in --&gt; {1}", 123.44, Length.From(123.44, LengthUnit.Inch).ToString(LengthUnit.Foot, format: "0'0.00\""));
                Console.WriteLine("{0} in --&gt; {1}", 123.44, Length.From(123.44, LengthUnit.Inch).ToString(LengthUnit.Foot, format: "1/64"));
                Console.WriteLine("{0} in --&gt; {1}", 123.44, Length.From(123.44, LengthUnit.Inch).ToString(LengthUnit.Inch, format: "0.00"));
                Console.WriteLine("{0} in --&gt; {1}", 123.44, Length.From(123.44, LengthUnit.Inch).ToString(LengthUnit.Inch, format: "0.00\""));
                Console.WriteLine("{0} in --&gt; {1}", 123.44, Length.From(123.44, LengthUnit.Inch).ToString(LengthUnit.Inch, format: "0'0.00\""));
                Console.WriteLine("{0} in --&gt; {1}", 123.44, Length.From(123.44, LengthUnit.Inch).ToString(LengthUnit.Inch, format: "1/64"));
            </code>
            The output will be:
            <code>
                1 cm --&gt; 10 mm
                10 mm --&gt; 1 cm
                100 cm --&gt; 1 m
                1 ft --&gt; 12 in
                12 in --&gt; 1 ft
                3 ft --&gt; 1 yd
                123.44 in --&gt; 10.29 ft
                123.44 in --&gt; 10.29'
                123.44 in --&gt; 10'3.44"
                123.44 in --&gt; 10'3"7/16
                123.44 in --&gt; 123.44 in
                123.44 in --&gt; 123.44"
                123.44 in --&gt; 10'3.44"
                123.44 in --&gt; 123"7/16
            </code>
            </example>
            <example>
            The following example shows how to further customize the output with custom symbols.
            <code>
                var symbols = new QuantityUnitSymbols
                {
                    SeparatorBetweenFeetAndInches = " – ",
                    SeparatorBetweenInchesAndFractions = " ",
                    InchSymbolPlacement = InchSymbolPlacement.AfterFractions,
                };
                
                var length = Length.From(123.44, LengthUnit.Inch);
                Console.WriteLine("{0} in --&gt; {1}", 123.44, Length.From(123.44, LengthUnit.Inch).ToString(LengthUnit.Foot, format: "1/32", symbols: symbols));
            </code>
            The output will be:
            <code>
                123.44 in --&gt; 10' – 3 7/16"
            </code>
            </example>
            <remarks>
            The result will be the following in these conditions:
            - Empty string if the length is not a number.
            </remarks>
        </member>
        <member name="M:Tekla.BIM.Quantities.Length.System#Xml#Serialization#IXmlSerializable#GetSchema">
            <summary>
            This method is reserved and should not be used.
            </summary>
            <returns>
            Always null.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Quantities.Length.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized.</param>
        </member>
        <member name="M:Tekla.BIM.Quantities.Length.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized.</param>
        </member>
        <member name="M:Tekla.BIM.Quantities.Length.ToFractionalString(Tekla.BIM.Quantities.LengthUnit,System.IFormatProvider,Tekla.BIM.Quantities.QuantityUnitSymbols,System.Int32)">
            <summary>
            Returns a string that represents the length.
            </summary>
            <param name="lengthUnit">The length unit.</param>
            <param name="formatProvider">The format provider.</param>
            <param name="symbols">The unit symbols.</param>
            <param name="maximumFractionalDenominator">The maximum fractional denominator.</param>
            <returns>
            A string that represents the length.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Quantities.Length.ToMixedString(Tekla.BIM.Quantities.LengthUnit,System.IFormatProvider,Tekla.BIM.Quantities.QuantityUnitSymbols,System.String,System.String)">
            <summary>
            Returns a string that represents the length.
            </summary>
            <param name="lengthUnit">The length unit.</param>
            <param name="formatProvider">The format provider.</param>
            <param name="symbols">The unit symbols.</param>
            <param name="feetFormatString">The feet format string.</param>
            <param name="inchesFormatString">The inches format string.</param>
            <returns>
            A string that represents the length.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Quantities.Length.ToDecimalString(Tekla.BIM.Quantities.LengthUnit,System.String,System.IFormatProvider,Tekla.BIM.Quantities.QuantityUnitSymbols)">
            <summary>
            Returns a string that represents the length.
            </summary>
            <param name="lengthUnit">The length unit.</param>
            <param name="format">The format string.</param>
            <param name="formatProvider">The format provider.</param>
            <param name="symbols">The unit symbols.</param>
            <returns>
            A string that represents the length.
            </returns>
        </member>
        <member name="P:Tekla.BIM.Quantities.Length.Millimeters">
            <summary>
            Gets the length in millimeters.
            </summary>
            <value>
            The length in millimeters.
            </value>
        </member>
        <member name="T:Tekla.BIM.Quantities.LengthUnit">
            <summary>
            Length units.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Quantities.LengthUnit.Millimeter">
            <summary>
            Millimeter length unit.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Quantities.LengthUnit.Centimeter">
            <summary>
            Centimeter length unit.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Quantities.LengthUnit.Meter">
            <summary>
            Meter length unit.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Quantities.LengthUnit.Inch">
            <summary>
            Inch length unit.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Quantities.LengthUnit.Foot">
            <summary>
            Foot length unit.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Quantities.LengthUnit.Yard">
            <summary>
            Yard length unit.
            </summary>
        </member>
        <member name="T:Tekla.BIM.Quantities.Mass">
            <summary>
            Mass quantity.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Quantities.Mass.KilogramsInTonne">
            <summary>
            The kilograms in one tonne.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Quantities.Mass.KilogramsInPound">
            <summary>
            The kilograms in one pound.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Quantities.Mass.KilogramsInShortTon">
            <summary>
            The kilograms in one short ton.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Quantities.Mass.Zero">
            <summary>
            The zero mass.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Quantities.Mass.Kilogram">
            <summary>
            One kilogram mass.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Quantities.Mass.Tonne">
            <summary>
            One tonne mass.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Quantities.Mass.Pound">
            <summary>
            One pound mass.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Quantities.Mass.ShortTon">
            <summary>
            One short ton mass.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Quantities.Mass.DefaultSymbols">
            <summary>
            The default unit symbols.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Quantities.Mass.DecimalFormat">
            <summary>
            The accepted decimal format.
            </summary>
        </member>
        <member name="M:Tekla.BIM.Quantities.Mass.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.BIM.Quantities.Mass"/> struct.
            </summary>
            <param name="kilograms">The mass in kilograms.</param>
        </member>
        <member name="M:Tekla.BIM.Quantities.Mass.op_Equality(Tekla.BIM.Quantities.Mass,Tekla.BIM.Quantities.Mass)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="a">The left hand side operand.</param>
            <param name="b">The right hand side operand.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Quantities.Mass.op_Inequality(Tekla.BIM.Quantities.Mass,Tekla.BIM.Quantities.Mass)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="a">The left hand side operand.</param>
            <param name="b">The right hand side operand.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Quantities.Mass.op_LessThan(Tekla.BIM.Quantities.Mass,Tekla.BIM.Quantities.Mass)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="a">The left hand side operand.</param>
            <param name="b">The right hand side operand.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Quantities.Mass.op_LessThanOrEqual(Tekla.BIM.Quantities.Mass,Tekla.BIM.Quantities.Mass)">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="a">The left hand side operand.</param>
            <param name="b">The right hand side operand.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Quantities.Mass.op_GreaterThan(Tekla.BIM.Quantities.Mass,Tekla.BIM.Quantities.Mass)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="a">The left hand side operand.</param>
            <param name="b">The right hand side operand.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Quantities.Mass.op_GreaterThanOrEqual(Tekla.BIM.Quantities.Mass,Tekla.BIM.Quantities.Mass)">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="a">The left hand side operand.</param>
            <param name="b">The right hand side operand.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Quantities.Mass.op_Addition(Tekla.BIM.Quantities.Mass,Tekla.BIM.Quantities.Mass)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="a">The left hand side operand.</param>
            <param name="b">The right hand side operand.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Quantities.Mass.op_UnaryNegation(Tekla.BIM.Quantities.Mass)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="a">The operand.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Quantities.Mass.op_Subtraction(Tekla.BIM.Quantities.Mass,Tekla.BIM.Quantities.Mass)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="a">The left hand side operand.</param>
            <param name="b">The right hand side operand.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Quantities.Mass.op_Multiply(Tekla.BIM.Quantities.Mass,System.Double)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="a">The left hand side operand.</param>
            <param name="b">The right hand side operand.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Quantities.Mass.op_Multiply(System.Double,Tekla.BIM.Quantities.Mass)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="a">The left hand side operand.</param>
            <param name="b">The right hand side operand.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Quantities.Mass.op_Division(Tekla.BIM.Quantities.Mass,System.Double)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="a">The left hand side operand.</param>
            <param name="b">The right hand side operand.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Quantities.Mass.op_Division(Tekla.BIM.Quantities.Mass,Tekla.BIM.Quantities.Mass)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="a">The left hand side operand.</param>
            <param name="b">The right hand side operand.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Quantities.Mass.op_Modulus(Tekla.BIM.Quantities.Mass,Tekla.BIM.Quantities.Mass)">
            <summary>
            Implements the operator %.
            </summary>
            <param name="a">The left hand side operand.</param>
            <param name="b">The right hand side operand.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Quantities.Mass.From(System.Double,Tekla.BIM.Quantities.MassUnit)">
            <summary>
            Creates an instance of the <see cref="T:Tekla.BIM.Quantities.Mass"/> struct from the specified mass and unit.
            </summary>
            <param name="mass">The mass in the specified units.</param>
            <param name="massUnit">The mass unit.</param>
            <returns>
            Created <see cref="T:Tekla.BIM.Quantities.Mass"/> struct with the specified mass.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Quantities.Mass.Parse(System.String,Tekla.BIM.Quantities.MassUnit,System.IFormatProvider,Tekla.BIM.Quantities.QuantityUnitSymbols)">
            <summary>
            Parses the specified text.
            </summary>
            <param name="text">The text to parse.</param>
            <param name="massUnit">The default mass unit.</param>
            <param name="formatProvider">The format provider.</param>
            <param name="symbols">The unit symbols.</param>
            <returns>
            The parsed <see cref="T:Tekla.BIM.Quantities.Mass"/> struct.
            </returns>
            <exception cref="T:System.FormatException">Thrown if the specified text could not be parsed.</exception>
        </member>
        <member name="M:Tekla.BIM.Quantities.Mass.TryParse(System.String,Tekla.BIM.Quantities.Mass@,Tekla.BIM.Quantities.MassUnit,System.IFormatProvider,Tekla.BIM.Quantities.QuantityUnitSymbols)">
            <summary>
            Attempts to parse the specified text.
            </summary>
            <param name="text">The text to parse.</param>
            <param name="result">Output variable for the result.</param>
            <param name="massUnit">The default mass unit.</param>
            <param name="formatProvider">The format provider.</param>
            <param name="symbols">The unit symbols.</param>
            <returns>
            True if the specified text was parsed, otherwise false.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Quantities.Mass.CompareTo(System.Object)">
            <summary>
            Compares the mass to the specified object.
            </summary>
            <param name="other">The other object.</param>
            <returns>
            Integer value that indicates the relative order of the objects.
            </returns>
            <exception cref="T:System.ArgumentException">Thrown if the other object is not of type <see cref="T:Tekla.BIM.Quantities.Mass"/>.</exception>
        </member>
        <member name="M:Tekla.BIM.Quantities.Mass.CompareTo(Tekla.BIM.Quantities.Mass)">
            <summary>
            Compares the two masses.
            </summary>
            <param name="other">The other mass.</param>
            <returns>
            Integer value that indicates the relative order of the two masses.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Quantities.Mass.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to this mass.
            </summary>
            <param name="other">The other object.</param>
            <returns>
            True if the specified object is equal to the mass, otherwise false.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Quantities.Mass.Equals(Tekla.BIM.Quantities.Mass)">
            <summary>
            Determines whether the two masses are equal.
            </summary>
            <param name="other">The other mass.</param>
            <returns>
            True if the two lengths are equal, otherwise false.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Quantities.Mass.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A hash code for the object.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Quantities.Mass.IsNaN">
            <summary>
            Determines whether the mass represents a value that is not a number.
            </summary>
            <returns>
            True if the mass represents a value that is not a number, otherwise false.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Quantities.Mass.IsInfinity">
            <summary>
            Determines whether the mass represents a value that is an infinity.
            </summary>
            <returns>
            True if the mass represents a value that is an infinity, otherwise false.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Quantities.Mass.IsPositiveInfinity">
            <summary>
            Determines whether the mass represents a value that is a positive infinity.
            </summary>
            <returns>
            True if the mass represents a value that is a positive infinity, otherwise false.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Quantities.Mass.IsNegativeInfinity">
            <summary>
            Determines whether the mass represents a value that is a negative infinity.
            </summary>
            <returns>
            True if the mass represents a value that is a negative infinity, otherwise false.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Quantities.Mass.Round(Tekla.BIM.Quantities.Mass,Tekla.BIM.Quantities.RoundingMode)">
            <summary>
            Rounds to the specified precision unit.
            </summary>
            <param name="precision">The precision unit.</param>
            <param name="roundingMode">The rounding mode.</param>
            <returns>
            The rounded value.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Quantities.Mass.To(Tekla.BIM.Quantities.MassUnit)">
            <summary>
            Converts the <see cref="T:Tekla.BIM.Quantities.Mass"/> struct to the specified mass units.
            </summary>
            <param name="massUnit">The mass unit.</param>
            <returns>
            The mass in the specified units.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Quantities.Mass.ToString">
            <summary>
            Returns a string that represents the mass.
            </summary>
            <returns>
            A string that represents the mass.
            </returns>
            <example>
            The following example shows how to convert a value expressed in kilogram into a string.
            <code>
                var mass = Mass.From(12, MassUnit.Kilogram);
                string kg = mass.ToString(); // "12 kg"
            </code>
            </example>
        </member>
        <member name="M:Tekla.BIM.Quantities.Mass.ToString(Tekla.BIM.Quantities.MassUnit,System.String,System.IFormatProvider,Tekla.BIM.Quantities.QuantityUnitSymbols)">
            <summary>
            Returns a string that represents the mass.
            </summary>
            <param name="massUnit">The mass unit.</param>
            <param name="format">The format string.</param>
            <param name="formatProvider">The format provider.</param>
            <param name="symbols">The unit symbols.</param>
            <returns>
            A string that represents the mass.
            </returns>
            <example>
            The following example shows how to convert a value expressed in kilogram into a string without the unit symbol.
            <code>
                var mass = Mass.From(123, MassUnit.Kilogram);
                var kg = mass.ToString(MassUnit.Kilogram, symbols: QuantityUnitSymbols.NoSymbols); // "123"
            </code>
            </example>
            <example>
            The following example shows how to convert a value expressed in kilogram into a string representing a tonne value.
            <code>
                var mass = Mass.From(1000, MassUnit.Kilogram);
                var t = mass.ToString(MassUnit.Tonne); // "1 t"
            </code>
            </example>
            <example>
            The following example shows all the possible string conversion units.
            <code>
                Console.WriteLine("{0} kg --&gt; {1}",    1000, Mass.From(1000, MassUnit.Kilogram).ToString(MassUnit.Tonne));
                Console.WriteLine("{0} t --&gt; {1}",     1,    Mass.From(1,    MassUnit.Tonne).ToString(MassUnit.Kilogram));
                Console.WriteLine("{0} lb --&gt; {1}",    2000, Mass.From(2000, MassUnit.Pound).ToString(MassUnit.ShortTon));
                Console.WriteLine("{0} sh tn --&gt; {1}", 1,    Mass.From(1,    MassUnit.ShortTon).ToString(MassUnit.Pound));
            </code>
            The output will be:
            <code>
                1000 kg --&gt; 1 t
                1 t --&gt; 1000 kg
                2000 lb --&gt; 1 sh tn
                1 sh tn --&gt; 2000 lb
            </code>
            </example>
            <remarks>
            The result will be the following in these conditions:
            - Empty string if the mass is not a number.
            - "INF" if the mass is positive infinity.
            - "-INF" if the mass is negative infinity.
            </remarks>
        </member>
        <member name="M:Tekla.BIM.Quantities.Mass.System#Xml#Serialization#IXmlSerializable#GetSchema">
            <summary>
            This method is reserved and should not be used.
            </summary>
            <returns>
            Always null.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Quantities.Mass.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized.</param>
        </member>
        <member name="M:Tekla.BIM.Quantities.Mass.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized.</param>
        </member>
        <member name="P:Tekla.BIM.Quantities.Mass.Kilograms">
            <summary>
            Gets the mass in kilograms.
            </summary>
            <value>
            The mass in kilograms.
            </value>
        </member>
        <member name="T:Tekla.BIM.Quantities.MassUnit">
            <summary>
            Mass units.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Quantities.MassUnit.Kilogram">
            <summary>
            Kilogram mass unit.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Quantities.MassUnit.Tonne">
            <summary>
            Tonne mass unit.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Quantities.MassUnit.Pound">
            <summary>
            Pound mass unit.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Quantities.MassUnit.ShortTon">
            <summary>
            Short ton mass unit.
            </summary>
        </member>
        <member name="T:Tekla.BIM.Quantities.QuantityUnitSymbols">
            <summary>
            Quantity unit symbols.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Quantities.QuantityUnitSymbols.NoSymbols">
            <summary>
            The object to use when no symbols are wanted. Modifying the property values has no effect.
            </summary>
        </member>
        <member name="M:Tekla.BIM.Quantities.QuantityUnitSymbols.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.BIM.Quantities.QuantityUnitSymbols"/> class.
            </summary>
        </member>
        <member name="P:Tekla.BIM.Quantities.QuantityUnitSymbols.SeparatorBetweenNumberAndUnitSymbol">
            <summary>
            Gets or sets the separator between the number and the unit symbol in the decimal format.
            </summary>
            <value>
            The separator between the number and the unit symbol. The default value is single space character.
            </value>
        </member>
        <member name="P:Tekla.BIM.Quantities.QuantityUnitSymbols.SeparatorBetweenFeetAndInches">
            <summary>
            Gets or sets the separator between feet and inches in the fractional format.
            </summary>
            <value>
            The separator between feet and inches. The default value is an empty string.
            </value>
        </member>
        <member name="P:Tekla.BIM.Quantities.QuantityUnitSymbols.SeparatorBetweenInchesAndFractions">
            <summary>
            Gets or sets the separator between whole inches and fractional inches in the fractional format.
            </summary>
            <value>
            The separator between whole inches and fractional inches. The default value is an empty string.
            </value>
        </member>
        <member name="P:Tekla.BIM.Quantities.QuantityUnitSymbols.InchSymbolPlacement">
            <summary>
            Gets or sets the inch symbol placement in the fractional format.
            </summary>
            <value>
            The inch symbol placement. The default placement is after whole inches.
            </value>
        </member>
        <member name="P:Tekla.BIM.Quantities.QuantityUnitSymbols.Infinity">
            <summary>
            Gets or sets the infinity symbol.
            </summary>
            <value>
            The infinity symbol. The default value is "INF".
            </value>
        </member>
        <member name="P:Tekla.BIM.Quantities.QuantityUnitSymbols.PositiveInfinity">
            <summary>
            Gets or sets the positive infinity symbol.
            </summary>
            <value>
            The positive infinity symbol. The default value is "+INF".
            </value>
        </member>
        <member name="P:Tekla.BIM.Quantities.QuantityUnitSymbols.NegativeInfinity">
            <summary>
            Gets or sets the negative infinity symbol.
            </summary>
            <value>
            The negative infinity symbol. The default value is "-INF".
            </value>
        </member>
        <member name="P:Tekla.BIM.Quantities.QuantityUnitSymbols.Millimeter">
            <summary>
            Gets or sets the millimeter symbol.
            </summary>
            <value>
            The millimeter symbol. The default value is "mm".
            </value>
        </member>
        <member name="P:Tekla.BIM.Quantities.QuantityUnitSymbols.Centimeter">
            <summary>
            Gets or sets the centimeter symbol.
            </summary>
            <value>
            The centimeter symbol. The default value is "cm".
            </value>
        </member>
        <member name="P:Tekla.BIM.Quantities.QuantityUnitSymbols.Meter">
            <summary>
            Gets or sets the meter symbol.
            </summary>
            <value>
            The meter symbol. The default value is "m".
            </value>
        </member>
        <member name="P:Tekla.BIM.Quantities.QuantityUnitSymbols.Inch">
            <summary>
            Gets or sets the inch symbol.
            </summary>
            <value>
            The inch symbol. The default value is "in".
            </value>
        </member>
        <member name="P:Tekla.BIM.Quantities.QuantityUnitSymbols.Foot">
            <summary>
            Gets or sets the foot symbol.
            </summary>
            <value>
            The foot symbol. The default value is "ft".
            </value>
        </member>
        <member name="P:Tekla.BIM.Quantities.QuantityUnitSymbols.Yard">
            <summary>
            Gets or sets the yard symbol.
            </summary>
            <value>
            The yard symbol. The default value is "yd".
            </value>
        </member>
        <member name="P:Tekla.BIM.Quantities.QuantityUnitSymbols.SquareMillimeter">
            <summary>
            Gets or sets the square millimeter symbol.
            </summary>
            <value>
            The square millimeter symbol. The default value is "mm2".
            </value>
        </member>
        <member name="P:Tekla.BIM.Quantities.QuantityUnitSymbols.SquareCentimeter">
            <summary>
            Gets or sets the square centimeter symbol.
            </summary>
            <value>
            The square centimeter symbol. The default value is "cm2".
            </value>
        </member>
        <member name="P:Tekla.BIM.Quantities.QuantityUnitSymbols.SquareMeter">
            <summary>
            Gets or sets the square meter symbol.
            </summary>
            <value>
            The square meter symbol. The default value is "m2".
            </value>
        </member>
        <member name="P:Tekla.BIM.Quantities.QuantityUnitSymbols.SquareInch">
            <summary>
            Gets or sets the square inch symbol.
            </summary>
            <value>
            The square inch symbol. The default value is "in2".
            </value>
        </member>
        <member name="P:Tekla.BIM.Quantities.QuantityUnitSymbols.SquareFoot">
            <summary>
            Gets or sets the square foot symbol.
            </summary>
            <value>
            The square foot symbol. The default value is "ft2".
            </value>
        </member>
        <member name="P:Tekla.BIM.Quantities.QuantityUnitSymbols.SquareYard">
            <summary>
            Gets or sets the square yard symbol.
            </summary>
            <value>
            The square yard symbol. The default value is "yd2".
            </value>
        </member>
        <member name="P:Tekla.BIM.Quantities.QuantityUnitSymbols.CubicMillimeter">
            <summary>
            Gets or sets the cubic millimeter symbol.
            </summary>
            <value>
            The cubic millimeter symbol. The default value is "mm3".
            </value>
        </member>
        <member name="P:Tekla.BIM.Quantities.QuantityUnitSymbols.CubicCentimeter">
            <summary>
            Gets or sets the cubic centimeter symbol.
            </summary>
            <value>
            The cubic centimeter symbol. The default value is "cm3".
            </value>
        </member>
        <member name="P:Tekla.BIM.Quantities.QuantityUnitSymbols.CubicMeter">
            <summary>
            Gets or sets the cubic meter symbol.
            </summary>
            <value>
            The cubic meter symbol. The default value is "m3".
            </value>
        </member>
        <member name="P:Tekla.BIM.Quantities.QuantityUnitSymbols.CubicInch">
            <summary>
            Gets or sets the cubic inch symbol.
            </summary>
            <value>
            The cubic inch symbol. The default value is "in3".
            </value>
        </member>
        <member name="P:Tekla.BIM.Quantities.QuantityUnitSymbols.CubicFoot">
            <summary>
            Gets or sets the cubic foot symbol.
            </summary>
            <value>
            The cubic foot symbol. The default value is "ft3".
            </value>
        </member>
        <member name="P:Tekla.BIM.Quantities.QuantityUnitSymbols.CubicYard">
            <summary>
            Gets or sets the cubic yard symbol.
            </summary>
            <value>
            The cubic yard symbol. The default value is "yd3".
            </value>
        </member>
        <member name="P:Tekla.BIM.Quantities.QuantityUnitSymbols.Liter">
            <summary>
            Gets or sets the liter symbol.
            </summary>
            <value>
            The liter symbol. The default value is "l".
            </value>
        </member>
        <member name="P:Tekla.BIM.Quantities.QuantityUnitSymbols.Gallon">
            <summary>
            Gets or sets the US gallon symbol.
            </summary>
            <value>
            The US gallon symbol. The default value is "gal".
            </value>
        </member>
        <member name="P:Tekla.BIM.Quantities.QuantityUnitSymbols.Kilogram">
            <summary>
            Gets or sets the kilogram symbol.
            </summary>
            <value>
            The kilogram symbol. The default value is "kg".
            </value>
        </member>
        <member name="P:Tekla.BIM.Quantities.QuantityUnitSymbols.Tonne">
            <summary>
            Gets or sets the metric tonne symbol.
            </summary>
            <value>
            The metric tonne symbol. The default value is "t".
            </value>
        </member>
        <member name="P:Tekla.BIM.Quantities.QuantityUnitSymbols.Pound">
            <summary>
            Gets or sets the US pound symbol.
            </summary>
            <value>
            The US pound symbol. The default value is "lb".
            </value>
        </member>
        <member name="P:Tekla.BIM.Quantities.QuantityUnitSymbols.ShortTon">
            <summary>
            Gets or sets the US short ton symbol.
            </summary>
            <value>
            The US short ton symbol. The default value is "sh tn".
            </value>
        </member>
        <member name="T:Tekla.BIM.Quantities.Volume">
            <summary>
            Volume quantity.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Quantities.Volume.CubicMillimetersInCubicCentimeter">
            <summary>
            The cubic millimeters in one cubic centimeter.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Quantities.Volume.CubicMillimetersInCubicMeter">
            <summary>
            The cubic millimeters in one cubic meter.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Quantities.Volume.CubicMillimetersInCubicInch">
            <summary>
            The cubic millimeters in one cubic inch.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Quantities.Volume.CubicMillimetersInCubicFoot">
            <summary>
            The cubic millimeters in one cubic foot.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Quantities.Volume.CubicMillimetersInCubicYard">
            <summary>
            The cubic millimeters in one cubic yard.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Quantities.Volume.CubicMillimetersInLiter">
            <summary>
            The cubic millimeters in one liter.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Quantities.Volume.CubicMillimetersInGallon">
            <summary>
            The cubic millimeters in one US gallon.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Quantities.Volume.Zero">
            <summary>
            The zero volume.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Quantities.Volume.CubicMillimeter">
            <summary>
            One cubic millimeter volume.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Quantities.Volume.CubicCentimeter">
            <summary>
            One cubic centimeter volume.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Quantities.Volume.CubicMeter">
            <summary>
            One cubic meter volume.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Quantities.Volume.CubicInch">
            <summary>
            One cubic inch volume.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Quantities.Volume.CubicFoot">
            <summary>
            One cubic foot volume.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Quantities.Volume.CubicYard">
            <summary>
            One cubic yard volume.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Quantities.Volume.Liter">
            <summary>
            One liter volume.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Quantities.Volume.Gallon">
            <summary>
            One gallon volume.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Quantities.Volume.DefaultSymbols">
            <summary>
            The default unit symbols.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Quantities.Volume.DecimalFormat">
            <summary>
            The accepted decimal format.
            </summary>
        </member>
        <member name="M:Tekla.BIM.Quantities.Volume.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.BIM.Quantities.Volume"/> struct.
            </summary>
            <param name="cubicMillimeters">The volume in cubic millimeters.</param>
        </member>
        <member name="M:Tekla.BIM.Quantities.Volume.op_Equality(Tekla.BIM.Quantities.Volume,Tekla.BIM.Quantities.Volume)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="a">The left hand side operand.</param>
            <param name="b">The right hand side operand.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Quantities.Volume.op_Inequality(Tekla.BIM.Quantities.Volume,Tekla.BIM.Quantities.Volume)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="a">The left hand side operand.</param>
            <param name="b">The right hand side operand.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Quantities.Volume.op_LessThan(Tekla.BIM.Quantities.Volume,Tekla.BIM.Quantities.Volume)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="a">The left hand side operand.</param>
            <param name="b">The right hand side operand.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Quantities.Volume.op_LessThanOrEqual(Tekla.BIM.Quantities.Volume,Tekla.BIM.Quantities.Volume)">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="a">The left hand side operand.</param>
            <param name="b">The right hand side operand.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Quantities.Volume.op_GreaterThan(Tekla.BIM.Quantities.Volume,Tekla.BIM.Quantities.Volume)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="a">The left hand side operand.</param>
            <param name="b">The right hand side operand.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Quantities.Volume.op_GreaterThanOrEqual(Tekla.BIM.Quantities.Volume,Tekla.BIM.Quantities.Volume)">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="a">The left hand side operand.</param>
            <param name="b">The right hand side operand.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Quantities.Volume.op_Addition(Tekla.BIM.Quantities.Volume,Tekla.BIM.Quantities.Volume)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="a">The left hand side operand.</param>
            <param name="b">The right hand side operand.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Quantities.Volume.op_UnaryNegation(Tekla.BIM.Quantities.Volume)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="a">The operand.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Quantities.Volume.op_Subtraction(Tekla.BIM.Quantities.Volume,Tekla.BIM.Quantities.Volume)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="a">The left hand side operand.</param>
            <param name="b">The right hand side operand.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Quantities.Volume.op_Multiply(Tekla.BIM.Quantities.Volume,System.Double)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="a">The left hand side operand.</param>
            <param name="b">The right hand side operand.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Quantities.Volume.op_Multiply(System.Double,Tekla.BIM.Quantities.Volume)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="a">The left hand side operand.</param>
            <param name="b">The right hand side operand.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Quantities.Volume.op_Division(Tekla.BIM.Quantities.Volume,System.Double)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="a">The left hand side operand.</param>
            <param name="b">The right hand side operand.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Quantities.Volume.op_Division(Tekla.BIM.Quantities.Volume,Tekla.BIM.Quantities.Volume)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="a">The left hand side operand.</param>
            <param name="b">The right hand side operand.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Quantities.Volume.op_Modulus(Tekla.BIM.Quantities.Volume,Tekla.BIM.Quantities.Volume)">
            <summary>
            Implements the operator %.
            </summary>
            <param name="a">The left hand side operand.</param>
            <param name="b">The right hand side operand.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Quantities.Volume.From(System.Double,Tekla.BIM.Quantities.VolumeUnit)">
            <summary>
            Creates an instance of the <see cref="T:Tekla.BIM.Quantities.Volume"/> struct from the specified volume and unit.
            </summary>
            <param name="volume">The volume in the specified units.</param>
            <param name="volumeUnit">The volume unit.</param>
            <returns>
            Created <see cref="T:Tekla.BIM.Quantities.Volume"/> struct with the specified volume.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Quantities.Volume.Parse(System.String,Tekla.BIM.Quantities.VolumeUnit,System.IFormatProvider,Tekla.BIM.Quantities.QuantityUnitSymbols)">
            <summary>
            Parses the specified text.
            </summary>
            <param name="text">The text to parse.</param>
            <param name="volumeUnit">The volume unit.</param>
            <param name="formatProvider">The format provider.</param>
            <param name="symbols">The unit symbols.</param>
            <returns>
            The parsed <see cref="T:Tekla.BIM.Quantities.Volume"/> struct.
            </returns>
            <exception cref="T:System.FormatException">Thrown if the specified text could not be parsed.</exception>
        </member>
        <member name="M:Tekla.BIM.Quantities.Volume.TryParse(System.String,Tekla.BIM.Quantities.Volume@,Tekla.BIM.Quantities.VolumeUnit,System.IFormatProvider,Tekla.BIM.Quantities.QuantityUnitSymbols)">
            <summary>
            Attempts to parse the specified text.
            </summary>
            <param name="text">The text to parse.</param>
            <param name="result">Output variable for the result.</param>
            <param name="volumeUnit">The default volume unit.</param>
            <param name="formatProvider">The format provider.</param>
            <param name="symbols">The unit symbols.</param>
            <returns>
            True if the specified text was parsed, otherwise false.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Quantities.Volume.CompareTo(System.Object)">
            <summary>
            Compares the volume to the specified object.
            </summary>
            <param name="other">The other object.</param>
            <returns>
            Integer value that indicates the relative order of the objects.
            </returns>
            <exception cref="T:System.ArgumentException">Thrown if the other object is not of type <see cref="T:Tekla.BIM.Quantities.Volume"/>.</exception>
        </member>
        <member name="M:Tekla.BIM.Quantities.Volume.CompareTo(Tekla.BIM.Quantities.Volume)">
            <summary>
            Compares the two volumes.
            </summary>
            <param name="other">The other volume.</param>
            <returns>
            Integer value that indicates the relative order of the two volumes.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Quantities.Volume.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to this volume.
            </summary>
            <param name="other">The other object.</param>
            <returns>
            True if the specified object is equal to the volume, otherwise false.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Quantities.Volume.Equals(Tekla.BIM.Quantities.Volume)">
            <summary>
            Determines whether the two volumes are equal.
            </summary>
            <param name="other">The other volume.</param>
            <returns>
            True if the two lengths are equal, otherwise false.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Quantities.Volume.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A hash code for the object.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Quantities.Volume.IsNaN">
            <summary>
            Determines whether the volume represents a value that is not a number.
            </summary>
            <returns>
            True if the volume represents a value that is not a number, otherwise false.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Quantities.Volume.IsInfinity">
            <summary>
            Determines whether the volume represents a value that is an infinity.
            </summary>
            <returns>
            True if the volume represents a value that is an infinity, otherwise false.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Quantities.Volume.IsPositiveInfinity">
            <summary>
            Determines whether the volume represents a value that is a positive infinity.
            </summary>
            <returns>
            True if the volume represents a value that is a positive infinity, otherwise false.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Quantities.Volume.IsNegativeInfinity">
            <summary>
            Determines whether the volume represents a value that is a negative infinity.
            </summary>
            <returns>
            True if the volume represents a value that is a negative infinity, otherwise false.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Quantities.Volume.Round(Tekla.BIM.Quantities.Volume,Tekla.BIM.Quantities.RoundingMode)">
            <summary>
            Rounds to the specified precision unit.
            </summary>
            <param name="precision">The precision unit.</param>
            <param name="roundingMode">The rounding mode.</param>
            <returns>
            The rounded value.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Quantities.Volume.To(Tekla.BIM.Quantities.VolumeUnit)">
            <summary>
            Converts the <see cref="T:Tekla.BIM.Quantities.Volume"/> struct to the specified volume units.
            </summary>
            <param name="volumeUnit">The volume unit.</param>
            <returns>
            The volume in the specified units.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Quantities.Volume.ToString">
            <summary>
            Returns a string that represents the volume.
            </summary>
            <returns>
            A string that represents the volume.
            </returns>
            <example>
            The following example shows how to convert a value expressed in cubic millimeter into a string.
            <code>
                var volume = Volume.From(12, VolumeUnit.CubicMillimeter);
                string mm3 = volume.ToString(); // "12 mm3"
            </code>
            </example>
        </member>
        <member name="M:Tekla.BIM.Quantities.Volume.ToString(Tekla.BIM.Quantities.VolumeUnit,System.String,System.IFormatProvider,Tekla.BIM.Quantities.QuantityUnitSymbols)">
            <summary>
            Returns a string that represents the volume.
            </summary>
            <param name="volumeUnit">The volume unit.</param>
            <param name="format">The format string.</param>
            <param name="formatProvider">The format provider.</param>
            <param name="symbols">The unit symbols.</param>
            <returns>
            A string that represents the volume.
            </returns>
            <example>
            The following example shows how to convert a value expressed in cubic meter into a string without the unit symbol.
            <code>
                var volume = Volume.From(123, VolumeUnit.CubicMeter);
                var m3 = volume.ToString(VolumeUnit.CubicMeter, symbols: QuantityUnitSymbols.NoSymbols); // "123"
            </code>
            </example>
            <example>
            The following example shows how to convert a value expressed in cubic millimeter into a string representing a cubic centimeter value.
            <code>
                var volume = Volume.From(1000, VolumeUnit.CubicMillimeter);
                var cm3 = volume.ToString(VolumeUnit.CubicCentimeter); // "1 cm3"
            </code>
            </example>
            <example>
            The following example shows all the possible string conversion units.
            <code>
                Console.WriteLine("{0} cm3 --&gt; {1}", 1,    Volume.From(1,    VolumeUnit.CubicCentimeter).ToString(VolumeUnit.CubicMillimeter));
                Console.WriteLine("{0} mm3 --&gt; {1}", 1000, Volume.From(1000, VolumeUnit.CubicMillimeter).ToString(VolumeUnit.CubicCentimeter));
                Console.WriteLine("{0} cm3 --&gt; {1}", 1000, Volume.From(1000, VolumeUnit.CubicCentimeter).ToString(VolumeUnit.Liter));
                Console.WriteLine("{0} l --&gt; {1}",   1000, Volume.From(1000, VolumeUnit.Liter).ToString(VolumeUnit.CubicMeter));
                Console.WriteLine("{0} ft3 --&gt; {1}", 1,    Volume.From(1,    VolumeUnit.CubicFoot).ToString(VolumeUnit.CubicInch, "0"));
                Console.WriteLine("{0} in3 --&gt; {1}", 1728, Volume.From(1728, VolumeUnit.CubicInch).ToString(VolumeUnit.CubicFoot, "0"));
                Console.WriteLine("{0} ft3 --&gt; {1}", 27,   Volume.From(27,   VolumeUnit.CubicFoot).ToString(VolumeUnit.CubicYard, "0"));
                Console.WriteLine("{0} yd3 --&gt; {1}", 1,    Volume.From(1,    VolumeUnit.CubicYard).ToString(VolumeUnit.Gallon, "0"));
            </code>
            The output will be:
            <code>
                1 cm3 --&gt; 1000 mm3
                1000 mm3 --&gt; 1 cm3
                1000 cm3 --&gt; 1 l
                1000 l --&gt; 1 m3
                1 ft3 --&gt; 1728 in3
                1728 in3 --&gt; 1 ft3
                27 ft3 --&gt; 1 yd3
                1 yd3 --&gt; 202 gal
            </code>
            </example>
            <remarks>
            The result will be the following in these conditions:
            - Empty string if the volume is not a number.
            - "INF" if the volume is positive infinity.
            - "-INF" if the volume is negative infinity.
            </remarks>
        </member>
        <member name="M:Tekla.BIM.Quantities.Volume.System#Xml#Serialization#IXmlSerializable#GetSchema">
            <summary>
            This method is reserved and should not be used.
            </summary>
            <returns>
            Always null.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Quantities.Volume.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized.</param>
        </member>
        <member name="M:Tekla.BIM.Quantities.Volume.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized.</param>
        </member>
        <member name="P:Tekla.BIM.Quantities.Volume.CubicMillimeters">
            <summary>
            Gets the volume in cubic millimeters.
            </summary>
            <value>
            The volume in cubic millimeters.
            </value>
        </member>
        <member name="T:Tekla.BIM.Quantities.VolumeUnit">
            <summary>
            Volume units.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Quantities.VolumeUnit.CubicMillimeter">
            <summary>
            Cubic millimeter volume unit.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Quantities.VolumeUnit.CubicCentimeter">
            <summary>
            Cubic centimeter volume unit.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Quantities.VolumeUnit.CubicMeter">
            <summary>
            Cubic meter volume unit.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Quantities.VolumeUnit.CubicInch">
            <summary>
            Cubic inch volume unit.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Quantities.VolumeUnit.CubicFoot">
            <summary>
            Cubic foot volume unit.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Quantities.VolumeUnit.CubicYard">
            <summary>
            Cubic yard volume unit.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Quantities.VolumeUnit.Liter">
            <summary>
            Liter volume unit.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Quantities.VolumeUnit.Gallon">
            <summary>
            US gallon volume unit.
            </summary>
        </member>
        <member name="T:Tekla.BIM.Toolkit.Continuation">
            <summary>
            Delegate type for a method that continues execution after an asynchronous operation has been completed.
            </summary>
            <param name="complete">Delegate to a method that ensures that an asynchronous operation is completed and throws any unhandled exceptions.</param>
        </member>
        <member name="T:Tekla.BIM.Toolkit.Continuation`1">
            <summary>
            Delegate type for a method that continues execution after an asynchronous operation has been completed.
            </summary>
            <typeparam name="TResult">The type of the result from the asynchronous operation.</typeparam>
            <param name="complete">Delegate to a method that ensures that an asynchronous operation is completed and provides the result or throws any unhandled exceptions.</param>
        </member>
        <member name="T:Tekla.BIM.Toolkit.Extensions">
            <summary>
            Provides common extension methods.
            </summary>
            <summary>
            Provides common extension methods.
            </summary>
            <summary>
            Provides common extension methods.
            </summary>
            <summary>
            Provides common extension methods.
            </summary>
            <summary>
            Provides common extension methods.
            </summary>
            <summary>
            Provides common extension methods.
            </summary>
            <summary>
            Provides common extension methods.
            </summary>
            <summary>
            Provides common extension methods.
            </summary>
            <summary>
            Provides common extension methods.
            </summary>
            <summary>
            Provides common extension methods.
            </summary>
            <summary>
            Provides common extension methods.
            </summary>
            <summary>
            Provides common extension methods.
            </summary>
            <summary>
            Provides common extension methods.
            </summary>
            <summary>
            Provides common extension methods.
            </summary>
            <summary>
            Provides common extension methods.
            </summary>
            <summary>
            Provides common extension methods.
            </summary>
            <summary>
            Provides common extension methods.
            </summary>
            <summary>
            Provides common extension methods.
            </summary>
            <summary>
            Provides common extension methods.
            </summary>
            <summary>
            Provides common extension methods.
            </summary>
            <summary>
            Provides common extension methods.
            </summary>
            <summary>
            Provides common extension methods.
            </summary>
            <summary>
            Provides common extension methods.
            </summary>
            <summary>
            Provides common extension methods.
            </summary>
            <summary>
            Provides common extension methods.
            </summary>
            <summary>
            Provides common extension methods.
            </summary>
            <summary>
            Provides common extension methods.
            </summary>
            <summary>
            Provides common extension methods.
            </summary>
            <summary>
            Provides common extension methods.
            </summary>
            <summary>
            Provides common extension methods.
            </summary>
            <summary>
            Provides common extension methods.
            </summary>
            <summary>
            Provides common extension methods.
            </summary>
            <summary>
            Provides common extension methods.
            </summary>
            <summary>
            Provides common extension methods.
            </summary>
            <summary>
            Provides common extension methods.
            </summary>
            <summary>
            Provides common extension methods.
            </summary>
        </member>
        <member name="M:Tekla.BIM.Toolkit.Extensions.SaveXml(System.Collections.Generic.IDictionary{System.String,System.String},System.String,Tekla.BIM.Toolkit.IEventLogWriter)">
            <summary>
            Saves the dictionary to an XML file.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="path">The path to the file.</param>
            <param name="eventLogWriter">The event log writer for errors. Can be null.</param>
            <returns>
            True if the dictionary was saved, otherwise false.
            </returns>
            <example>
            This example shows how to save a string dictionary to an XML file.
            <code>
            var dictionary = new Dictionary&lt;string, string&gt;
            {
                { "Key", "Value" },
            };
            
            if (dictionary.SaveXml("MyValues.xml"))
            {
                // The dictionary was saved successfully.
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.BIM.Toolkit.Extensions.LoadXml(System.Collections.Generic.IDictionary{System.String,System.String},System.String,Tekla.BIM.Toolkit.IEventLogWriter)">
            <summary>
            Loads the dictionary from an XML file.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="path">The path to the file.</param>
            <param name="eventLogWriter">The event log writer for errors. Can be null.</param>
            <returns>
            True if the dictionary was loaded, otherwise false.
            </returns>
            <example>
            This example shows how to load a string dictionary from an XML file.
            <code>
            var dictionary = new Dictionary&lt;string, string&gt;();
            
            if (dictionary.LoadXml("MyValues.xml"))
            {
                // The dictionary was loaded successfully.
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.BIM.Toolkit.Extensions.WithValue``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Action{``1})">
            <summary>
            Retrieves the value associated with the specified key and invokes the specified action.
            </summary>
            <typeparam name="TKey">The type of the dictionary key.</typeparam>
            <typeparam name="TValue">The type of the dictionary value.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key.</param>
            <param name="withValue">The delegate to a method that is invoked with the found value.</param>
            <returns>
            The reference to the dictionary.
            </returns>
            <example>
            This example shows how to process values in a dictionary.
            <code>
            var dictionary = new Dictionary&lt;int, string&gt;
            {
                { 1, "First" },
                { 2, "Second" },
            };
            
            dictionary.WithValue(1, value => Console.WriteLine("1 = {0}", value));
            dictionary.WithValue(2, value => Console.WriteLine("2 = {0}", value));
            </code>
            </example>
        </member>
        <member name="M:Tekla.BIM.Toolkit.Extensions.Get``2(``0,System.Func{``0,``1},``1)">
            <summary>
            Gets the value from the object.
            </summary>
            <typeparam name="TSource">The type of the source object.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="source">The source object.</param>
            <param name="getResult">The delegate to a method that retrieves the value from the source object.</param>
            <param name="defaultValue">The default value if the value could not be retrieved.</param>
            <returns>
            The value or the default value if the value could not be retrieved.
            </returns>
            <example>
            This example shows how to get a value from an object.
            <code>
            var myObject = new MyObject();
            
            // This common code pattern:
            
                var value = "default value";
                
                if (myObject != null)
                {
                    value = myObject.Value;
                }
            
            // can be replaced with this:
            
                var value = myObject.Get(i => i.Value, "default value");
            </code>
            </example>
        </member>
        <member name="M:Tekla.BIM.Toolkit.Extensions.Get``3(``0,System.Func{``0,``1},System.Func{``1,``2},``2)">
            <summary>
            Gets the value from the object.
            </summary>
            <typeparam name="TSource">The type of the source object.</typeparam>
            <typeparam name="TValue">The type of the intermediate value.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="source">The source object.</param>
            <param name="getValue">The delegate to a method that retrieves the intermediate value from the source object.</param>
            <param name="getResult">The delegate to a method that retrieves the result from the intermediate value.</param>
            <param name="defaultValue">The default value if the value could not be retrieved.</param>
            <returns>
            The value or the default value if the value could not be retrieved.
            </returns>
            <example>
            This example shows how to get a value from an object.
            <code>
            var myObject = new MyObject();
            
            // This common code pattern:
            
                var value = "default value";
                
                if (myObject != null)
                {
                    if (myObject.A != null)
                    {
                        value = myObject.A.Value;
                    }
                }
            
            // can be replaced with this:
            
                var value = myObject.Get(i => i.A, i => i.Value, "default value");
            
            // The code above is equivalent to this:
            
                var parentValue = myObject
                    .Get(i => i.A)
                    .Get(i => i.Value, "default value");
            </code>
            </example>
        </member>
        <member name="M:Tekla.BIM.Toolkit.Extensions.Get``4(``0,System.Func{``0,``1},System.Func{``1,``2},System.Func{``2,``3},``3)">
            <summary>
            Gets the value from the object.
            </summary>
            <typeparam name="TSource">The type of the source object.</typeparam>
            <typeparam name="TValue1">The type of the first intermediate value.</typeparam>
            <typeparam name="TValue2">The type of the second intermediate value.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="source">The source object.</param>
            <param name="getValue1">The delegate to a method that retrieves the first intermediate value from the source object.</param>
            <param name="getValue2">The delegate to a method that retrieves the second intermediate value from the first intermediate value.</param>
            <param name="getResult">The delegate to a method that retrieves the result from the second intermediate value.</param>
            <param name="defaultValue">The default value if the value could not be retrieved.</param>
            <returns>
            The value or the default value if the value could not be retrieved.
            </returns>
            <example>
            This example shows how to get a value from an object.
            <code>
            var myObject = new MyObject();
            
            // This common code pattern:
            
                var value = "default value";
                
                if (myObject != null)
                {
                    if (myObject.A != null)
                    {
                        if (myObject.A.B != null)
                        {
                            value = myObject.A.B.Value;
                        }
                    }
                }
            
            // can be replaced with this:
            
                var value = myObject.Get(i => i.A, i => i.B, i => i.Value, "default value");
            
            // The code above is equivalent to this:
            
                var parentValue = myObject
                    .Get(i => i.A)
                    .Get(i => i.B)
                    .Get(i => i.Value, "default value");
            </code>
            </example>
        </member>
        <member name="M:Tekla.BIM.Toolkit.Extensions.Get``5(``0,System.Func{``0,``1},System.Func{``1,``2},System.Func{``2,``3},System.Func{``3,``4},``4)">
            <summary>
            Gets the value from the object.
            </summary>
            <typeparam name="TSource">The type of the source object.</typeparam>
            <typeparam name="TValue1">The type of the first intermediate value.</typeparam>
            <typeparam name="TValue2">The type of the second intermediate value.</typeparam>
            <typeparam name="TValue3">The type of the third intermediate value.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="source">The source object.</param>
            <param name="getValue1">The delegate to a method that retrieves the first intermediate value from the source object.</param>
            <param name="getValue2">The delegate to a method that retrieves the second intermediate value from the first intermediate value.</param>
            <param name="getValue3">The delegate to a method that retrieves the third intermediate value from the second intermediate value.</param>
            <param name="getResult">The delegate to a method that retrieves the result from the third intermediate value.</param>
            <param name="defaultValue">The default value if the value could not be retrieved.</param>
            <returns>
            The value or the default value if the value could not be retrieved.
            </returns>
            <example>
            This example shows how to get a value from an object.
            <code>
            var myObject = new MyObject();
            
            // This common code pattern:
            
                var value = "default value";
                
                if (myObject != null)
                {
                    if (myObject.A != null)
                    {
                        if (myObject.A.B != null)
                        {
                            if (myObject.A.B.C != null)
                            {
                                value = myObject.A.B.C.Value;
                            }
                        }
                    }
                }
            
            // can be replaced with this:
            
                var value = myObject.Get(i => i.A, i => i.B, i => i.C, i => i.Value, "default value");
            
            // The code above is equivalent to this:
            
                var parentValue = myObject
                    .Get(i => i.A)
                    .Get(i => i.B)
                    .Get(i => i.C)
                    .Get(i => i.Value, "default value");
            </code>
            </example>
        </member>
        <member name="M:Tekla.BIM.Toolkit.Extensions.Keep``1(System.Collections.Generic.Stack{``0},System.Int32)">
            <summary>
            Keeps the specified number of items from the top of the stack and discards the rest.
            </summary>
            <typeparam name="T">The type of the stack item.</typeparam>
            <param name="stack">The stack.</param>
            <param name="count">The number of items to keep from the top of the stack.</param>
            <example>
            This example shows how to discard the bottom items from a stack.
            <code>
            var stack = new Stack&lt;string&gt;();
            
            stack.Push("first string");
            stack.Push("second string");
            stack.Push("third string");
            
            stack.Keep(1);
            // stack now contains only the "third string"
            </code>
            </example>
        </member>
        <member name="M:Tekla.BIM.Toolkit.Extensions.PreserveStackTrace(System.Exception)">
            <summary>
            Prepares the exception to be thrown, preserving the stack trace.
            </summary>
            <param name="exception">The exception.</param>
            <returns>
            The prepared exception.
            </returns>
            <example>
            This example shows how to capture and rethrow exceptions.
            <code>
            private Exception exception;
            
            void PerformOperation()
            {
                try
                {
                    PerformInternalOperation();
                }
                catch (Exception error)
                {
                    exception = error;
                }
            }
            
            void VerifyOperation()
            {
                if (exception != null)
                {
                    throw exception.PreserveStackTrace();
                }
            }
            </code>
            </example>
        </member>
        <member name="F:Tekla.BIM.Toolkit.Extensions.ScheduleTimers">
            <summary>
            The pending timers.
            </summary>
        </member>
        <member name="M:Tekla.BIM.Toolkit.Extensions.Schedule(System.Action,System.Int32)">
            <summary>
            Schedules an invocation after a delay.
            </summary>
            <param name="action">The action.</param>
            <param name="delayInMilliseconds">The delay in milliseconds. The minimum value is 0 milliseconds.</param>
            <returns>
            The disposable token that cancels the invocation.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="delayInMilliseconds"/> is less than zero.</exception>
            <example>
            This example shows how to schedule actions for delayed execution.
            <code>
            var action = new Action(DoBackgroundOperation);
            var token = action.Schedule(1500); // 1.5 seconds delay.
            
            Console.WriteLine("Press enter to cancel");
            Console.ReadLine();
            
            token.Dispose();
            </code>
            </example>
        </member>
        <member name="M:Tekla.BIM.Toolkit.Extensions.CreateDelegate``1(System.Reflection.MethodInfo)">
            <summary>
            Converts the method info into a delegate. The method info must represent a static method.
            </summary>
            <typeparam name="TDelegate">The type of the delegate.</typeparam>
            <param name="methodInfo">The method info.</param>
            <returns>
            The created delegate or null if the delegate could not be created.
            </returns>
            <example>
            This example shows how to convert a method info into a delegate.
            <code>
            var myMethodDelegate = typeof(MyClass).GetMethod("MyStaticMethod").CreateDelegate&lt;Action&gt;();
            </code>
            </example>
        </member>
        <member name="M:Tekla.BIM.Toolkit.Extensions.CreateDelegate``1(System.Reflection.MethodInfo,System.Object)">
            <summary>
            Converts the method info into a delegate. The method info must represent an instance method.
            </summary>
            <typeparam name="TDelegate">The type of the delegate.</typeparam>
            <param name="methodInfo">The method info.</param>
            <param name="objectInstance">The object instance to bind.</param>
            <returns>
            The created delegate or null if the delegate could not be created.
            </returns>
            <example>
            This example shows how to convert a method info into a delegate.
            <code>
            var myMethodDelegate = myObj.GetType().GetMethod("MyInstanceMethod").CreateDelegate&lt;Action&gt;(myObj);
            </code>
            </example>
        </member>
        <member name="M:Tekla.BIM.Toolkit.Extensions.TryUpdate``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Attempts to update a value in the dictionary.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key.</param>
            <param name="value">The value that replaces the current value.</param>
            <returns>
            True if the value was updated, otherwise false.
            </returns>
            <example>
            This example shows how to update safely an element in a dictionary.
            <code>
            var dictionary = new Dictionary&lt;string, string&gt;()
            {
                { "Key", "Value" }
            };
            
            var result = dictionary.TryUpdate("Key", "New value");
            // result is true if the dictionary was updated
            </code>
            </example>
        </member>
        <member name="M:Tekla.BIM.Toolkit.Extensions.TryUpdate``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1,``1@)">
            <summary>
            Attempts to update a value in the dictionary.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key.</param>
            <param name="value">The value that replaces the current value.</param>
            <param name="replaced">The output variable for the replaced value.</param>
            <returns>
            True if the value was updated, otherwise false.
            </returns>
            <example>
            This example shows how to update safely an element in a dictionary.
            <code>
            var dictionary = new Dictionary&lt;string, string&gt;()
            {
                { "Key", "Value" }
            };
            
            string replaced;
            var result = dictionary.TryUpdate("Key", "New value", out replaced);
            // result is true if the dictionary was updated, replaced contains the old value
            </code>
            </example>
        </member>
        <member name="M:Tekla.BIM.Toolkit.Extensions.TryUpdate``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``0,``1,``1})">
            <summary>
            Attempts to update a value in the dictionary.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The dictionary key.</param>
            <param name="updateValue">The delegate to a method that returns the value that replaces the current value.</param>
            <returns>
            True if the value was updated, otherwise false.
            </returns>
            <example>
            This example shows how to update safely an element in a dictionary.
            <code>
            var dictionary = new Dictionary&lt;string, string&gt;()
            {
                { "Key", "Value" }
            };
            
            var result = dictionary.TryUpdate("Key", (key, old) => "New value");
            // result is true if the dictionary was updated
            </code>
            </example>
        </member>
        <member name="M:Tekla.BIM.Toolkit.Extensions.InsertAfter``1(System.Collections.Generic.IList{``0},``0,``0)">
            <summary>
            Inserts the specified item after the target item in the list.
            </summary>
            <typeparam name="T">The type of the list item.</typeparam>
            <param name="list">The list.</param>
            <param name="item">The item to insert.</param>
            <param name="after">The target item in the list. The <paramref name="item"/> will be inserted after this item.</param>
            <returns>
            True if the item was inserted, otherwise false.
            </returns>
            <example>
            This example shows how to insert one item after a specific one.
            <code>
            var list = new List&lt;string&gt; { "A", "C" };
            
            list.InsertAfter("B", after: "A");
            // list now contains: "A", "B", "C"
            </code>
            </example>
        </member>
        <member name="M:Tekla.BIM.Toolkit.Extensions.InsertBefore``1(System.Collections.Generic.IList{``0},``0,``0)">
            <summary>
            Inserts the specified item before the target item in the list.
            </summary>
            <typeparam name="T">The type of the list item.</typeparam>
            <param name="list">The list.</param>
            <param name="item">The item to insert.</param>
            <param name="before">The target item in the list. The <paramref name="item"/> will be inserted before this item.</param>
            <returns>
            True if the item was inserted, otherwise false.
            </returns>
            <example>
            This example shows how to insert one item before a specific one.
            <code>
            var list = new List&lt;string&gt; { "A", "C" };
            
            list.InsertBefore("B", before: "C");
            // list now contains: "A", "B", "C"
            </code>
            </example>
        </member>
        <member name="M:Tekla.BIM.Toolkit.Extensions.ToHashSet``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts an enumerable sequence into a <see cref="T:System.Collections.Generic.HashSet`1"/>.
            </summary>
            <typeparam name="T">The type of the sequence element.</typeparam>
            <param name="source">The enumerable sequence.</param>
            <returns>
            The <see cref="T:System.Collections.Generic.HashSet`1"/> that contains the elements from the enumerable sequence.
            </returns>
            <example>
            This example shows how to convert a list to a <see cref="T:System.Collections.Generic.HashSet`1"/>.
            <code>
            var myList = new List&lt;string&gt; { "A", "B", "C" };
            
            var myHashSet = myList.ToHashSet();
            </code>
            </example>
        </member>
        <member name="M:Tekla.BIM.Toolkit.Extensions.ToHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Converts an enumerable sequence into a <see cref="T:System.Collections.Generic.HashSet`1"/>.
            </summary>
            <typeparam name="T">The type of the sequence element.</typeparam>
            <param name="source">The enumerable sequence.</param>
            <param name="comparer">The comparer used by the hash set. This is useful for example when building a case insensitive hash set.</param>
            <returns>
            The <see cref="T:System.Collections.Generic.HashSet`1"/> that contains the elements from the enumerable sequence.
            </returns>
            <example>
            This example shows how to convert a list to a <see cref="T:System.Collections.Generic.HashSet`1"/>.
            <code>
            var myList = new List&lt;string&gt; { "A", "B", "b", "a" };
            var stringComparer = System.StringComparer.InvariantCultureIgnoreCase;
            
            var myHashSet = myList.ToHashSet(stringComparer);
            // myHashSet contains: "A", "B"
            </code>
            </example>
        </member>
        <member name="M:Tekla.BIM.Toolkit.Extensions.AddRange(System.Collections.IList,System.Collections.IEnumerable)">
            <summary>
            Adds all the given items in source to the target list.
            </summary>
            <param name="target">The target list.</param>
            <param name="source">The items source.</param>
            <example>
            This example shows how to add a range of values for a list.
            <code>
            var sourceList = new ArrayList { "C", "D" } as IList;
            var destinationList = new ArrayList { "A", "B" } as IList;
            // Add sourceList to destinationList
            destinationList.AddRange(sourceList);
            
            // destinationList now contains:
            // "A", "B", "C", "D" elements.
            </code>
            </example>
        </member>
        <member name="M:Tekla.BIM.Toolkit.Extensions.TryRemove``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1@)">
            <summary>
            Attempts to remove the key and value from the dictionary.
            </summary>
            <typeparam name="TKey">Dictionary key type.</typeparam>
            <typeparam name="TValue">Dictionary value type.</typeparam>
            <param name="dictionary">Dictionary object.</param>
            <param name="key">Key to remove.</param>
            <param name="removedValue">Output variable for the removed value.</param>
            <returns>True if the key and value were removed, otherwise false.</returns>
            <example>
            This example shows how to remove safely an element to a dictionary.
            <code>
            var myDictionary = new Dictionary&lt;string, string&gt;();
            
            myDictionary.Add("Key", "Value");
            
            string removedValue;
            var result = myDictionary.TryRemove("Key", out removedValue); //result = true, and value the is removed.
            result = myDictionary.TryRemove("Key", out removedValue); //result = false, the value was already removed.
            </code>
            </example>
        </member>
        <member name="M:Tekla.BIM.Toolkit.Extensions.Discard``1(System.Collections.Generic.Stack{``0},System.Int32)">
            <summary>
            Discards the specified number of items from the top of the stack.
            </summary>
            <typeparam name="T">The type of the stack item.</typeparam>
            <param name="stack">The stack.</param>
            <param name="count">The number of items to discard from the top of the stack.</param>
            <example>
            This example shows how to discard the top items from a stack.
            <code>
            var stack = new Stack&lt;string&gt;();
            
            stack.Push("first string");
            stack.Push("second string");
            stack.Push("third string");
            
            stack.Discard(2);
            // stack now contains only the "first string"
            </code>
            </example>
        </member>
        <member name="M:Tekla.BIM.Toolkit.Extensions.TryAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Attempts to add the key and value to the dictionary.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key to add.</param>
            <param name="value">The value to add.</param>
            <returns>
            True if the key and value were added, otherwise false.
            </returns>
            <example>
            This example shows how to add safely an element to a dictionary.
            <code>
            var myDictionary = new Dictionary&lt;string, string&gt;();
            
            var result = myDictionary.TryAdd("Key", "Value"); //result = true, and the value is added.
            result = myDictionary.TryAdd("Key", "Value"); //result = false, and the value is not added.
            </code>
            </example>
        </member>
        <member name="M:Tekla.BIM.Toolkit.Extensions.TryAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``0,``1})">
            <summary>
            Attempts to add the key and value to the dictionary.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key to add.</param>
            <param name="valueFactory">The delegate to a method that creates the value.</param>
            <returns>
            True if the key and value were added, otherwise false.
            </returns>
            <example>
            This example shows how to add safely an element to a dictionary.
            <code>
            var myDictionary = new Dictionary&lt;string, string&gt;();
            
            var result = myDictionary.TryAdd("Key", k => "Value"); //result = true, and the value is added.
            result = myDictionary.TryAdd("Key", k => "Value"); //result = false, and the value is not added.
            </code>
            </example>
        </member>
        <member name="M:Tekla.BIM.Toolkit.Extensions.ToBitArray(System.Byte[])">
            <summary>
            Returns the bits in the array as a <see cref="T:System.Collections.BitArray"/>.
            </summary>
            <param name="array">The array.</param>
            <returns>
            The <see cref="T:System.Collections.BitArray"/> that contains the bits from the array.
            </returns>
            <example>
            This example shows how to convert an array of bytes into a <see cref="T:System.Collections.BitArray"/>.
            <code>
            byte[] myData = new byte[] { 0x00, 0x01, 0x00, 0x01 };
            var myBitArray = myData.ToBitArray();
            </code>
            </example>
        </member>
        <member name="M:Tekla.BIM.Toolkit.Extensions.ToByteArray(System.Collections.BitArray)">
            <summary>
            Returns the bits in the <see cref="T:System.Collections.BitArray"/> as an array of bytes.
            </summary>
            <param name="bitArray">The bit array.</param>
            <returns>
            The bits as an array of bytes.
            </returns>
            <example>
            This example shows how to convert a <see cref="T:System.Collections.BitArray"/> into an array of bytes.
            <code>
            BitArray myBitArray = new BitArray(4, false);
            var myByteArray = myBitArray.ToByteArray();
            </code>
            </example>
        </member>
        <member name="M:Tekla.BIM.Toolkit.Extensions.GetValue``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``0,``1})">
            <summary>
            Gets a value from the dictionary.
            </summary>
            <typeparam name="TKey">The type of the dictionary key.</typeparam>
            <typeparam name="TValue">The type of the dictionary value.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The dictionary key.</param>
            <param name="valueFactory">The delegate to a method that creates the missing value.</param>
            <returns>
            The value from the dictionary.
            </returns>
            <example>
            This example shows how to get a value from a dictionary.
            <code>
            var dictionary = new Dictionary&lt;string, string&gt;();
            
            ...
            
            // Get the value or the key if the value is not found.
            var value = dictionary.GetValue("MyKey", key =&gt; key);
            </code>
            </example>
        </member>
        <member name="M:Tekla.BIM.Toolkit.Extensions.GetValueOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
            Gets a value from the dictionary.
            </summary>
            <typeparam name="TKey">The type of the dictionary key.</typeparam>
            <typeparam name="TValue">The type of the dictionary value.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The dictionary key.</param>
            <returns>
            The value from the dictionary or the default value if the value is missing.
            </returns>
            <example>
            This example shows how to get a value from a dictionary.
            <code>
            var dictionary = new Dictionary&lt;string, string&gt;();
            
            ...
            
            var value = dictionary.GetValueOrDefault("MyKey");
            
            if (value != null)
            {
                // Use the value here.
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.BIM.Toolkit.Extensions.GetValueOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Gets a value from the dictionary, or the specified default value.
            </summary>
            <typeparam name="TKey">The type of the dictionary key.</typeparam>
            <typeparam name="TValue">The type of the dictionary value.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The dictionary key.</param>
            <param name="defaultValue">The value to return if the value is missing.</param>
            <returns>
            The value from the dictionary or the specified default value if the value is missing.
            </returns>
            <example>
            This example shows how to get a value from a dictionary.
            <code>
            var dictionary = new Dictionary&lt;string, string&gt;();
            
            ...
            
            // Get the value or the default value.
            var value = dictionary.GetValueOrDefault("MyKey", "default value");
            </code>
            </example>
        </member>
        <member name="F:Tekla.BIM.Toolkit.Extensions.XmlWriterSettings">
            <summary>
            XML writer settings.
            </summary>
        </member>
        <member name="M:Tekla.BIM.Toolkit.Extensions.WriteXml(System.IO.Stream,System.Object,System.String)">
            <summary>
            Writes an object in XML format.
            </summary>
            <param name="stream">The output stream.</param>
            <param name="item">The object to write.</param>
            <param name="defaultNamespace">The default namespace.</param>
            <example>
            This example shows how to write an object into XML file.
            <code>
            var myObject = new MyObject();
            
            using (var stream = File.Create("MyObject.xml"))
            {
                stream.WriteXml(myObject);
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.BIM.Toolkit.Extensions.WriteXml(System.IO.TextWriter,System.Object,System.String)">
            <summary>
            Writes an object in XML format.
            </summary>
            <param name="writer">The text writer object.</param>
            <param name="item">The object to write.</param>
            <param name="defaultNamespace">The default namespace.</param>
            <example>
            This example shows how to write an object into XML file.
            <code>
            var myObject = new MyObject();
            
            using (var stream = File.Create("MyObject.xml"))
            {
                using (var writer = new StreamWriter(stream))
                {
                    writer.WriteXml(myObject);
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.BIM.Toolkit.Extensions.WriteXml(System.Xml.XmlWriter,System.Object,System.String)">
            <summary>
            Writes an object in XML format.
            </summary>
            <param name="writer">The XML writer object.</param>
            <param name="item">The object to write.</param>
            <param name="defaultNamespace">The default namespace.</param>
            <example>
            This example shows how to write an object into XML file.
            <code>
            var myObject = new MyObject();
            
            using (var stream = File.Create("MyObject.xml"))
            {
                using (var writer = XmlWriter.Create(stream))
                {
                    writer.WriteXml(myObject);
                }
            }
            </code>
            </example>
        </member>
        <member name="F:Tekla.BIM.Toolkit.Extensions.Serializers">
            <summary>
            Cached XML XmlSerializer instances.
            </summary>
        </member>
        <member name="M:Tekla.BIM.Toolkit.Extensions.GetXmlSerializer(System.Type)">
            <summary>
            Gets the XML serializer for the specified type. The requested XmlSerializer is cached and can be requested
            again without the overhead of creating a new XmlSerializer instance.
            </summary>
            <param name="type">The type to serializer or deserialize.</param>
            <returns>
            The XML serializer for the type.
            </returns>
            <example>
            This example shows how to serialize an object as XML.
            <code>
            var myObject = new MyObject();
            
            using (var stream = File.Create("MyObject.xml"))
            {
                myObject.GetType().GetXmlSerializer().Serialize(stream, myObject);
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.BIM.Toolkit.Extensions.ReadXml``1(System.IO.Stream)">
            <summary>
            Reads an object from XML format.
            </summary>
            <typeparam name="T">The object type.</typeparam>
            <param name="stream">The input stream.</param>
            <returns>
            The object that was read.
            </returns>
            <example>
            This example shows how to read an object from XML file.
            <code>
            using (var stream = File.OpenRead("MyObject.xml"))
            {
                var myObject = stream.ReadXml&lt;MyObject&gt;();
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.BIM.Toolkit.Extensions.ReadXml``1(System.IO.TextReader)">
            <summary>
            Reads an object from XML format.
            </summary>
            <typeparam name="T">The object type.</typeparam>
            <param name="reader">The text reader object.</param>
            <returns>
            The object that was read.
            </returns>
            <example>
            This example shows how to read an object from XML file.
            <code>
            using (var stream = File.OpenRead("MyObject.xml"))
            {
                using (var reader = new StreamReader(stream))
                {
                    var myObject = reader.ReadXml&lt;MyObject&gt;();
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.BIM.Toolkit.Extensions.ReadXml``1(System.Xml.XmlReader)">
            <summary>
            Reads an object from XML format.
            </summary>
            <typeparam name="T">The object type.</typeparam>
            <param name="reader">The XML reader object.</param>
            <returns>
            The object that was read.
            </returns>
            <example>
            This example shows how to read an object from XML file.
            <code>
            using (var stream = File.OpenRead("MyObject.xml"))
            {
                using (var reader = XmlReader.Create(stream))
                {
                    var myObject = reader.ReadXml&lt;MyObject&gt;();
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.BIM.Toolkit.Extensions.ReadXml(System.IO.Stream,System.Type)">
            <summary>
            Reads an object from XML format.
            </summary>
            <param name="stream">The input stream.</param>
            <param name="type">The object type.</param>
            <returns>
            The object that was read.
            </returns>
            <example>
            This example shows how to read an object from XML file.
            <code>
            using (var stream = File.Open("MyObject.xml"))
            {
                var myObject = (MyObject)stream.ReadXml(typeof(MyObject));
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.BIM.Toolkit.Extensions.ReadXml(System.IO.TextReader,System.Type)">
            <summary>
            Reads an object from XML format.
            </summary>
            <param name="reader">The text reader object.</param>
            <param name="type">The object type.</param>
            <returns>
            The object that was read.
            </returns>
            <example>
            This example shows how to read an object from XML file.
            <code>
            using (var stream = File.Open("MyObject.xml"))
            {
                using (var reader = new StreamReader(stream))
                {
                    var myObject = reader.ReadXml(typeof(MyObject));
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.BIM.Toolkit.Extensions.ReadXml(System.Xml.XmlReader,System.Type)">
            <summary>
            Reads an object from XML format.
            </summary>
            <param name="reader">The XML reader object.</param>
            <param name="type">The object type.</param>
            <returns>
            The object that was read.
            </returns>
            <example>
            This example shows how to read an object from XML file.
            <code>
            using (var stream = File.Open("MyObject.xml"))
            {
                using (var reader = XmlReader.Create(stream))
                {
                    var myObject = reader.ReadXml(typeof(MyObject));
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.BIM.Toolkit.Extensions.GetOrAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``0,``1})">
            <summary>
            Gets a value from the dictionary or adds it if missing.
            </summary>
            <typeparam name="TKey">The dictionary key type.</typeparam>
            <typeparam name="TValue">The dictionary value type.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The dictionary key.</param>
            <param name="valueFactory">The delegate to a method that creates the missing value.</param>
            <returns>
            The value from the dictionary.
            </returns>
            <example>
            This example shows how to cache values in a dictionary.
            <code>
            // Cache for values.
            private Dictionary&lt;string, MyValue&gt; cache = new Dictionary&lt;string, MyValue&gt;();
            
            // Get the value from cache or add it if not found.
            var value = cache.GetOrAdd("key", key =&gt; new MyValue(key));
            </code>
            </example>
        </member>
        <member name="M:Tekla.BIM.Toolkit.Extensions.FormatInvariant(System.String,System.Object[])">
            <summary>
            Formats the string with the culture-independent (invariant) formatting rules.
            </summary>
            <param name="format">The format string.</param>
            <param name="data">The formatted data.</param>
            <returns>
            The formatted string.
            </returns>
            <example>
            This example shows how to format text for debut output.
            <code>
            Debug.WriteLine("{0} took {1} milliseconds".FormatInvariant(operation, milliseconds));
            </code>
            </example>
        </member>
        <member name="M:Tekla.BIM.Toolkit.Extensions.GetPropertiesWith``1(System.Type,System.Reflection.BindingFlags)">
            <summary>
            Gets the properties defined in the type and annotated with the specified custom attribute type.
            </summary>
            <typeparam name="TAttribute">The type of the custom attribute.</typeparam>
            <param name="type">The type.</param>
            <param name="bindingFlags">The binding flags. The default value returns all public instance properties.</param>
            <returns>
            The found properties with the custom attributes.
            </returns>
            <example>
            This example shows how to find the properties annotated with an attribute.
            <code>
            var properties = typeof(MyClass).GetPropertiesWith&lt;MyAttribute&gt;();
            
            foreach(var property in properties)
            {
                // Use the property here.
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.BIM.Toolkit.Extensions.GetExportedTypesWith``1(System.Reflection.Assembly)">
            <summary>
            Gets the exported types that are annotated with the specified custom attribute type.
            </summary>
            <typeparam name="TAttribute">The type of the custom attribute.</typeparam>
            <param name="assembly">The assembly.</param>
            <returns>
            The found types with the custom attributes.
            </returns>
            <example>
            This example shows how to find the types annotated with an attribute.
            <code>
            var types = typeof(MyClass).Assembly.GetExportedTypesWith&lt;MyAttribute&gt;();
            
            foreach (var type in types)
            {
                // Use the type here.
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.BIM.Toolkit.Extensions.GetMethodsWith``1(System.Type,System.Reflection.BindingFlags)">
            <summary>
            Gets the methods defined in the type and annotated with the specified custom attribute type.
            </summary>
            <typeparam name="TAttribute">The type of the custom attribute.</typeparam>
            <param name="type">The type.</param>
            <param name="bindingFlags">The binding flags. The default value returns all public instance methods.</param>
            <returns>
            The found methods with the custom attributes.
            </returns>
            <example>
            This example shows how to find the methods annotated with an attribute.
            <code>
            var methods = typeof(MyClass).GetMethodsWith&lt;MyAttribute&gt;();
            
            foreach(var method in methods)
            {
                // Use the method here.
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.BIM.Toolkit.Extensions.TrimEnd(System.String,System.Int32)">
            <summary>
            Removes characters from the end of the string.
            </summary>
            <param name="text">The string.</param>
            <param name="characters">The number of characters to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="characters"/> is less than zero.</exception>
            <returns>
            The resulting string.
            </returns>
            <example>
            This example shows how to remove last 5 characters from a string.
            <code>
            var result = "HelloWorld".TrimEnd(5); // result = "Hello"
            </code>
            </example>
        </member>
        <member name="M:Tekla.BIM.Toolkit.Extensions.TrimStart(System.String,System.Int32)">
            <summary>
            Removes characters from the start of the string.
            </summary>
            <param name="text">The string.</param>
            <param name="characters">The number of characters to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="characters"/> is less than zero.</exception>
            <returns>
            The resulting string.
            </returns>
            <example>
            This example shows how to remove first 5 characters from a string.
            <code>
            var result = "HelloWorld".TrimStart(5); // result = "World"
            </code>
            </example>
        </member>
        <member name="M:Tekla.BIM.Toolkit.Extensions.RemoveAll``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Removes all elements from the collection and returns them as an array.
            </summary>
            <typeparam name="T">The collection element type.</typeparam>
            <param name="collection">The collection.</param>
            <returns>
            The removed elements.
            </returns>
            <example>
            This example shows how to remove all items from a collection.
            <code>
            var removed = collection.RemoveAll();
            
            foreach(var element in removed)
            {
                // Use the removed elements.
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.BIM.Toolkit.Extensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Performs an action for each element in the enumerable sequence.
            </summary>
            <typeparam name="T">The sequence element type.</typeparam>
            <param name="sequence">The enumerable sequence.</param>
            <param name="action">The delegate to a method that performs the action for an element.</param>
            <example>
            This example shows how to iterate through a collection of key-value pairs.
            <code>
            collection.ForEach(element =&gt;
            {
                // Use the element here.
            });
            </code>
            </example>
        </member>
        <member name="M:Tekla.BIM.Toolkit.Extensions.ForEach``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Action{``0,``1})">
            <summary>
            Performs an action for each element in the enumerable sequence.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="sequence">The enumerable sequence.</param>
            <param name="action">The delegate to a method that performs the action for an element.</param>
            <example>
            This example shows how to iterate through a collection of key-value pairs.
            <code>
            collectionOfKeyValuePairs.ForEach((key, value) =&gt;
            {
                // Use the key and value here.
            });
            </code>
            </example>
        </member>
        <member name="M:Tekla.BIM.Toolkit.Extensions.ForEach``1(System.Collections.Generic.IEnumerable{System.Tuple{``0}},System.Action{``0})">
            <summary>
            Performs an action for each element in the enumerable sequence.
            </summary>
            <typeparam name="T1">The type of the first item.</typeparam>
            <param name="sequence">The enumerable sequence.</param>
            <param name="action">The delegate to a method that performs the action for an element.</param>
            <example>
            This example shows how to iterate through a collection of tuples.
            <code>
            collectionOfTuples.ForEach(a =&gt;
            {
                // Use the value here.
            });
            </code>
            </example>
        </member>
        <member name="M:Tekla.BIM.Toolkit.Extensions.ForEach``2(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}},System.Action{``0,``1})">
            <summary>
            Performs an action for each element in the enumerable sequence.
            </summary>
            <typeparam name="T1">The type of the first item.</typeparam>
            <typeparam name="T2">The type of the second item.</typeparam>
            <param name="sequence">The enumerable sequence.</param>
            <param name="action">The delegate to a method that performs the action for an element.</param>
            <example>
            This example shows how to iterate through a collection of tuples.
            <code>
            collectionOfTuples.ForEach((a, b) =&gt;
            {
                // Use the values here.
            });
            </code>
            </example>
        </member>
        <member name="M:Tekla.BIM.Toolkit.Extensions.ForEach``3(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2}},System.Action{``0,``1,``2})">
            <summary>
            Performs an action for each element in the enumerable sequence.
            </summary>
            <typeparam name="T1">The type of the first item.</typeparam>
            <typeparam name="T2">The type of the second item.</typeparam>
            <typeparam name="T3">The type of the third item.</typeparam>
            <param name="sequence">The enumerable sequence.</param>
            <param name="action">The delegate to a method that performs the action for an element.</param>
            <example>
            This example shows how to iterate through a collection of tuples.
            <code>
            collectionOfTuples.ForEach((a, b, c) =&gt;
            {
                // Use the values here.
            });
            </code>
            </example>
        </member>
        <member name="M:Tekla.BIM.Toolkit.Extensions.ForEach``4(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3}},System.Action{``0,``1,``2,``3})">
            <summary>
            Performs an action for each element in the enumerable sequence.
            </summary>
            <typeparam name="T1">The type of the first item.</typeparam>
            <typeparam name="T2">The type of the second item.</typeparam>
            <typeparam name="T3">The type of the third item.</typeparam>
            <typeparam name="T4">The type of the fourth item.</typeparam>
            <param name="sequence">The enumerable sequence.</param>
            <param name="action">The delegate to a method that performs the action for an element.</param>
            <example>
            This example shows how to iterate through a collection of tuples.
            <code>
            collectionOfTuples.ForEach((a, b, c, d) =&gt;
            {
                // Use the values here.
            });
            </code>
            </example>
        </member>
        <member name="M:Tekla.BIM.Toolkit.Extensions.ForEach``5(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4}},System.Action{``0,``1,``2,``3,``4})">
            <summary>
            Performs an action for each element in the enumerable sequence.
            </summary>
            <typeparam name="T1">The type of the first item.</typeparam>
            <typeparam name="T2">The type of the second item.</typeparam>
            <typeparam name="T3">The type of the third item.</typeparam>
            <typeparam name="T4">The type of the fourth item.</typeparam>
            <typeparam name="T5">The type of the fifth item.</typeparam>
            <param name="sequence">The enumerable sequence.</param>
            <param name="action">The delegate to a method that performs the action for an element.</param>
            <example>
            This example shows how to iterate through a collection of tuples.
            <code>
            collectionOfTuples.ForEach((a, b, c, d, e) =&gt;
            {
                // Use the values here.
            });
            </code>
            </example>
        </member>
        <member name="M:Tekla.BIM.Toolkit.Extensions.ForEach``6(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5}},System.Action{``0,``1,``2,``3,``4,``5})">
            <summary>
            Performs an action for each element in the enumerable sequence.
            </summary>
            <typeparam name="T1">The type of the first item.</typeparam>
            <typeparam name="T2">The type of the second item.</typeparam>
            <typeparam name="T3">The type of the third item.</typeparam>
            <typeparam name="T4">The type of the fourth item.</typeparam>
            <typeparam name="T5">The type of the fifth item.</typeparam>
            <typeparam name="T6">The type of the sixth item.</typeparam>
            <param name="sequence">The enumerable sequence.</param>
            <param name="action">The delegate to a method that performs the action for an element.</param>
            <example>
            This example shows how to iterate through a collection of tuples.
            <code>
            collectionOfTuples.ForEach((a, b, c, d, e, f) =&gt;
            {
                // Use the values here.
            });
            </code>
            </example>
        </member>
        <member name="M:Tekla.BIM.Toolkit.Extensions.ForEach``7(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6}},System.Action{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            Performs an action for each element in the enumerable sequence.
            </summary>
            <typeparam name="T1">The type of the first item.</typeparam>
            <typeparam name="T2">The type of the second item.</typeparam>
            <typeparam name="T3">The type of the third item.</typeparam>
            <typeparam name="T4">The type of the fourth item.</typeparam>
            <typeparam name="T5">The type of the fifth item.</typeparam>
            <typeparam name="T6">The type of the sixth item.</typeparam>
            <typeparam name="T7">The type of the seventh item.</typeparam>
            <param name="sequence">The enumerable sequence.</param>
            <param name="action">The delegate to a method that performs the action for an element.</param>
            <example>
            This example shows how to iterate through a collection of tuples.
            <code>
            collectionOfTuples.ForEach((a, b, c, d, e, f, g) =&gt;
            {
                // Use the values here.
            });
            </code>
            </example>
        </member>
        <member name="M:Tekla.BIM.Toolkit.Extensions.ForEach``8(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,``7}},System.Action{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Performs an action for each element in the enumerable sequence.
            </summary>
            <typeparam name="T1">The type of the first item.</typeparam>
            <typeparam name="T2">The type of the second item.</typeparam>
            <typeparam name="T3">The type of the third item.</typeparam>
            <typeparam name="T4">The type of the fourth item.</typeparam>
            <typeparam name="T5">The type of the fifth item.</typeparam>
            <typeparam name="T6">The type of the sixth item.</typeparam>
            <typeparam name="T7">The type of the seventh item.</typeparam>
            <typeparam name="T8">The type of the eight item.</typeparam>
            <param name="sequence">The enumerable sequence.</param>
            <param name="action">The delegate to a method that performs the action for an element.</param>
            <example>
            This example shows how to iterate through a collection of tuples.
            <code>
            collectionOfTuples.ForEach((a, b, c, d, e, f, g, h) =&gt;
            {
                // Use the values here.
            });
            </code>
            </example>
        </member>
        <member name="M:Tekla.BIM.Toolkit.Extensions.Near(System.Single,System.Single,System.Int32)">
            <summary>
            Determines whether the specified values are near to each other.
            </summary>
            <param name="value1">The first value to compare.</param>
            <param name="value2">The second value to compare.</param>
            <param name="allowedErrorInUnitsInLastPlace">The allowed error in units in the last place (ULP). The default value is 10.</param>
            <returns>
            True if the specified values are near to each other, otherwise false.
            </returns>
            <remarks>
            Floating point comparison is very tricky as the precision of the values varies depending on the magnitude. To handle this,
            the values are linearized into discrete units that can be compared directly.
            </remarks>
            <example>
            This example shows how to compare two floating point values for equality.
            <code>
            if (value1.Near(value2))
            {
                // Values are near to each other, within the allowed error in ULPs.
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.BIM.Toolkit.Extensions.Near(System.Double,System.Double,System.Int32)">
            <summary>
            Determines whether the specified values are near to each other.
            </summary>
            <param name="value1">The first value to compare.</param>
            <param name="value2">The second value to compare.</param>
            <param name="allowedErrorInUnitsInLastPlace">The allowed error in units in the last place (ULP). The default value is 10.</param>
            <returns>
            True if the specified values are near to each other, otherwise false.
            </returns>
            <remarks>
            Floating point comparison is very tricky as the precision of the values varies depending on the magnitude. To handle this,
            the values are linearized into discrete units that can be compared directly.
            </remarks>
            <example>
            This example shows how to compare two floating point values for equality.
            <code>
            if (value1.Near(value2))
            {
                // Values are near to each other, within the allowed error in ULPs.
            }
            </code>
            </example>
        </member>
        <member name="F:Tekla.BIM.Toolkit.Extensions.Reset">
            <summary>
            The cached <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance with Reset action.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.Extensions.PropertyChangedEventArgs">
            <summary>
            The cached <see cref="F:Tekla.BIM.Toolkit.Extensions.PropertyChangedEventArgs"/>.
            </summary>
        </member>
        <member name="M:Tekla.BIM.Toolkit.Extensions.Raise(System.EventHandler,System.Object)">
            <summary>
            Raises the specified event.
            </summary>
            <param name="eventHandler">The event handler.</param>
            <param name="sender">The sender.</param>
            <remarks>
            This method simplifies the raising of events by checking whether the event handler
            is null before attempting to invoke the event handler delegates.
            </remarks>
            <example>
            This example shows how to raise events.
            <code>
            // Raise the Closing event with the default event arguments.
            Closing.Raise(this);
            </code>
            </example>
        </member>
        <member name="M:Tekla.BIM.Toolkit.Extensions.Raise(System.EventHandler,System.Object,System.EventArgs)">
            <summary>
            Raises the specified event.
            </summary>
            <param name="eventHandler">The event handler.</param>
            <param name="sender">The sender.</param>
            <param name="eventArgs">The event arguments.</param>
            <remarks>
            This method simplifies the raising of events by checking whether the event handler
            is null before attempting to invoke the event handler delegates.
            </remarks>
            <example>
            This example shows how to raise events.
            <code>
            // Raise the Closing event.
            Closing.Raise(this, EventArgs.Empty);
            </code>
            </example>
        </member>
        <member name="M:Tekla.BIM.Toolkit.Extensions.Raise``1(System.EventHandler{``0},System.Object,``0)">
            <summary>
            Raises the specified event.
            </summary>
            <typeparam name="TEventArgs">The type of the event arguments.</typeparam>
            <param name="eventHandler">The event handler.</param>
            <param name="sender">The sender.</param>
            <param name="eventArgs">The event arguments.</param>
            <remarks>
            This method simplifies the raising of events by checking whether the event handler
            is null before attempting to invoke the event handler delegates.
            </remarks>
            <example>
            This example shows how to raise events.
            <code>
            // Raise the Closing event.
            Closing.Raise(this, new ClosingEventArgs());
            </code>
            </example>
        </member>
        <member name="M:Tekla.BIM.Toolkit.Extensions.Raise``1(System.EventHandler{``0},System.Object,System.Func{``0})">
            <summary>
            Raises the specified event.
            </summary>
            <typeparam name="TEventArgs">The type of the event arguments.</typeparam>
            <param name="eventHandler">The event handler.</param>
            <param name="sender">The sender.</param>
            <param name="eventArgsFactory">The delegate to a function that creates the event arguments.</param>
            <remarks>
            This method simplifies the raising of events by checking whether the event handler
            is null before attempting to invoke the event handler delegates.
            </remarks>
            <example>
            This example shows how to raise events.
            <code>
            // Raise the Closing event. The event arguments are constructed only if needed.
            Closing.Raise(this, () => new ClosingEventArgs());
            </code>
            </example>
        </member>
        <member name="M:Tekla.BIM.Toolkit.Extensions.Raise(System.ComponentModel.PropertyChangedEventHandler,System.Object,System.String)">
            <summary>
            Raises the PropertyChanged event.
            </summary>
            <param name="eventHandler">The event handler.</param>
            <param name="sender">The sender.</param>
            <param name="propertyName">The property name.</param>
            <remarks>
            This method simplifies the raising of PropertyChanged event by checking
            whether the event handler is null before attempting to invoke the event
            handler delegate. It also caches and reuses the event arguments to reduce
            the need for garbage collection.
            </remarks>
            <example>
            This example shows how to raise the PropertyChanged event.
            <code>
            // Raise event to notify that MyProperty has changed.
            PropertyChanged.Raise(this, "MyProperty");
            </code>
            </example>
        </member>
        <member name="M:Tekla.BIM.Toolkit.Extensions.Raise(System.Collections.Specialized.NotifyCollectionChangedEventHandler,System.Object)">
            <summary>
            Raises the event with Reset action.
            </summary>
            <param name="eventHandler">Event to raise.</param>
            <param name="sender">Sender object.</param>
            <example>
            This example shows how to raise the CollectionChanged event.
            <code>
            // Raise event to notify that MyProperty has changed.
            CollectionChanged.Raise(this);
            </code>
            </example>
        </member>
        <member name="M:Tekla.BIM.Toolkit.Extensions.AsReadOnly``1(System.Collections.Generic.IList{``0})">
            <summary>
            Gets a read only view of the collection.
            </summary>
            <typeparam name="T">The collection item type.</typeparam>
            <param name="collection">The collection instance.</param>
            <returns>
            The read only view of the collection.
            </returns>
            <example>
            This example shows how to convert a list into a read only collection.
            <code>
            var stringList = new List&lt;string&gt; { "first string", "second string" };
            var readOnlyStringList =  stringList.AsReadOnly();
            </code>
            </example>
        </member>
        <member name="M:Tekla.BIM.Toolkit.Extensions.AsReadOnly``1(System.Collections.ObjectModel.ObservableCollection{``0})">
            <summary>
            Gets a read only view of the collection.
            </summary>
            <typeparam name="T">The collection item type.</typeparam>
            <param name="collection">The collection instance.</param>
            <returns>
            The read only view of the collection.
            </returns>
            <example>
            This example shows how to convert an observable collection into a read only observable collection.
            <code>
            var stringObservableCollection = new ObservableCollection&lt;string&gt; { "first string", "second string" };
            var readOnlyStringObservableCollection =  stringObservableCollection.AsReadOnly();
            </code>
            </example>
        </member>
        <member name="M:Tekla.BIM.Toolkit.Extensions.AsReadOnly``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Gets a read only view of the dictionary.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="instance">The dictionary.</param>
            <returns>
            The read only view of the dictionary.
            </returns>
            <example>
            This example shows how to convert a dictionary into a read only dictionary.
            <code>
            var dictionary = new Dictionary&lt;string, string&gt;
            {
                { "First", "1st" },
                { "Second", "2nd" },
            };
            
            var words = dictionary.AsReadOnly();
            </code>
            </example>
        </member>
        <member name="M:Tekla.BIM.Toolkit.Extensions.AsReadOnly``1(System.Collections.Generic.ISet{``0})">
            <summary>
            Gets a read only view of the set.
            </summary>
            <typeparam name="T">The type of the set element.</typeparam>
            <param name="instance">The set.</param>
            <returns>
            The read only view of the set.
            </returns>
            <example>
            This example shows how to convert a set into a read only set.
            <code>
            var set = new HashSet&lt;int&gt; { 1, 2, 3 };
            
            var numbers = set.AsReadOnly();
            </code>
            </example>
        </member>
        <member name="T:Tekla.BIM.Toolkit.Extensions.SingleBits">
            <summary>
            Provides safe access to the bits of a floating point value.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.Extensions.SingleBits.Value">
            <summary>
            The floating point value.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.Extensions.SingleBits.Bits">
            <summary>
            The bits in the value.
            </summary>
        </member>
        <member name="M:Tekla.BIM.Toolkit.Extensions.SingleBits.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.BIM.Toolkit.Extensions.SingleBits"/> struct.
            </summary>
            <param name="value">The floating point value.</param>
        </member>
        <member name="T:Tekla.BIM.Toolkit.Extensions.DoubleBits">
            <summary>
            Provides safe access to the bits of a floating point value.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.Extensions.DoubleBits.Value">
            <summary>
            The floating point value.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.Extensions.DoubleBits.Bits">
            <summary>
            The bits in the floating point value.
            </summary>
        </member>
        <member name="M:Tekla.BIM.Toolkit.Extensions.DoubleBits.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.BIM.Toolkit.Extensions.DoubleBits"/> struct.
            </summary>
            <param name="value">The floating point value.</param>
        </member>
        <member name="T:Tekla.BIM.Toolkit.EventLogFormatter">
            <summary>
            Provides methods for formatting events in the event log.
            </summary>
        </member>
        <member name="M:Tekla.BIM.Toolkit.EventLogFormatter.Format(System.Object,System.String,System.Object[])">
            <summary>
            Returns a formatted string suitable for the event log.
            </summary>
            <param name="source">The event source. Can be null.</param>
            <param name="format">The format string.</param>
            <param name="data">The formatted data.</param>
            <returns>
            The formatted string.
            </returns>
            <example>
            This example shows how to implement a simple event log.
            <code>
            class ConsoleEventLog : IEventLogWriter
            {
                public void WriteLine(object source, string format, params object[] data)
                {
                    Console.WriteLine(EventLogFormatter.Format(source, format, data));
                }
            }
            </code>
            </example>
        </member>
        <member name="T:Tekla.BIM.Toolkit.DisposableToken">
            <summary>
            Disposable token.
            </summary>
            <example>
            This example shows how to use disposable tokens.
            <code>
            // Subscribe to some observable source. The subscription is cancelled when
            // the returned token is disposed of.
            public IDisposable Subscribe(IObserver observer)
            {
                this.observers.Add(observer);
                
                return new DisposableToken(() => this.observers.Remove(observer));
            }
            </code>
            </example>
        </member>
        <member name="F:Tekla.BIM.Toolkit.DisposableToken.None">
            <summary>
            The default disposable token that does nothing.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.DisposableToken.disposed">
            <summary>
            The delegate to a method that is invoked when the token is disposed of.
            </summary>
        </member>
        <member name="M:Tekla.BIM.Toolkit.DisposableToken.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.BIM.Toolkit.DisposableToken"/> class.
            </summary>
        </member>
        <member name="M:Tekla.BIM.Toolkit.DisposableToken.#ctor(System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.BIM.Toolkit.DisposableToken"/> class.
            </summary>
            <param name="disposed">The delegate to a method that is invoked when the token is disposed of.</param>
        </member>
        <member name="M:Tekla.BIM.Toolkit.DisposableToken.op_Addition(Tekla.BIM.Toolkit.DisposableToken,System.IDisposable)">
            <summary>
            Combines the disposable token with the disposable object.
            </summary>
            <param name="disposableToken">The disposable token.</param>
            <param name="disposable">The disposable object.</param>
            <returns>
            The combined disposable token.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Toolkit.DisposableToken.Dispose">
            <summary>
            Invokes the registered callback.
            </summary>
        </member>
        <member name="T:Tekla.BIM.Toolkit.DisposableTokenBuilder">
            <summary>
            <see cref="T:Tekla.BIM.Toolkit.DisposableToken"/> builder.
            </summary>
            <example>
            This example shows how to build disposable tokens from multiple items.
            <code>
            // Notice how the builder itself is disposed of at the end. This ensures
            // that if one of the operations throws an exception, all objects added
            // so far are also disposed of.
            using(var builder = new DisposableTokenBuilder())
            {
                builder.Add(new SomeDisposableObject());
                builder.Add(new SomeOtherDisposableObject());
            
                // Converts the added objects into a disposable token.
                return builder.ToDisposableToken();
            }
            </code>
            This example shows how to combine two disposable objects into a token.
            <code>
            return new DisposableTokenBuilder { obj1, obj2 }.ToDisposableToken();
            </code>
            </example>
        </member>
        <member name="F:Tekla.BIM.Toolkit.DisposableTokenBuilder.disposables">
            <summary>
            The disposable objects.
            </summary>
        </member>
        <member name="M:Tekla.BIM.Toolkit.DisposableTokenBuilder.Add(System.IDisposable)">
            <summary>
            Adds a disposable object to the token.
            </summary>
            <param name="disposable">The disposable object.</param>
        </member>
        <member name="M:Tekla.BIM.Toolkit.DisposableTokenBuilder.Dispose">
            <summary>
            Releases the resources used by the added objects.
            </summary>
        </member>
        <member name="M:Tekla.BIM.Toolkit.DisposableTokenBuilder.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An enumerator object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Toolkit.DisposableTokenBuilder.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An enumerator object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Toolkit.DisposableTokenBuilder.ToDisposableToken">
            <summary>
            Converts the added objects into a disposable token.
            </summary>
            <returns>
            The disposable token.
            </returns>
        </member>
        <member name="T:Tekla.BIM.Toolkit.HashCode">
            <summary>
            Provides methods for calculating and combining hash codes.
            </summary>
            <remarks>
            This class implements a relatively stable way of combining multiple hash codes.
            </remarks>
            <example>
            This example shows how to calculate the hash code of a 3D vector.
            <code>
            var hashCode = HashCode.GetHashCode(
                vector.X.GetHashCode(),
                vector.Y.GetHashCode(),
                vector.Z.GetHashCode());
            </code>
            </example>
        </member>
        <member name="M:Tekla.BIM.Toolkit.HashCode.GetHashCode(System.Object)">
            <summary>
            Returns a hash code for the specified object.
            </summary>
            <param name="instance">The object instance.</param>
            <returns>
            The hash code.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Toolkit.HashCode.GetHashCode(System.Int32,System.Int32)">
            <summary>
            Returns the combined hash code of the specified hash codes.
            </summary>
            <param name="hash1">The first hash code.</param>
            <param name="hash2">The second hash code.</param>
            <returns>
            The combined hash code.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Toolkit.HashCode.GetHashCode(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the combined hash code of the specified hash codes.
            </summary>
            <param name="hash1">The first hash code.</param>
            <param name="hash2">The second hash code.</param>
            <param name="hash3">The third hash code.</param>
            <returns>
            The combined hash code.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Toolkit.HashCode.GetHashCode(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the combined hash code of the specified hash codes.
            </summary>
            <param name="hash1">The first hash code.</param>
            <param name="hash2">The second hash code.</param>
            <param name="hash3">The third hash code.</param>
            <param name="hash4">The fourth hash code.</param>
            <returns>
            The combined hash code.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Toolkit.HashCode.GetHashCode(System.Int32,System.Int32[])">
            <summary>
            Returns the combined hash code of the specified hash codes.
            </summary>
            <param name="hash">The first hash code.</param>
            <param name="hashes">The other hash codes.</param>
            <returns>
            The combined hash code.
            </returns>
        </member>
        <member name="T:Tekla.BIM.Toolkit.IEventLogWriter">
            <summary>
            Event log writer interface.
            </summary>
        </member>
        <member name="M:Tekla.BIM.Toolkit.IEventLogWriter.WriteLine(System.Object,System.String,System.Object[])">
            <summary>
            Writes an event in the event log.
            </summary>
            <param name="source">The event source. Can be null.</param>
            <param name="format">The format string.</param>
            <param name="data">The formatted data.</param>
        </member>
        <member name="T:Tekla.BIM.Toolkit.NamespaceDoc">
            <summary>
            The Tekla.BIM.Toolkit namespace contains the common tools and utilities for BIM application developers.
            </summary>
        </member>
        <member name="T:Tekla.BIM.Toolkit.ReadOnlySet`1">
            <summary>
            Read only set.
            </summary>
            <typeparam name="T">The type of the set element.</typeparam>
        </member>
        <member name="F:Tekla.BIM.Toolkit.ReadOnlySet`1.set">
            <summary>
            The wrapped set.
            </summary>
        </member>
        <member name="M:Tekla.BIM.Toolkit.ReadOnlySet`1.#ctor(System.Collections.Generic.ISet{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.BIM.Toolkit.ReadOnlySet`1"/> class.
            </summary>
            <param name="set">The wrapped set.</param>
        </member>
        <member name="M:Tekla.BIM.Toolkit.ReadOnlySet`1.Contains(`0)">
            <summary>
            Determines whether the set contains the specified element.
            </summary>
            <param name="item">The element.</param>
            <returns>
            True if the set contains the specified element, otherwise false.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Toolkit.ReadOnlySet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether the set is a proper subset of the specified collection.
            </summary>
            <param name="other">The collection.</param>
            <returns>
            True if the set is a proper subset of the specified collection, otherwise false.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Toolkit.ReadOnlySet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether the set is a proper superset of the specified collection.
            </summary>
            <param name="other">The collection.</param>
            <returns>
            True if the set is a proper superset of the specified collection, otherwise false.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Toolkit.ReadOnlySet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether the set is a subset of the specified collection.
            </summary>
            <param name="other">The collection.</param>
            <returns>
            True if the set is subset of the specified collection, otherwise false.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Toolkit.ReadOnlySet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether the set is a superset of the specified collection.
            </summary>
            <param name="other">The collection.</param>
            <returns>
            True if the set is a superset of the specified collection, otherwise false.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Toolkit.ReadOnlySet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether the set overlaps with the specified collection.
            </summary>
            <param name="other">The collection.</param>
            <returns>
            True if the set overlaps with the specified collection, otherwise false.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Toolkit.ReadOnlySet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether the set contains the same elements as the specified collection.
            </summary>
            <param name="other">The collection.</param>
            <returns>
            True if the set contains the same elements as the specified collection, otherwise false.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Toolkit.ReadOnlySet`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements from the set to the specified array.
            </summary>
            <param name="array">The target array.</param>
            <param name="arrayIndex">The index of the element in the array where to start the copying.</param>
        </member>
        <member name="M:Tekla.BIM.Toolkit.ReadOnlySet`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An enumerator object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Toolkit.ReadOnlySet`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An enumerator object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Toolkit.ReadOnlySet`1.System#Collections#Generic#ICollection{T}#Clear">
            <summary>
            Removes all items from the set.
            </summary>
            <exception cref="T:System.NotSupportedException">The set is read-only.</exception>
        </member>
        <member name="M:Tekla.BIM.Toolkit.ReadOnlySet`1.System#Collections#Generic#ICollection{T}#Add(`0)">
            <summary>
            Adds an item to the set.
            </summary>
            <param name="item">The item.</param>
            <exception cref="T:System.NotSupportedException">The set is read-only.</exception>
        </member>
        <member name="M:Tekla.BIM.Toolkit.ReadOnlySet`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the set.
            </summary>
            <param name="item">The object to remove from the set.</param>
            <returns>
            True if the item was removed, otherwise false.
            </returns>
            <exception cref="T:System.NotSupportedException">The set is read-only.</exception>
        </member>
        <member name="M:Tekla.BIM.Toolkit.ReadOnlySet`1.System#Collections#Generic#ISet{T}#Add(`0)">
            <summary>
            Adds an item to the current set and returns a value to indicate if the element was successfully added.
            </summary>
            <param name="item">The item.</param>
            <returns>
            True if the item was added, otherwise false.
            </returns>
            <exception cref="T:System.NotSupportedException">The set is read-only.</exception>
        </member>
        <member name="M:Tekla.BIM.Toolkit.ReadOnlySet`1.System#Collections#Generic#ISet{T}#ExceptWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Removes all elements in the specified collection from the current set.
            </summary>
            <param name="other">The collection.</param>
            <exception cref="T:System.NotSupportedException">The set is read-only.</exception>
        </member>
        <member name="M:Tekla.BIM.Toolkit.ReadOnlySet`1.System#Collections#Generic#ISet{T}#IntersectWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Modifies the current set so that it contains only elements that are also in a specified collection.
            </summary>
            <param name="other">The collection.</param>
            <exception cref="T:System.NotSupportedException">The set is read-only.</exception>
        </member>
        <member name="M:Tekla.BIM.Toolkit.ReadOnlySet`1.System#Collections#Generic#ISet{T}#SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Modifies the current set so that it contains only elements that are present either in the current set or in the specified collection, but not both.
            </summary>
            <param name="other">The collection.</param>
            <exception cref="T:System.NotSupportedException">The set is read-only.</exception>
        </member>
        <member name="M:Tekla.BIM.Toolkit.ReadOnlySet`1.System#Collections#Generic#ISet{T}#UnionWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Modifies the current set so that it contains all elements that are present in both the current set and in the specified collection.
            </summary>
            <param name="other">The collection.</param>
            <exception cref="T:System.NotSupportedException">The set is read-only.</exception>
        </member>
        <member name="P:Tekla.BIM.Toolkit.ReadOnlySet`1.Count">
            <summary>
            Gets the number of elements in the set.
            </summary>
            <value>
            The number of elements in the set.
            </value>
        </member>
        <member name="P:Tekla.BIM.Toolkit.ReadOnlySet`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
            <summary>
            Gets a value indicating whether the set is read only.
            </summary>
            <returns>
            Always true.
            </returns>
        </member>
        <member name="T:Tekla.BIM.Toolkit.RGBA">
            <summary>
            Color that contains the red, green, blue and alpha values.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.Transparent">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.AliceBlue">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.AntiqueWhite">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.Aqua">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.Aquamarine">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.Azure">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.Beige">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.Bisque">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.Black">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.BlanchedAlmond">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.Blue">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.BlueViolet">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.Brown">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.Burlywood">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.CadetBlue">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.Chartreuse">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.Chocolate">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.Coral">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.Cornflower">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.Cornsilk">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.Crimson">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.Cyan">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.DarkBlue">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.DarkCyan">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.DarkGoldenrod">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.DarkGray">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.DarkGreen">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.DarkKhaki">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.DarkMagenta">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.DarkOliveGreen">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.DarkOrange">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.DarkOrchid">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.DarkRed">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.DarkSalmon">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.DarkSeaGreen">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.DarkSlateBlue">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.DarkSlateGray">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.DarkTurquoise">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.DarkViolet">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.DeepPink">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.DeepSkyBlue">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.DimGray">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.DodgerBlue">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.Firebrick">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.FloralWhite">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.ForestGreen">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.Fuchsia">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.Gainsboro">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.GhostWhite">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.Gold">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.Goldenrod">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.Gray">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.Green">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.GreenYellow">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.Honeydew">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.HotPink">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.IndianRed">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.Indigo">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.Ivory">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.Khaki">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.Lavender">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.LavenderBlush">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.LawnGreen">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.LaserLemon">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.LemonChiffon">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.LightBlue">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.LightCoral">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.LightCyan">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.LightGoldenrod">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.LightGray">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.LightGreen">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.LightPink">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.LightSalmon">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.LightSeaGreen">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.LightSkyBlue">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.LightSlateGray">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.LightSteelBlue">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.LightYellow">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.Lime">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.LimeGreen">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.Linen">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.Magenta">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.Maroon">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.MediumAquamarine">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.MediumBlue">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.MediumOrchid">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.MediumPurple">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.MediumSeaGreen">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.MediumSlateBlue">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.MediumSpringGreen">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.MediumTurquoise">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.MediumVioletRed">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.MidnightBlue">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.MintCream">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.MistyRose">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.Moccasin">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.NavajoWhite">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.Navy">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.OldLace">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.Olive">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.OliveDrab">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.Orange">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.OrangeRed">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.Orchid">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.PaleGoldenrod">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.PaleGreen">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.PaleTurquoise">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.PaleVioletRed">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.PapayaWhip">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.PeachPuff">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.Peru">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.Pink">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.Plum">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.PowderBlue">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.Purple">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.Red">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.RosyBrown">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.RoyalBlue">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.SaddleBrown">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.Salmon">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.SandyBrown">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.SeaGreen">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.Seashell">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.Sienna">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.Silver">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.SkyBlue">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.SlateBlue">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.SlateGray">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.Snow">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.SpringGreen">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.SteelBlue">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.Tan">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.Teal">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.Thistle">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.Tomato">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.Turquoise">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.Violet">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.Wheat">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.White">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.WhiteSmoke">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.Yellow">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="F:Tekla.BIM.Toolkit.RGBA.YellowGreen">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="M:Tekla.BIM.Toolkit.RGBA.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.BIM.Toolkit.RGBA"/> struct. Alpha
            component is set to 255 thus giving 100% opaque color.
            </summary>
            <param name="r">The red component.</param>
            <param name="g">The green component.</param>
            <param name="b">The blue component.</param>
        </member>
        <member name="M:Tekla.BIM.Toolkit.RGBA.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.BIM.Toolkit.RGBA"/> struct.
            </summary>
            <param name="r">The red component.</param>
            <param name="g">The green component.</param>
            <param name="b">The blue component.</param>
            <param name="a">The alpha component.</param>
        </member>
        <member name="M:Tekla.BIM.Toolkit.RGBA.op_Equality(Tekla.BIM.Toolkit.RGBA,Tekla.BIM.Toolkit.RGBA)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="a">The left hand side operand.</param>
            <param name="b">The right hand side operand.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Toolkit.RGBA.op_Inequality(Tekla.BIM.Toolkit.RGBA,Tekla.BIM.Toolkit.RGBA)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="a">The left hand side operand.</param>
            <param name="b">The right hand side operand.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Toolkit.RGBA.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            The 32 bit hash code for the object.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Toolkit.RGBA.Equals(System.Object)">
            <summary>
            Determines whether the objects are equal.
            </summary>
            <param name="other">The object to test.</param>
            <returns>
            True if objects are equal, otherwise false.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Toolkit.RGBA.Equals(Tekla.BIM.Toolkit.RGBA)">
            <summary>
            Determines whether the objects are equal.
            </summary>
            <param name="other">The object to test.</param>
            <returns>
            True if objects are equal, otherwise false.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Toolkit.RGBA.ToString">
            <summary>
            Returns a string representation of the object.
            </summary>
            <returns>
            The string representation of the object.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Toolkit.RGBA.System#Xml#Serialization#IXmlSerializable#GetSchema">
            <summary>
            This method is reserved and should not be used.
            </summary>
            <returns>
            Always null.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Toolkit.RGBA.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized.</param>
        </member>
        <member name="M:Tekla.BIM.Toolkit.RGBA.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized.</param>
        </member>
        <member name="P:Tekla.BIM.Toolkit.RGBA.R">
            <summary>
            Gets the red component.
            </summary>
            <value>
            The red component.
            </value>
        </member>
        <member name="P:Tekla.BIM.Toolkit.RGBA.G">
            <summary>
            Gets the green component.
            </summary>
            <value>
            The green component.
            </value>
        </member>
        <member name="P:Tekla.BIM.Toolkit.RGBA.B">
            <summary>
            Gets the blue component.
            </summary>
            <value>
            The blue component.
            </value>
        </member>
        <member name="P:Tekla.BIM.Toolkit.RGBA.A">
            <summary>
            Gets the alpha component.
            </summary>
            <value>
            The alpha component.
            </value>
        </member>
        <member name="T:Tekla.BIM.Toolkit.SerializableDictionary">
            <summary>
            String dictionary that supports serialization as XML.
            </summary>
            <example>
            This example shows how to store a string dictionary in an XML file.
            <code>
            public class MyObject
            {
                public SerializableDictionary Settings { get; set; }
            }
            
            // Load
            using (var stream = File.OpenRead("MyObject.xml"))
            {
                var myObject = stream.ReadXml&lt;MyObject&gt;();
            }
            
            // Save
            using (var stream = File.Create("MyObject.xml"))
            {
                myObject = new MyObject
                {
                    Settings = new SerializableDictionary
                    {
                        { "MySetting", "My value" },
                    }
                };
                
                stream.WriteXml(myObject);
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.BIM.Toolkit.SerializableDictionary.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.BIM.Toolkit.SerializableDictionary"/> class.
            </summary>
        </member>
        <member name="M:Tekla.BIM.Toolkit.SerializableDictionary.GetSchema">
            <summary>
            This method is reserved and should not be used.
            </summary>
            <returns>
            Always null.
            </returns>
        </member>
        <member name="M:Tekla.BIM.Toolkit.SerializableDictionary.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized.</param>
        </member>
        <member name="M:Tekla.BIM.Toolkit.SerializableDictionary.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized.</param>
        </member>
    </members>
</doc>
