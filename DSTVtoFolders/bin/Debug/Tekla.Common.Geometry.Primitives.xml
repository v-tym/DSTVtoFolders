<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Tekla.Common.Geometry.Primitives</name>
    </assembly>
    <members>
        <member name="T:Tekla.Common.Geometry.Triangle2">
            <summary>
            2D triangle, represented as an array of three vertices, V0, V1, V2.
            </summary>
        </member>
        <member name="M:Tekla.Common.Geometry.Triangle2.#ctor(Tekla.Common.Geometry.Vector2,Tekla.Common.Geometry.Vector2,Tekla.Common.Geometry.Vector2)">
            <summary>
            Initializes a new instance of the Triangle2 struct.
            </summary>
            <param name="vector0">Vertex point V0</param>
            <param name="vector1">Vertex point V1</param>
            <param name="vector2">Vertex point V2</param>
        </member>
        <member name="M:Tekla.Common.Geometry.Triangle2.Equals(System.Object)">
            <summary>
            Tests for the exact equality of two triangles
            </summary>
            <param name="obj">The object to compare to</param>
            <returns>TRUE if triangles are equal, FALSE if not</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Triangle2.Equals(Tekla.Common.Geometry.Triangle2)">
            <summary>
            Tests for the exact equality of two triangles
            </summary>
            <param name="other">The triangle to compare to</param>
            <returns>TRUE if triangles are equal, FALSE if not</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Triangle2.GetHashCode">
            <summary>
            Returns a hash code for triangle
            </summary>
            <returns>The hash code</returns>
        </member>
        <member name="P:Tekla.Common.Geometry.Triangle2.V0">
            <summary>
            Gets vertex point V0
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.Triangle2.V1">
            <summary>
            Gets vertex point V1
            </summary>        
        </member>
        <member name="P:Tekla.Common.Geometry.Triangle2.V2">
            <summary>
            Gets vertex point V2
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.Triangle2.Item(System.Int32)">
            <summary>
            Gets or sets the vertex point specified by the index
            </summary>
            <param name="index">Identiefies the vertex point to get or set, 
            0 (for V0), 1 (for V1) or 2 (for V2).</param>
            <returns>Returns vertex point coordinates</returns>
        </member>
        <member name="T:Tekla.Common.Geometry.Matrix3">
            <summary>
            3x3 matrix containing three 3D vectors, 
            each vector stored in a column
            </summary>
        </member>
        <member name="M:Tekla.Common.Geometry.Matrix3.#ctor(Tekla.Common.Geometry.Vector3,Tekla.Common.Geometry.Vector3,Tekla.Common.Geometry.Vector3)">
            <summary>
            Initializes a new instance of the Matrix3 struct based on vector input
            </summary>
            <param name="column0">A <c>Vector3</c> type vector 
            (the first column of the matrix)</param>
            <param name="column1">A <c>Vector3</c> type vector 
            (the second column of the matrix)</param>
            <param name="column2">A <c>Vector3</c> type vector 
            (the third column of the matrix)</param>
        </member>
        <member name="M:Tekla.Common.Geometry.Matrix3.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the Matrix3 struct,
            a diagonal matrix. Provide the diagonal entries as 
            parameters.
            </summary>
            <param name="entry00">Entry (0,0)</param>
            <param name="entry11">Entry (1,1)</param>
            <param name="entry22">Entry (2,2)</param>
        </member>
        <member name="M:Tekla.Common.Geometry.Matrix3.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the Matrix3 struct for private use.
            </summary>
            <param name="m00">The M00.</param>
            <param name="m01">The M01.</param>
            <param name="m02">The M02.</param>
            <param name="m10">The M10.</param>
            <param name="m11">The M11.</param>
            <param name="m12">The M12.</param>
            <param name="m20">The M20.</param>
            <param name="m21">The M21.</param>
            <param name="m22">The M22.</param>
        </member>
        <member name="M:Tekla.Common.Geometry.Matrix3.op_Addition(Tekla.Common.Geometry.Matrix3,Tekla.Common.Geometry.Matrix3)">
            <summary>
            Addition of matrices
            </summary>
            <param name="left">Left operand</param>
            <param name="right">Right operand</param>
            <returns>The sum matrix</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Matrix3.op_Subtraction(Tekla.Common.Geometry.Matrix3,Tekla.Common.Geometry.Matrix3)">
            <summary>
            Subtraction of matrices
            </summary>
            <param name="left">A <c>Matrix3</c> type matrix</param>
            <param name="right">A <c>Matrix3</c> type matrix, the subtractor</param>
            <returns>The subtraction matrix</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Matrix3.op_Multiply(Tekla.Common.Geometry.Matrix3,Tekla.Common.Geometry.Matrix3)">
            <summary>
            Multiplication of matrices
            </summary>
            <param name="left">Left operand</param>
            <param name="right">Right operand</param>
            <returns>The product matrix</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Matrix3.op_Multiply(System.Double,Tekla.Common.Geometry.Matrix3)">
            <summary>
            Multiplies the given matrix by a scalar multiplier,
            each entry multiplied with the scalar
            </summary>
            <param name="scalar">A double multiplier</param>
            <param name="matrix">A <c>Matrix3</c> type matrix</param>
            <returns>The product matrix</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Matrix3.op_Multiply(Tekla.Common.Geometry.Matrix3,System.Double)">
            <summary>
            Multiplies the given matrix by a scalar multiplier,
            each entry multiplied with the scalar
            </summary>
            <param name="matrix">A <c>Matrix3</c> type matrix</param>
            <param name="scalar">A double multiplier</param>
            <returns>The product matrix</returns>        
        </member>
        <member name="M:Tekla.Common.Geometry.Matrix3.op_Division(Tekla.Common.Geometry.Matrix3,System.Double)">
            <summary>
            Divides the given matrix with a scalar divider,
            each entry divided with the scalar
            </summary>
            <param name="matrix">A <c>Matrix3</c> type matrix</param>
            <param name="scalar">A scalar divider</param>
            <returns>The result matrix</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Matrix3.op_Multiply(Tekla.Common.Geometry.Matrix3,Tekla.Common.Geometry.Vector3)">
            <summary>
            Multiplication of a <c>Matrix3</c> matrix and a <c>Vector3</c> vector 
            </summary>
            <param name="matrix">A <c>Matrix3</c> type matrix</param>
            <param name="vector">A <c>Vector3</c> type vector</param>
            <returns>The product vector of <c>Vector3</c> type</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Matrix3.SetColumn(System.Int32,Tekla.Common.Geometry.Vector3)">
            <summary>
            Sets the column specified by the index
            </summary>
            <param name="index">Column index</param>
            <param name="column">Column values</param>
        </member>
        <member name="M:Tekla.Common.Geometry.Matrix3.GetColumn(System.Int32)">
            <summary>
            Gets the column specified by the index
            </summary>
            <param name="index">Column index</param>
            <returns>Column value</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Matrix3.Equals(System.Object)">
            <summary>
            Tests for the exact equality of two matrices
            </summary>
            <param name="obj">The object to compare to</param>
            <returns>TRUE if matrices are equal, FALSE if not</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Matrix3.Equals(Tekla.Common.Geometry.Matrix3)">
            <summary>
            Tests for the exact equality of two matrices
            </summary>
            <param name="other">The matrix to compare to</param>
            <returns>TRUE if matrices are equal, FALSE if not</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Matrix3.GetHashCode">
            <summary>
            Returns a hash code for matrix
            </summary>
            <returns>The hash code</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Matrix3.Transpose">
            <summary>
            Returns the transpose of this matrix.
            The transpose matrix contains the columns of this matrix
            turned into rows.
            </summary>
            <returns>Transpose matrix</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Matrix3.Inverse">
            <summary>
            Returns the inverse of this matrix.
            The original matrix <c>M</c> and the inverse matrix <c>M*</c>
            fulfill the equation <c>MM* = I</c> (<c>I</c> is identity matrix).
            </summary>
            <returns>Inverse matrix</returns>        
        </member>
        <member name="M:Tekla.Common.Geometry.Matrix3.Adjoint">
            <summary>
            Returns the adjugate of this matrix 
            (also referred to as the classical adjoint)
            </summary>
            <returns>Adjugate matrix</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Matrix3.Determinant">
            <summary>
            Determinant of this matrix
            </summary>
            <returns>Determinant value</returns>        
        </member>
        <member name="P:Tekla.Common.Geometry.Matrix3.Zero">
            <summary>
            Gets a 3x3 zero matrix.
            This is an easy way to create an empty matrix which 
            you can then fill later.
            </summary>
            <example>
            <code> 
            Matrix3 matrix = Matrix3.Zero; 
            matrix[0,0] = 1; 
            matrix[0,1] = 2;
            matrix[0,2] = 3;
            matrix[1,0] = 4;
            ...
            </code>
            </example>
        </member>
        <member name="P:Tekla.Common.Geometry.Matrix3.Identity">
            <summary>
            Gets a 3x3 identity matrix
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.Matrix3.Column0">
            <summary>
            Gets the vector in the first column
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.Matrix3.Column1">
            <summary>
            Gets the vector in the second column
            </summary>       
        </member>
        <member name="P:Tekla.Common.Geometry.Matrix3.Column2">
            <summary>
            Gets the vector in the third column
            </summary>        
        </member>
        <member name="P:Tekla.Common.Geometry.Matrix3.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets the matrix entry specified 
            by the row and column indices. 
            </summary>
            <param name="rowIndex">Row index, 0, 1, or 2</param>
            <param name="columnIndex">Column index, 0, 1, or 2</param>
            <returns>The get operation returns the requested entry</returns>
        </member>
        <member name="T:Tekla.Common.Geometry.Vector4">
            <summary>
            4D vector or point
            </summary>
        </member>
        <member name="F:Tekla.Common.Geometry.Vector4.x">
            <summary>
            Backing field for property X
            </summary>
        </member>
        <member name="F:Tekla.Common.Geometry.Vector4.y">
            <summary>
            Backing field for property Y
            </summary>
        </member>
        <member name="F:Tekla.Common.Geometry.Vector4.z">
            <summary>
            Backing field for property Z
            </summary>
        </member>
        <member name="F:Tekla.Common.Geometry.Vector4.w">
            <summary>
            Backing field for property W
            </summary>
        </member>
        <member name="M:Tekla.Common.Geometry.Vector4.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the Vector4 struct
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
            <param name="z">Z coordinate</param>
            <param name="w">W coordinate</param>
        </member>
        <member name="M:Tekla.Common.Geometry.Vector4.op_Addition(Tekla.Common.Geometry.Vector4,Tekla.Common.Geometry.Vector4)">
            <summary>
             The vector addition operator. The + operator returns a new vector of 
             <c>Vector4</c> type, the sum of two given vectors
            </summary>
            <param name="left">The first vector to sum</param>
            <param name="right">The second vector to sum</param>
            <returns>The sum vector</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Vector4.op_Subtraction(Tekla.Common.Geometry.Vector4,Tekla.Common.Geometry.Vector4)">
            <summary>
             The vector subtraction operator. The - operator returns a new vector of 
             <c>Vector4</c> type, the remainder of given two vectors.
            </summary>
            <param name="left">The minuend vector</param>
            <param name="right">The subtracter vector, 
            coordinate values will be subtracted from the minuend vector</param>
            <returns>The remainder vector of parameter vectors</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Vector4.op_Multiply(Tekla.Common.Geometry.Vector4,System.Double)">
            <summary>
            The multiplier operation * multiplies the given vector 
            with the given double multiplier (each coordinate component is 
            multiplied with this number)
            </summary>
            <param name="vector">A vector of the <c>Vector4</c> type</param>
            <param name="scalar">The multiplier</param>
            <returns>A <c>Vector4</c> type vector</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Vector4.op_Multiply(System.Double,Tekla.Common.Geometry.Vector4)">
            <summary>
            The multiplier operation * multiplies the given vector 
            with the given double multiplier (each coordinate component is 
            multiplied with this number)
            </summary>
            <param name="scalar">The multiplier</param>
            <param name="vector">A vector of the <c>Vector3</c> type</param>
            <returns>A <c>Vector4</c> type vector</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Vector4.op_Multiply(Tekla.Common.Geometry.Vector4,Tekla.Common.Geometry.Vector4)">
            <summary>
            The multiplier operation * multiplies the given vectors and returns the component wise result. 
            </summary>
            <param name="left">The left vector.</param>
            <param name="right">The right vector.</param>
            <returns>
            The result of the multiplication operation as <c>Vector4</c>.
            </returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Vector4.op_Division(Tekla.Common.Geometry.Vector4,System.Double)">
            <summary>
            The division operator / divides each coordinate with
            the given double number
            </summary>
            <param name="vector">A vector of the <c>Vector3</c> type</param>
            <param name="scalar">A double divisor</param>
            <returns>A <c>Vector4</c> type vector</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Vector4.op_Division(Tekla.Common.Geometry.Vector4,Tekla.Common.Geometry.Vector4)">
            <summary>
            Divides the components of a vector by the components of the other vector.
            </summary>
            <param name="left">A vector of the <c>Vector3</c> type</param>
            <param name="right">The other vector.</param>
            <returns>
            A <c>Vector3</c> containing the result of division operation.
            </returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Vector4.op_UnaryNegation(Tekla.Common.Geometry.Vector4)">
            <summary>
             Returns a vector pointing in the opposite direction.
            </summary>
            <param name="vector">Source vector.</param>
            <returns>Vector pointing in the opposite direction.</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Vector4.Dot(Tekla.Common.Geometry.Vector4)">
            <summary>
            Dot product (or the scalar product) of the given vector and this vector
            </summary>
            <param name="vector">A vector of the <c>Vector3</c> type</param>
            <returns>Dot product value</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Vector4.Equals(System.Object)">
            <summary>
            Tests for the exact equality of two vectors
            </summary>
            <param name="obj">Object to compare to</param>
            <returns>TRUE if vectors are equal, FALSE if not</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Vector4.Equals(Tekla.Common.Geometry.Vector4)">
            <summary>
            Tests for the exact equality of two vectors
            </summary>
            <param name="other">Object to compare to</param>
            <returns>TRUE if vectors are equal, FALSE if not</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Vector4.GetHashCode">
            <summary>
            Returns a hash code for vector.
            </summary>
            <returns>The hash code</returns>
        </member>
        <member name="P:Tekla.Common.Geometry.Vector4.Zero">
            <summary>
            Gets zero 4D Vector {0, 0, 0, 0}
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.Vector4.UnitX">
            <summary>
            Gets axel X 4D unit vector {1, 0, 0, 0}
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.Vector4.UnitY">
            <summary>
            Gets axel Y 4D unit vector {0, 1, 0, 0}
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.Vector4.UnitZ">
            <summary>
            Gets axel Z 4D unit vector {0, 0, 1, 0}
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.Vector4.UnitW">
            <summary>
            Gets axel W 4D unit vector {0, 0, 0, 1}
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.Vector4.One">
            <summary>
            Gets 4D unit vector {1, 1, 1, 1}
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.Vector4.MinValue">
            <summary>
            Gets 4D Vector {double.MinValue, double.MinValue, double.MinValue, double.MinValue}
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.Vector4.MaxValue">
            <summary>
            Gets 4D Vector {double.MaxValue, double.MaxValue, double.MaxValue, double.MaxValue}
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.Vector4.X">
            <summary>
            Gets or sets the x coordinate
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.Vector4.Y">
            <summary>
            Gets or sets the y coordinate
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.Vector4.Z">
            <summary>
            Gets or sets the z coordinate
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.Vector4.W">
            <summary>
            Gets or sets the w coordinate
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.Vector4.Length">
            <summary>
            Gets the length of the 4D vector
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.Vector4.SquaredLength">
            <summary>
            Gets the square of the length of the 4D vector
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.Vector4.Item(System.Int32)">
            <summary>Gets or sets the component specified by the index (X, Y, Z or W)</summary>
            <param name="index">
              Index for component wise access, 0 = X, 1 = Y, 2 = Z, 3 = W
            </param>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
              if <paramref name="index"/> is not <c>0, 1, 2 or 3</c>
            </exception>
            <returns>the component specified by the index</returns>
        </member>
        <member name="T:Tekla.Common.Geometry.Matrix2">
            <summary>
            2x2 matrix, contains two vectors, one in each column
            </summary>
        </member>
        <member name="M:Tekla.Common.Geometry.Matrix2.#ctor(Tekla.Common.Geometry.Vector2,Tekla.Common.Geometry.Vector2)">
            <summary>
            Initializes a new instance of the Matrix2 struct.
            </summary>
            <param name="column0">The first column as <c>Vector2</c></param>
            <param name="column1">The second column as <c>Vector2</c></param>
        </member>
        <member name="M:Tekla.Common.Geometry.Matrix2.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the Matrix2 struct with
            a diagonal matrix.
            </summary>
            <param name="entry00">Entry (0,0)</param>
            <param name="entry11">Entry (1,1)</param>
        </member>
        <member name="M:Tekla.Common.Geometry.Matrix2.op_Addition(Tekla.Common.Geometry.Matrix2,Tekla.Common.Geometry.Matrix2)">
            <summary>
            Addition of matrices
            </summary>
            <param name="left">Left operand</param>
            <param name="right">Right operand</param>
            <returns>The sum matrix of the parameter matrices</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Matrix2.op_Subtraction(Tekla.Common.Geometry.Matrix2,Tekla.Common.Geometry.Matrix2)">
            <summary>
            Subtraction of matrices
            </summary>
            <param name="left">A <c>Matrix2</c> type matrix</param>
            <param name="right">The subtracter, a <c>Matrix2</c> type matrix, </param>
            <returns>The subtraction matrix</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Matrix2.op_Multiply(Tekla.Common.Geometry.Matrix2,Tekla.Common.Geometry.Matrix2)">
            <summary>
            Multiplication of two matrices
            </summary>
            <param name="left">A <c>Matrix2</c> type matrix, on the left side</param>
            <param name="right">A <c>Matrix2</c> type matrix, on the right side</param>
            <returns>The product matrix</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Matrix2.op_Multiply(System.Double,Tekla.Common.Geometry.Matrix2)">
            <summary>
            Multiplies the given matrix by a scalar multiplier.
            Multiplies each matrix entry.
            </summary>
            <param name="scalar">A double multiplier</param>
            <param name="matrix">A <c>Matrix2</c> type matrix</param>
            <returns>The product matrix</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Matrix2.op_Multiply(Tekla.Common.Geometry.Matrix2,System.Double)">
            <summary>
            Multiplies the given matrix by a scalar multiplier.
            Multiplies each matrix entry.
            </summary>
            <param name="matrix">A <c>Matrix2</c> type matrix</param>
            <param name="scalar">A <c>double</c> type multiplier</param>
            <returns>The product matrix</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Matrix2.op_Multiply(Tekla.Common.Geometry.Matrix2,Tekla.Common.Geometry.Vector2)">
            <summary>
            Multiplication of a <c>Matrix2</c> matrix and a <c>Vector2</c> vector 
            </summary>
            <param name="matrix">A <c>Matrix2</c> type matrix</param>
            <param name="vector">A <c>Vector2</c> type vector</param>
            <returns>The product vector of <c>Vector3</c> type</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Matrix2.op_Division(Tekla.Common.Geometry.Matrix2,System.Double)">
            <summary>
            Divides the given matrix with a scalar divider.
            Divides each matrix entry.
            </summary>
            <param name="matrix">A <c>Matrix2</c> type matrix</param>
            <param name="scalar">A <c>double</c> type divider</param>
            <returns>The result</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Matrix2.GetColumn(System.Int32)">
            <summary>
            Returns the column specified by the <c>index</c> parameter
            </summary>
            <param name="index">Column index, 0 or 1</param>
            <returns>A <c>Vector2</c> type vector</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Matrix2.Equals(System.Object)">
            <summary>
            Tests for the exact equality of two matrices
            </summary>
            <param name="obj">The objecy to compare to</param>
            <returns>TRUE if the matrices are equal, FALSE if not</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Matrix2.Equals(Tekla.Common.Geometry.Matrix2)">
            <summary>
            Tests for the exact equality of two matrices
            </summary>
            <param name="other">A <c>Matrix2</c> type matrix to compare to</param>
            <returns>TRUE if the matrices are equal, FALSE if not</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Matrix2.GetHashCode">
            <summary>
            Returns a hash code for matrix
            </summary>
            <returns>The hash code</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Matrix2.Transpose">
            <summary>
            Returns the transpose of this matrix.
            The transpose matrix contains the columns of this matrix
            turned into rows.
            </summary>
            <returns>Transpose matrix</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Matrix2.Inverse">
            <summary>
            Returns the inverse of this matrix.
            The original matrix <c>M</c> and the inverse matrix <c>M*</c>
            fulfill the equation <c>MM* = I</c> (<c>I</c> is identity matrix).
            </summary>
            <returns>Inverse matrix</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Matrix2.Adjoint">
            <summary>
            Returns the adjugate of this matrix 
            (also referred to as the classical adjoint).
            <para></para>
            If original matrix is 
            <table border="0">
            <tr>
            <td rowspan="2">(</td>
            <td>a</td>
            <td>b</td>
            <td rowspan="2">)</td>
            </tr>
            <tr>
            <td>c</td>
            <td>d</td>
            </tr> 
            </table>
            <para></para>
            then the adjugate is 
            <table  border="0">
            <tr>
            <td rowspan="2">(</td>
            <td>d</td>
            <td>-b</td>
            <td rowspan="2">)</td>
            </tr>
            <tr>
            <td>-c</td><td>a</td>
            </tr> 
            </table> 
            </summary>
            <returns>Adjugate matrix</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Matrix2.Determinant">
            <summary>
            Determinant of this matrix
            </summary>
            <returns>Determinant value</returns>
        </member>
        <member name="P:Tekla.Common.Geometry.Matrix2.Zero">
            <summary>
            Gets a 2x2 zero matrix.
            This is an easy way to create an empty matrix which 
            you can then fill later.
            </summary>
            <example>
            <code> 
            Matrix2 matrix = Matrix2.Zero; 
            matrix[0,0] = 1; 
            matrix[0,1] = 2;
            matrix[1,0] = 3;
            matrix[1,1] = 4;
            </code>
            </example>
        </member>
        <member name="P:Tekla.Common.Geometry.Matrix2.Identity">
            <summary>
            Gets a 2x2 identity matrix
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.Matrix2.Column0">
            <summary>
            Gets the vector in the first column of the matrix
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.Matrix2.Column1">
            <summary>
            Gets the vector in the second column of the matrix
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.Matrix2.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets the matrix entry specified by the row and column index parameters.
            The row index of the entries on the first row is 0,
            the second row is 1.
            The column index of the entries on the first column is 0,
            the second column is 1.
            Indices (0,0) refer to the first entry of the matrix and so on.
            </summary>
            <param name="rowIndex">Row index, 0 or 1</param>
            <param name="columnIndex">Column index, 0 or 1</param>
            <returns>The get operation returns the requested entry</returns>
        </member>
        <member name="T:Tekla.Common.Geometry.Vector3">
            <summary>
            3D Vector or point
            </summary>
        </member>
        <member name="F:Tekla.Common.Geometry.Vector3.x">
            <summary>
            backing field for property X
            </summary>
        </member>
        <member name="F:Tekla.Common.Geometry.Vector3.y">
            <summary>
            backing field for property Y
            </summary>
        </member>
        <member name="F:Tekla.Common.Geometry.Vector3.z">
            <summary>
            backing field for property Z
            </summary>
        </member>
        <member name="M:Tekla.Common.Geometry.Vector3.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the Vector3 struct.
            </summary>
            <param name="x">The x coordinate</param>
            <param name="y">The y coordinate</param>
            <param name="z">The z coordinate</param>
        </member>
        <member name="M:Tekla.Common.Geometry.Vector3.Min(Tekla.Common.Geometry.Vector3,Tekla.Common.Geometry.Vector3)">
            <summary>
            Returns a vector that contains the highest value from each matching pair of components.
            </summary>
            <param name="value1">First source vector.</param>
            <param name="value2">Second source vector.</param>
            <returns>The minimium value of the vectors.</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Vector3.Max(Tekla.Common.Geometry.Vector3,Tekla.Common.Geometry.Vector3)">
            <summary>
            Returns a vector that contains the lowest value from each matching pair of components.
            </summary>
            <param name="value1">First source vector.</param>
            <param name="value2">Second source vector.</param>
            <returns>The minimium value of the vectors.</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Vector3.op_Addition(Tekla.Common.Geometry.Vector3,Tekla.Common.Geometry.Vector3)">
            <summary>
             The vector addition operator. The + operator returns a new vector of the 
             <c>Vector3</c> type, the sum of two given vectors
            </summary>
            <param name="left">The first vector to sum</param>
            <param name="right">The second vector to sum</param>
            <returns>The sum vector</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Vector3.op_Subtraction(Tekla.Common.Geometry.Vector3,Tekla.Common.Geometry.Vector3)">
            <summary>
             The vector subtraction operator. The - operator returns a new vector of 
             <c>Vector3</c> type, the remainder of given two vectors.
            </summary>
            <param name="left">The minuend vector</param>
            <param name="right">The subtracter vector, 
            coordinate values will be subtracted from the minuend vector</param>
            <returns>The remainder vector of parameter vectors</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Vector3.op_Multiply(Tekla.Common.Geometry.Vector3,System.Double)">
            <summary>
            The multiplier operation * multiplies the given vector 
            with the given double multiplier (each coordinate component is 
            multiplied with this number)
            </summary>
            <param name="vector">A vector of the <c>Vector3</c> type</param>
            <param name="scalar">The multiplier</param>
            <returns>A <c>Vector3</c> type vector</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Vector3.op_Multiply(System.Double,Tekla.Common.Geometry.Vector3)">
            <summary>
            The multiplier operation * multiplies the given vector 
            with the given double multiplier (each coordinate is 
            multiplied with this number)
            </summary>
            <param name="scalar">The multiplier</param>
            <param name="vector">A vector of the <c>Vector3</c> type</param>
            <returns>A <c>Vector3</c> type vector</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Vector3.op_Multiply(Tekla.Common.Geometry.Vector3,Tekla.Common.Geometry.Vector3)">
            <summary>
            The multiplier operation * multiplies the given vectors and returns the component wise result. 
            </summary>
            <param name="left">The left vector.</param>
            <param name="right">The right vector.</param>
            <returns>
            The result of the multiplication operation as <c>Vector3</c>.
            </returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Vector3.op_UnaryNegation(Tekla.Common.Geometry.Vector3)">
            <summary>
             Returns a vector pointing in the opposite direction.
            </summary>
            <param name="vector">Source vector.</param>
            <returns>Vector pointing in the opposite direction.</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Vector3.op_Division(Tekla.Common.Geometry.Vector3,System.Double)">
            <summary>
            The division operator / divides each coordinate with
            the given double number
            </summary>
            <param name="vector">A vector of the <c>Vector3</c> type</param>
            <param name="scalar">A double divisor</param>
            <returns>A <c>Vector3</c> type vector</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Vector3.op_Division(Tekla.Common.Geometry.Vector3,Tekla.Common.Geometry.Vector3)">
            <summary>
            Divides the components of a vector by the components of the other vector.
            </summary>
            <param name="left">A vector of the <c>Vector3</c> type</param>
            <param name="right">The other vector.</param>
            <returns>
            A <c>Vector3</c> containing the result of division operation.
            </returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Vector3.Dot(Tekla.Common.Geometry.Vector3)">
            <summary>
            Dot product (or the scalar product) of the given vector and this vector
            </summary>
            <param name="vector">A vector of the <c>Vector3</c> type</param>
            <returns>Dot product value</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Vector3.Dot(Tekla.Common.Geometry.UnitVector3)">
            <summary>
            Dot product (or the scalar product) of the given vector and this vector
            </summary>
            <param name="vector">A vector of the <c>Vector3</c> type</param>
            <returns>Dot product value</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Vector3.GetNormalized">
            <summary>
            Normalizes the 3D vector so that its length is 1 and results new Vector3 instance. 
            </summary>
            <returns>normalized Vector3</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Vector3.TryGetNormalized(Tekla.Common.Geometry.UnitVector3@)">
            <summary>
            Tries to get normalized UnitVector3.
            </summary>
            <param name="normalized">The normalized UnitVector3.</param>
            <returns>true, if the vector was normalized. If false, the result is UnitVector3.UnitX</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Vector3.Cross(Tekla.Common.Geometry.Vector3)">
            <summary>
            Cross product of this 3D vector and the 3D vector given as parameter,
            in right handed coordinate system.
            </summary>
            <param name="vector">A 3D vector</param>
            <returns>Cross product vector, orthogonal to the factor vectors</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Vector3.Cross(Tekla.Common.Geometry.UnitVector3)">
            <summary>
            Cross product of this 3D vector and the 3D unit vector given as parameter,
            in right handed coordinate system.
            </summary>
            <param name="vector">A 3D vector</param>
            <returns>Cross product vector, orthogonal to the factor vectors</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Vector3.UnitCross(Tekla.Common.Geometry.Vector3)">
            <summary>
            Calculates the cross product of this 3D vector and the 3D vector given as parameter, 
            and then normalizes the result vector before returning it.
            </summary>
            <param name="vector">A 3D vector</param>
            <returns>Cross product vector, unit-length and orthogonal to the factor vectors.
            </returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Vector3.UnitCross(Tekla.Common.Geometry.UnitVector3)">
            <summary>
            Calculates the cross product of this 3D vector and the 3D unit vector given as parameter, 
            and then normalizes the result vector before returning it.
            </summary>
            <param name="vector">A 3D unit vector</param>
            <returns>Cross product vector, unit-length and orthogonal to the factor vectors.
            </returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Vector3.TryGetUnitCross(Tekla.Common.Geometry.Vector3,Tekla.Common.Geometry.UnitVector3@)">
            <summary>
            Tries the get unit cross product. If false, the unitVector is UnitVector.UnitX.
            </summary>
            <param name="vector">The vector.</param>
            <param name="result">The calculated unit vector.</param>
            <returns>true, if the resulted vector was normalized. If false, the unitVector is UnitVector3.UnitX</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Vector3.Equals(System.Object)">
            <summary>
            This tests for the exact equality of two vectors
            </summary>
            <param name="obj">The object to test with this object</param>
            <returns>Returns true if this and the parameter vector are equal</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Vector3.Equals(Tekla.Common.Geometry.Vector3)">
            <summary>
            This tests for the exact equality of two vectors
            </summary>
            <param name="other">3D vector to test with this vector</param>
            <returns>Returns true if this and the parameter vector are equal</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Vector3.GetHashCode">
            <summary>
            Returns a hash code for vector.
            </summary>
            <returns>The hash code</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Vector3.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Tekla.Common.Geometry.Vector3.Zero">
            <summary>
            Gets zero 3D Vector {0, 0, 0}
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.Vector3.UnitX">
            <summary>
            Gets unit x-axel 3D Vector {1, 0, 0}
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.Vector3.UnitY">
            <summary>
            Gets unit y-axel 3D Vector {0, 1, 0}
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.Vector3.UnitZ">
            <summary>
            Gets unit z-axel 3D Vector {0, 0, 1}
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.Vector3.One">
            <summary>
            Gets 3D Vector {1, 1, 1}
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.Vector3.MinValue">
            <summary>
            Gets 3D Vector {double.MinValue, double.MinValue, double.MinValue}
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.Vector3.MaxValue">
            <summary>
            Gets 3D Vector {double.MaxValue, double.MaxValue, double.MaxValue}
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.Vector3.X">
            <summary>
            Gets or sets the x coordinate
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.Vector3.Y">
            <summary>
            Gets or sets the y coordinate
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.Vector3.Z">
            <summary>
            Gets or sets the z coordinate
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.Vector3.Length">
            <summary>
            Gets the length of the 3D vector
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.Vector3.SquaredLength">
            <summary>
            Gets the square of the length of the 3D vector
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.Vector3.Item(System.Int32)">
            <summary>Gets or sets the component specified by the index (X, Y or Z)</summary>
            <param name="index">
              Index for component wise access, 0 = X, 1 = Y, 2 = Z
            </param>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
              if <paramref name="index"/> is not <c>0, 1 or 2</c>
            </exception>
            <returns>the component specified by the index</returns>
        </member>
        <member name="T:Tekla.Common.Geometry.Rectangle3">
            <summary>
            3D rectangle.
            Points of the rectangle satisfy equation <c>R(s,t) = C+s0*U0+s1*U1</c>, where <c>C</c> is the center of the
            rectangle, <c>U0</c> and <c>U1</c> are unit-length and perpendicular axes.  The
            parameters <c>s0</c> and <c>s1</c> are constrained by <c>|s0| &lt;= e0</c>
            and <c>|s1| &lt;= e1</c>,
            where <c>e0 &gt; 0</c> and <c>e1 &gt; 0</c> are called the extents of the rectangle.
            </summary>
            <remarks>Here's a picture where you can see how extents and vertex points
            are situated: <br />
            <img src="..\art\rectangle3.png" />
            </remarks>
        </member>
        <member name="M:Tekla.Common.Geometry.Rectangle3.#ctor(Tekla.Common.Geometry.Vector3,Tekla.Common.Geometry.UnitVector3[],System.Double[])">
            <summary>
            Initializes a new instance of the Rectangle3 struct
            </summary>
            <param name="center">Center point of the rectangle</param>
            <param name="axis">Unit-length axis vectors, mutually perpendicular</param>
            <param name="extent">Extents of the rectangle, i.e. 
            half-lengths of its sides</param>
        </member>
        <member name="M:Tekla.Common.Geometry.Rectangle3.#ctor(Tekla.Common.Geometry.Vector3,Tekla.Common.Geometry.UnitVector3,Tekla.Common.Geometry.UnitVector3,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the Rectangle3 struct
            </summary>
            <param name="center">Center point of the rectangle</param>
            <param name="axis0">First axis of the rectangele, unit-length 
            and perpendicular to <c>axis1</c></param>
            <param name="axis1">Second axis of the rectangele, unit-length 
            and perpendicular to <c>axis0</c></param>
            <param name="extent0">First extent of the rectangle 
            (half-length of the side)</param>
            <param name="extent1">Second extent of the rectangle 
            (half-length of the side)</param>
        </member>
        <member name="M:Tekla.Common.Geometry.Rectangle3.Equals(System.Object)">
            <summary>
            Tests for the exact equality of two rectangles
            </summary>
            <param name="obj">Object to compare to</param>
            <returns>TRUE is rectangles are equal, FALSE if not</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Rectangle3.Equals(Tekla.Common.Geometry.Rectangle3)">
            <summary>
            Tests for the exact equality of two rectangles
            </summary>
            <param name="other">Rectangle to compare to</param>
            <returns>TRUE is rectangles are equal, FALSE if not</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Rectangle3.GetHashCode">
            <summary>
            Returns a hash code for rectangle
            </summary>
            <returns>The hash code</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Rectangle3.ComputeVertices">
            <summary>
            Returns the vertex points of the rectangle
            </summary>
            <returns>A <c>Vector3</c> type array Vector3[4] containing vertex point coordinates in order of MM, PM, PP, MP.
            </returns>
        </member>
        <member name="P:Tekla.Common.Geometry.Rectangle3.Center">
            <summary>
            Gets the center point of the rectangle
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.Rectangle3.Axis0">
            <summary>
            Gets the first axis of the rectangle.
            Must be unit-length and perpendicular to the second axis.
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.Rectangle3.Axis1">
            <summary>
            Gets the second axis of the rectangle.
            Must be unit-length and perpendicular to the first axis.
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.Rectangle3.Extent0">
            <summary>
            Gets the first extent (half-length of the side) of
             the rectangle. This extent is along the <c>Axis0</c> axis.
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.Rectangle3.Extent1">
            <summary>
            Gets the second extent (half-length of the side) of
             the rectangle. This extent is along the <c>Axis1</c> axis.
            </summary>        
        </member>
        <member name="P:Tekla.Common.Geometry.Rectangle3.PPCorner">
            <summary>
            Gets the first vertex point of the rectangle 
            (C + e0*A0 + e1*A1)
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.Rectangle3.PMCorner">
            <summary>
            Gets the second vertex point of the rectangle 
            (C + e0*A0 - e1*A1)
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.Rectangle3.MPCorner">
            <summary>
            Gets the third vertex point of the rectangle 
            (C - e0*A0 + e1*A1)
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.Rectangle3.MMCorner">
            <summary>
            Gets the fourth vertex point of the rectangle 
            (C - e0*A0 - e1*A1)
            </summary>
        </member>
        <member name="T:Tekla.Common.Geometry.Vector2">
            <summary>
            2D vector or point
            </summary>
        </member>
        <member name="F:Tekla.Common.Geometry.Vector2.x">
            <summary>
            Backing field for property X
            </summary>
        </member>
        <member name="F:Tekla.Common.Geometry.Vector2.y">
            <summary>
            Backing field for property Y
            </summary>
        </member>
        <member name="M:Tekla.Common.Geometry.Vector2.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the Vector2 struct
            </summary>
            <param name="x">The x coordinate</param>
            <param name="y">The y coordinate</param>
        </member>
        <member name="M:Tekla.Common.Geometry.Vector2.op_Addition(Tekla.Common.Geometry.Vector2,Tekla.Common.Geometry.Vector2)">
            <summary>
             The vector addition operator. The + operator returns a new vector of the  
             <c>Vector2</c> type, the sum of two given vectors
            </summary>
            <param name="left">The first vector to sum</param>
            <param name="right">The second vector to sum</param>
            <returns>The sum vector</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Vector2.op_Subtraction(Tekla.Common.Geometry.Vector2,Tekla.Common.Geometry.Vector2)">
            <summary>
             The vector subtraction operator. The - operator returns a new vector of the
             <c>Vector2</c> type, the remainder of given two vectors.
            </summary>
            <param name="left">The minuend vector</param>
            <param name="right">The subtracter vector, 
            coordinate values will be subtracted from the minuend vector</param>
            <returns>The remainder vector</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Vector2.op_Multiply(Tekla.Common.Geometry.Vector2,System.Double)">
            <summary>
            The multiplier operation * multiplies the given vector 
            with the given double multiplier (each coordinate component is 
            multiplied with this number)
            </summary>
            <param name="vector">A vector of the <c>Vector2</c> type</param>
            <param name="scalar">The multiplier</param>
            <returns>A <c>Vector2</c> type vector</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Vector2.op_Multiply(System.Double,Tekla.Common.Geometry.Vector2)">
            <summary>
            The multiplier operation * multiplies the given vector 
            with the given double multiplier (each coordinate component is 
            multiplied with this number)
            </summary>
            <param name="scalar">The multiplier</param>
            <param name="vector">A vector of the <c>Vector2</c> type</param>
            <returns>A <c>Vector2</c> type vector</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Vector2.op_Multiply(Tekla.Common.Geometry.Vector2,Tekla.Common.Geometry.Vector2)">
            <summary>
            The multiplier operation * multiplies the given vectors and returns the component wise result. 
            </summary>
            <param name="left">The left vector.</param>
            <param name="right">The right vector.</param>
            <returns>
            The result of the multiplication operation as <c>Vector2</c>.
            </returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Vector2.op_Division(Tekla.Common.Geometry.Vector2,System.Double)">
            <summary>
            The division operator / divides each coordinate with
            the given double number
            </summary>
            <param name="vector">A vector of the <c>Vector2</c> type</param>
            <param name="scalar">A double divisor</param>
            <returns>A <c>Vector2</c> type vector</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Vector2.op_Division(Tekla.Common.Geometry.Vector2,Tekla.Common.Geometry.Vector2)">
            <summary>
            Divides the components of a vector by the components of the other vector.
            </summary>
            <param name="left">A vector of the <c>Vector2</c> type</param>
            <param name="right">The other vector.</param>
            <returns>
            A <c>Vector2</c> containing the result of division operation.
            </returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Vector2.op_UnaryNegation(Tekla.Common.Geometry.Vector2)">
            <summary>
             Returns a vector pointing in the opposite direction.
            </summary>
            <param name="vector">Source vector.</param>
            <returns>Vector pointing in the opposite direction.</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Vector2.Equals(System.Object)">
            <summary>
            Tests for the exact equality of two vectors
            </summary>
            <param name="obj">Object to compare to</param>
            <returns>TRUE if vectors are equal, FALSE if not</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Vector2.Dot(Tekla.Common.Geometry.Vector2)">
            <summary>
            Dot product (or the scalar product) of the given vector and this vector
            </summary>
            <param name="vector">A vector of the <c>Vector2</c> type</param>
            <returns>The dot product</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Vector2.Dot(Tekla.Common.Geometry.UnitVector2)">
            <summary>
            Dot product (or the scalar product) of the given vector and this vector
            </summary>
            <param name="vector">A vector of the <c>Vector2</c> type</param>
            <returns>The dot product</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Vector2.GetNormalized">
            <summary>
            Normalizes the 2D vector so that its length is 1 
            (the <c>Length</c> property).
            </summary>
            <returns>The length or vector before normalization</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Vector2.TryGetNormalized(Tekla.Common.Geometry.UnitVector2@)">
            <summary>
            Tries to get normalized UnitVector2.
            </summary>
            <param name="normalized">The normalized UnitVector2.</param>
            <returns>true, if the vector was normalized. If false, the result is UnitVector2.UnitX</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Vector2.Perpendicular">
            <summary>
            Returns a vector perpendicular to this one 
            (turned 90 degrees right when compared to this).
            If this vector is <c>(x,y)</c>, the result is <c>(y, -x)</c>
            </summary>
            <returns>A <c>Vector2</c> type vector perpendicular to this one</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Vector2.DotPerpendicular(Tekla.Common.Geometry.Vector2)">
            <summary>
            Dot product of the vector perpendicular to this one 
            and the vector given as parameter.
            If this vector is <c>(x,y)</c> and the parameter vector is V,
            the result is <c>x*V.y - y*V.x</c>
            </summary>
            <param name="vector">A <c>Vector2</c> type vector</param>
            <returns>Dot product value</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Vector2.Equals(Tekla.Common.Geometry.Vector2)">
            <summary>
            Tests for the exact equality of two vectors
            </summary>
            <param name="other">Vector to compare to</param>
            <returns>TRUE if vectors are equal, FALSE if not</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Vector2.GetHashCode">
            <summary>
            Returns a hash code for vector.
            </summary>
            <returns>The hash code</returns>
        </member>
        <member name="P:Tekla.Common.Geometry.Vector2.Zero">
            <summary>
            Gets 2D vector {0, 0}
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.Vector2.UnitX">
            <summary>
            Gets 2D vector {1, 0}
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.Vector2.UnitY">
            <summary>
            Gets 2D vector {0, 1}
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.Vector2.One">
            <summary>
            Gets 2D vector {1, 1}
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.Vector2.MinValue">
            <summary>
            Gets 2D Vector {double.MinValue, double.MinValue}
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.Vector2.MaxValue">
            <summary>
            Gets 2D Vector {double.MaxValue, double.MaxValue}
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.Vector2.X">
            <summary>
            Gets or sets the x coordinate
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.Vector2.Y">
            <summary>
            Gets or sets the y coordinate
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.Vector2.Length">
            <summary>
            Gets the length of the 2D vector
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.Vector2.SquaredLength">
            <summary>
            Gets the square of the length of the 2D vector
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.Vector2.Item(System.Int32)">
            <summary>
            Gets the component specified by the index (X or Y)
            </summary>
            <param name="index">the index for component</param>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            if <paramref name="index"/> is not <c>0 or 1</c>
              </exception>
            <returns>the component specified by the index</returns>
        </member>
        <member name="T:Tekla.Common.Geometry.Quaternion">
            <summary>
            A quaternion is defined by 
            <c>q = w + x*i + y*j + z*k</c> where <c>(w,x,y,z)</c> is 
            a 4D vector, not necessarily unit-length.
            Can be used to replace 3x3 rotation matrices. 
            </summary>
        </member>
        <member name="M:Tekla.Common.Geometry.Quaternion.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the Quaternion struct.
            Parameters specify a 4D vector that satisfies the 
            quaternion equation <c>q = w + x*i + y*j + z*k</c>.
            </summary>
            <param name="w"><c>w</c> in quaternion equation</param>
            <param name="x"><c>x</c> in quaternion equation</param>
            <param name="y"><c>y</c> in quaternion equation</param>
            <param name="z"><c>z</c> in quaternion equation</param>
        </member>
        <member name="M:Tekla.Common.Geometry.Quaternion.#ctor(System.Double,Tekla.Common.Geometry.Vector3)">
            <summary>
            Initializes a new instance of the Quaternion struct.
            Parameters specify a 4D vector that satisfies the
            quaternion equation <c>q = w + x*i + y*j + z*k</c>.
            </summary>
            <param name="w"><c>w</c> in quaternion equation</param>
            <param name="v">The x,y,z in quaternion equation</param>
        </member>
        <member name="M:Tekla.Common.Geometry.Quaternion.op_Addition(Tekla.Common.Geometry.Quaternion,Tekla.Common.Geometry.Quaternion)">
            <summary>
            The sum of two quaternions
            </summary>
            <param name="left">Left operand</param>
            <param name="right">Right operand</param>
            <returns>The result</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Quaternion.op_Subtraction(Tekla.Common.Geometry.Quaternion,Tekla.Common.Geometry.Quaternion)">
            <summary>
            The remainder of two quaternions
            </summary>
            <param name="left">The minuend</param>
            <param name="right">The subtracter</param>
            <returns>The result</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Quaternion.op_Multiply(Tekla.Common.Geometry.Quaternion,Tekla.Common.Geometry.Quaternion)">
            <summary>
            Product of two quaternions. <br/>
            Note that multiplication is not generally commutative, 
            so in most cases <c>p*q != q*p</c> 
            (<c>p</c> and <c>q</c> are 4D vectors).
            </summary>
            <param name="left">Left-side quaternion</param>
            <param name="right">Right-side quaternion</param>
            <returns>The result</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Quaternion.op_Multiply(Tekla.Common.Geometry.Quaternion,System.Double)">
            <summary>
            Multiplies the given quaternion by a scalar multiplier, 
            each entry multiplied with the scalar 
            </summary>
            <param name="quaternion">A quaternion</param>
            <param name="scalar">A <b>double</b> multiplier</param>
            <returns>The product vector</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Quaternion.op_Multiply(System.Double,Tekla.Common.Geometry.Quaternion)">
            <summary>
            Multiplies the given quaternion by a scalar multiplier, 
            each entry multiplied with the scalar 
            </summary>
            <param name="scalar">A <b>double</b> multiplier</param>
            <param name="quaternion">A quaternion</param>
            <returns>The product vector</returns>        
        </member>
        <member name="M:Tekla.Common.Geometry.Quaternion.op_Division(Tekla.Common.Geometry.Quaternion,System.Double)">
            <summary>
            Divides the given quaternion with a scalar divider, 
            each entry divided with the scalar 
            </summary>
            <param name="quaternion">A quaternion</param>
            <param name="scalar">A <c>double</c> divider</param>
            <returns>The result quaternion</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Quaternion.Equals(System.Object)">
            <summary>
            Tests for the exact equality of two quaternions
            </summary>
            <param name="obj">The object to compare to</param>
            <returns>TRUE if quaternions are equal, FALSE if not</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Quaternion.Equals(Tekla.Common.Geometry.Quaternion)">
            <summary>
            Tests for the exact equality of two quaternions
            </summary>
            <param name="other">The quaternion to compare to</param>
            <returns>TRUE if quaternions are equal, FALSE if not</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Quaternion.GetHashCode">
            <summary>
            Returns a hash code for quaternion
            </summary>
            <returns>The hash code</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Quaternion.Dot(Tekla.Common.Geometry.Quaternion)">
            <summary>
            Dot product (or the scalar product) 
            of the given quaternion and this quaternion 
            </summary>
            <param name="quaternion">A quaternion</param>
            <returns>The dot product</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Quaternion.TryGetNormalized(Tekla.Common.Geometry.Quaternion@)">
            <summary>
            Normalizes the quaternion so that its <c>Length</c> is 1. 
            </summary>
            <param name="quaternion">
            The normalized quaternion, Zero if the normalization fails.
            </param>
            <returns>
            The length before normalization
            </returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Quaternion.Inverse">
            <summary>
            Returns the inverse of this quaternion. 
            The original quaternion <c>Q</c> and 
            the inverse quaternion <c>Q*</c> 
            fulfill the equation <c>QQ* = I</c> (<c>I</c> is identity quaternion). 
            </summary>
            <returns>Inverse quaternion</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Quaternion.Conjugate">
            <summary>
            Returns the conjugate of this quaternion. 
            If quaternion <c>Q = w + x*i + y*j + z*k</c>, 
            the conjugate is <c>w - x*i - y*j - z*k</c>.
            </summary>
            <returns>Conjugate quaternion</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Quaternion.Exp">
            <summary>
            If quaternion <c>q = A*(x*i+y*j+z*k)</c> where <c>(x,y,z)</c> is unit length, then
            <c>exp(q) = cos(A)+sin(A)*(x*i+y*j+z*k)</c>.  <br/>
            If <c>sin(A)</c> is near zero,
            this method uses formula <c>exp(q) = cos(A)+A*(x*i+y*j+z*k)</c> since <c>A/sin(A)</c> has limit 1.
            </summary>
            <returns>The result quaternion</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Quaternion.Log">
            <summary>
            If quaternion <c>q = cos(A)+sin(A)*(x*i+y*j+z*k)</c> where <c>(x,y,z)</c> is unit length, then
            <c>log(q) = A*(x*i+y*j+z*k)</c>. <br/>
            If <c>sin(A)</c> is near zero, this methods uses 
            <c>log(q) = sin(A)*(x*i+y*j+z*k)</c> since <c>sin(A)/A</c> has limit 1.
            </summary>
            <returns>The result quaternion</returns>
        </member>
        <member name="P:Tekla.Common.Geometry.Quaternion.Zero">
            <summary>
            Gets a new zero quaternion
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.Quaternion.Identity">
            <summary>
            Gets an identity quaternion
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.Quaternion.W">
            <summary>
            Gets the first entry <c>w</c> in the quaternion equation
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.Quaternion.X">
            <summary>
            Gets the second entry <c>x</c> in the quaternion equation
            </summary>        
        </member>
        <member name="P:Tekla.Common.Geometry.Quaternion.Y">
            <summary>
            Gets the third entry <c>y</c> in the quaternion equation
            </summary>        
        </member>
        <member name="P:Tekla.Common.Geometry.Quaternion.Z">
            <summary>
            Gets the last entry <c>z</c> in the quaternion equation
            </summary>        
        </member>
        <member name="P:Tekla.Common.Geometry.Quaternion.Length">
            <summary>
            Gets the length of the quaternion 
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.Quaternion.SquaredLength">
            <summary>
            Gets the square of the length of the quaternion 
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.Quaternion.Item(System.Int32)">
            <summary>
            Gets or sets the quaternion entry specified by the index 
            </summary>
            <param name="index">
            index 0 = <c>w</c>, 
            index 1 = <c>x</c>, 
            index 2 = <c>y</c>, 
            index 3 = <c>z</c></param>
            <returns>the element specified by the index.</returns>
        </member>
        <member name="T:Tekla.Common.Geometry.NamespaceDoc">
            <summary>
            <c>Tekla.Common.Geometry</c> contains the definitions and functionality for the geometry used in Tekla products.
            </summary>
        </member>
        <member name="T:Tekla.Common.Geometry.AffineTransform3">
            <summary>
            Affine, right-handed transformation class. 
            </summary>
        </member>
        <member name="M:Tekla.Common.Geometry.AffineTransform3.#ctor(Tekla.Common.Geometry.UnitVector3,Tekla.Common.Geometry.UnitVector3,Tekla.Common.Geometry.UnitVector3,Tekla.Common.Geometry.Vector3,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Common.Geometry.AffineTransform3"/> struct.
            </summary>
            <param name="axisX">The axis X (must be unit length and perpendicular to y and z).</param>
            <param name="axisY">The axis Y (must be unit length and perpendicular to x and z)).</param>
            <param name="axisZ">The axis Z (must be unit length and perpendicular to x and y)).</param>
            <param name="origin">The origin.</param>
            <param name="scale">The scale.</param>
        </member>
        <member name="M:Tekla.Common.Geometry.AffineTransform3.#ctor(Tekla.Common.Geometry.UnitVector3,Tekla.Common.Geometry.UnitVector3,Tekla.Common.Geometry.UnitVector3,Tekla.Common.Geometry.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Common.Geometry.AffineTransform3"/> struct.
            </summary>
            <param name="axisX">The axis X (must be perpendicular to y and z).</param>
            <param name="axisY">The axis Y (must be perpendicular to x and z)).</param>
            <param name="axisZ">The axis Z (must be perpendicular to x and y)).</param>
            <param name="origin">The origin.</param>
        </member>
        <member name="M:Tekla.Common.Geometry.AffineTransform3.#ctor(Tekla.Common.Geometry.UnitVector3,Tekla.Common.Geometry.UnitVector3,Tekla.Common.Geometry.UnitVector3)">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Common.Geometry.AffineTransform3"/> struct.
            </summary>
            <param name="axisX">The axis X (must be perpendicular to y and z).</param>
            <param name="axisY">The axis Y (must be perpendicular to x and z)).</param>
            <param name="axisZ">The axis Z (must be perpendicular to x and y)).</param>
        </member>
        <member name="M:Tekla.Common.Geometry.AffineTransform3.#ctor(Tekla.Common.Geometry.UnitVector3,Tekla.Common.Geometry.UnitVector3)">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Common.Geometry.AffineTransform3"/> struct.
            </summary>
            <param name="axisX">The axis X (must be and perpendicular to y).</param>
            <param name="axisY">The axis Y (must be and perpendicular to x)).</param>
        </member>
        <member name="M:Tekla.Common.Geometry.AffineTransform3.Equals(System.Object)">
            <summary>
            This tests for the exact equality of two objects
            </summary>
            <param name="obj">The object to test with this object</param>
            <returns>Returns <c>true</c> if this and the parameter vector are equal</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.AffineTransform3.Equals(Tekla.Common.Geometry.AffineTransform3)">
            <summary>
            This tests for the exact equality of two transforms
            </summary>
            <param name="other">The other transform.</param>
            <returns>
            Returns <c>true</c> if this and the parameter transform are equal
            </returns>
        </member>
        <member name="M:Tekla.Common.Geometry.AffineTransform3.GetHashCode">
            <summary>
            Returns an hash code for the transform.
            </summary>
            <returns>The hash code</returns>
        </member>
        <member name="P:Tekla.Common.Geometry.AffineTransform3.AxisX">
            <summary>
            Gets the axis X.
            </summary>
            <value>The axis X.</value>
        </member>
        <member name="P:Tekla.Common.Geometry.AffineTransform3.AxisY">
            <summary>
            Gets the axis Y.
            </summary>
            <value>The axis Y.</value>
        </member>
        <member name="P:Tekla.Common.Geometry.AffineTransform3.AxisZ">
            <summary>
            Gets the axis Z.
            </summary>
            <value>The axis Z.</value>
        </member>
        <member name="P:Tekla.Common.Geometry.AffineTransform3.Origin">
            <summary>
            Gets the origin.
            </summary>
            <value>The origin.</value>
        </member>
        <member name="P:Tekla.Common.Geometry.AffineTransform3.Scale">
            <summary>
            Gets the scale.
            </summary>
            <value>The scale.</value>
        </member>
        <member name="T:Tekla.Common.Geometry.AxisAlignedBox3">
            <summary>
            3D axis aligned bounding box, defined with minimium and maximum coordinates.
            </summary>
        </member>
        <member name="M:Tekla.Common.Geometry.AxisAlignedBox3.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the AxisAlignedBox3 struct, sides aligned parallel to axis, 
            based on two opposite vertex point coordinates (points V1 and V2) you provide as parameters.
            The caller must ensure that <c>minX</c> &lt;= <c>maxX</c>,   
            <c>minY</c> &lt;= <c>maxY</c>, and
            <c>minZ</c> &lt;= <c>maxZ</c>.
            The class will not check for validity of the input.
            </summary>
            <param name="minX">x coordinate of the vertex point V1</param>
            <param name="maxX">x coordinate of the vertex opposite to V1</param>
            <param name="minY">y coordinate of the vertex point V1</param>
            <param name="maxY">y coordinate of the vertex opposite to V1</param>
            <param name="minZ">z coordinate of the vertex point V1</param>
            <param name="maxZ">z coordinate of the vertex opposite to V1</param>
        </member>
        <member name="M:Tekla.Common.Geometry.AxisAlignedBox3.#ctor(Tekla.Common.Geometry.Vector3,Tekla.Common.Geometry.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Common.Geometry.AxisAlignedBox3"/> struct.
            </summary>
            <param name="min">The per component min values for the axis aligned box.</param>
            <param name="max">The per component max values for the axis aligned box.</param>
        </member>
        <member name="M:Tekla.Common.Geometry.AxisAlignedBox3.Equals(System.Object)">
            <summary>
            Tests for the exact equality of two axis aligned boxes
            </summary>
            <param name="obj">Object to compare to</param>
            <returns>TRUE if boxes are equal, FALSE if not</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.AxisAlignedBox3.Equals(Tekla.Common.Geometry.AxisAlignedBox3)">
            <summary>
            Tests for the exact equality of two axis aligned boxes
            </summary>
            <param name="other">Box to compare to</param>
            <returns>TRUE if boxes are equal, FALSE if not</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.AxisAlignedBox3.GetHashCode">
            <summary>
            Returns a hash code for axis aligned box
            </summary>
            <returns>The hash code</returns>
        </member>
        <member name="P:Tekla.Common.Geometry.AxisAlignedBox3.MinX">
            <summary>
            Gets the x coordinate of the vertex point V1,
            must be smaller than MaxX
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.AxisAlignedBox3.MaxX">
            <summary>
            Gets the x coordinate of the vertex opposite to V1,
            value must be greater than MinX
            </summary>        
        </member>
        <member name="P:Tekla.Common.Geometry.AxisAlignedBox3.MinY">
            <summary>
            Gets the y coordinate of the vertex point V1,
            value must be smaller than MaxY
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.AxisAlignedBox3.MaxY">
            <summary>
            Gets the y coordinate of the vertex opposite V1,
            value must be greater than MinY
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.AxisAlignedBox3.MinZ">
            <summary>
            Gets the z coordinate of the vertex point V1,
            value must be smaller than MinY
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.AxisAlignedBox3.MaxZ">
            <summary>
            Gets the z coordinate of the vertex opposite to V1, 
            value must be greater than MinZ
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.AxisAlignedBox3.Center">
            <summary>
            Gets the center of the box.
            </summary>
            <value>The center.</value>
        </member>
        <member name="P:Tekla.Common.Geometry.AxisAlignedBox3.Extents">
            <summary>
            Gets the extents of the bounding box.
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.AxisAlignedBox3.ExtentX">
            <summary>
            Gets the X axis extent (half-length) from the center.
            </summary>
            <value>The extent X.</value>
        </member>
        <member name="P:Tekla.Common.Geometry.AxisAlignedBox3.ExtentY">
            <summary>
            Gets the Y axis extent (half-length) from the center.
            </summary>
            <value>The extent Y.</value>
        </member>
        <member name="P:Tekla.Common.Geometry.AxisAlignedBox3.ExtentZ">
            <summary>
            Gets the Z axis extent (half-length) from the center.
            </summary>
            <value>The extent Z.</value>
        </member>
        <member name="P:Tekla.Common.Geometry.AxisAlignedBox3.Min">
            <summary>
            Gets the coordinates of the vertex point V1,
            coordinates must be smaller than Max coordinates
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.AxisAlignedBox3.Max">
            <summary>
            Gets the coordinates of the vertex opposite to V1,
            coordinates must be greater than Min coordinates
            </summary>
        </member>
        <member name="T:Tekla.Common.Geometry.UnitVector3">
            <summary>
            3D vector, that has always length of 1.0
            </summary>
        </member>
        <member name="F:Tekla.Common.Geometry.UnitVector3.v">
            <summary>
            the backing field for data.
            </summary>
        </member>
        <member name="M:Tekla.Common.Geometry.UnitVector3.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the UnitVector3 struct. The x, y, z has to be already normalized.
            </summary>
            <param name="x">The x coordinate</param>
            <param name="y">The y coordinate</param>
            <param name="z">The z coordinate</param>
        </member>
        <member name="M:Tekla.Common.Geometry.UnitVector3.op_Explicit(Tekla.Common.Geometry.UnitVector3)~Tekla.Common.Geometry.Vector3">
            <summary>
            Performs an explicit conversion from <see cref="T:Tekla.Common.Geometry.UnitVector3"/> to <see cref="T:Tekla.Common.Geometry.Vector3"/>.
            </summary>
            <param name="unitVector3">The unit vector.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Tekla.Common.Geometry.UnitVector3.op_Multiply(Tekla.Common.Geometry.UnitVector3,System.Double)">
            <summary>
            The multiplier operation * multiplies the given unit vector 
            with the given double multiplier (each coordinate component is 
            multiplied with this number)
            </summary>
            <param name="vector">A vector of the <c>Vector3</c> type</param>
            <param name="scalar">The multiplier</param>
            <returns>A <c>Vector3</c> type vector</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.UnitVector3.op_Multiply(System.Double,Tekla.Common.Geometry.UnitVector3)">
            <summary>
            The multiplier operation * multiplies the given vector 
            with the given double multiplier (each coordinate is 
            multiplied with this number)
            </summary>
            <param name="scalar">The multiplier</param>
            <param name="vector">A vector of the <c>Vector3</c> type</param>
            <returns>A <c>Vector3</c> type vector</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.UnitVector3.op_UnaryNegation(Tekla.Common.Geometry.UnitVector3)">
            <summary>
             Returns a vector pointing in the opposite direction.
            </summary>
            <param name="vector">Source vector.</param>
            <returns>Vector pointing in the opposite direction.</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.UnitVector3.Dot(Tekla.Common.Geometry.Vector3)">
            <summary>
            Dot product (or the scalar product) of the given vector and this vector
            </summary>
            <param name="vector">A vector of the <c>Vector3</c> type</param>
            <returns>Dot product value</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.UnitVector3.Dot(Tekla.Common.Geometry.UnitVector3)">
            <summary>
            Dot product (or the scalar product) of the given vector and this vector
            </summary>
            <param name="vector">A vector of the <c>Vector3</c> type</param>
            <returns>Dot product value</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.UnitVector3.Equals(System.Object)">
            <summary>
            This tests for the exact equality of two unit vectors
            </summary>
            <param name="obj">The object to test with this object</param>
            <returns>Returns true if this and the parameter vector are equal</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.UnitVector3.Equals(Tekla.Common.Geometry.UnitVector3)">
            <summary>
            This tests for the exact equality of two vectors
            </summary>
            <param name="other">3D vector to test with this vector</param>
            <returns>Returns true if this and the parameter vector are equal</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.UnitVector3.GetHashCode">
            <summary>
            Returns a hash code for vector.
            </summary>
            <returns>The hash code</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.UnitVector3.Cross(Tekla.Common.Geometry.Vector3)">
            <summary>
            Cross product of this 3D unit vector and the 3D vector given as parameter,
            in right handed coordinate system.
            </summary>
            <param name="vector">A 3D vector</param>
            <returns>Cross product vector, orthogonal to the factor vectors</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.UnitVector3.Cross(Tekla.Common.Geometry.UnitVector3)">
            <summary>
            Cross product of this 3D unit vector and the 3D unit vector given as parameter,
            in right handed coordinate system.
            </summary>
            <param name="vector">A 3D vector</param>
            <returns>Cross product vector, orthogonal to the factor vectors</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.UnitVector3.UnitCross(Tekla.Common.Geometry.Vector3)">
            <summary>
            Calculates the cross product of this 3D vector and the 3D vector given as parameter, 
            and then normalizes the result vector before returning it.
            </summary>
            <param name="vector">A 3D vector</param>
            <returns>Cross product vector, unit-length and orthogonal to the factor vectors.
            </returns>
        </member>
        <member name="M:Tekla.Common.Geometry.UnitVector3.UnitCross(Tekla.Common.Geometry.UnitVector3)">
            <summary>
            Calculates the cross product of this 3D vector and the 3D vector given as parameter, 
            and then normalizes the result vector before returning it.
            </summary>
            <param name="vector">A 3D vector</param>
            <returns>Cross product vector, unit-length and orthogonal to the factor vectors.
            </returns>
        </member>
        <member name="M:Tekla.Common.Geometry.UnitVector3.TryGetUnitCross(Tekla.Common.Geometry.Vector3,Tekla.Common.Geometry.UnitVector3@)">
            <summary>
            Tries the get unit cross product. If false, the unitVector is UnitVector.UnitX.
            </summary>
            <param name="vector">The vector.</param>
            <param name="result">The calculated unit vector.</param>
            <returns>true, if the resulted vector was normalized. If false, the unitVector is UnitVector3.UnitX</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.UnitVector3.TryGetUnitCross(Tekla.Common.Geometry.UnitVector3,Tekla.Common.Geometry.UnitVector3@)">
            <summary>
            Tries the get unit cross product. If false, the unitVector is UnitVector.UnitX.
            </summary>
            <param name="vector">The vector.</param>
            <param name="result">The calculated unit vector.</param>
            <returns>true, if the resulted vector was normalized. If false, the unitVector is UnitVector3.UnitX</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.UnitVector3.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Tekla.Common.Geometry.UnitVector3.UnitX">
            <summary>
            Gets unit x-axel 3D Vector {1, 0, 0}
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.UnitVector3.UnitY">
            <summary>
            Gets unit y-axel 3D Vector {0, 1, 0}
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.UnitVector3.UnitZ">
            <summary>
            Gets unit z-axel 3D Vector {0, 0, 1}
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.UnitVector3.X">
            <summary>
            Gets the x coordinate
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.UnitVector3.Y">
            <summary>
            Gets the y coordinate
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.UnitVector3.Z">
            <summary>
            Gets the z coordinate
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.UnitVector3.Error">
            <summary>
            Gets the error in the length of the unit vector.
            </summary>
        </member>
        <member name="T:Tekla.Common.Geometry.Ray3">
            <summary>
            3D ray is defined by its origin and direction.
            The ray is represented as <c>P+t*D</c>, where <c>P</c> is the ray origin, <c>D</c> is a
            unit-length direction vector, and <c>t &gt;= 0</c>.  The user must ensure that
            the direction vector satisfies this condition.
            </summary>
        </member>
        <member name="M:Tekla.Common.Geometry.Ray3.#ctor(Tekla.Common.Geometry.Vector3,Tekla.Common.Geometry.UnitVector3)">
            <summary>
            Initializes a new instance of the Ray3 struct. 
            The presentation is <c>P+t*D</c>, where <c>P</c> is the ray origin, <c>D</c> is a
            unit-length direction vector, and <c>t &gt;= 0</c>.
            </summary>
            <param name="origin">The origin of the ray</param>
            <param name="direction">The direction vector, 
            defined with <c>t*D</c>, 
            where <c>D</c> is unit-length and <c>t &gt;= 0</c>. 
            The user must ensure that
            the direction vector satisfies this condition.
            </param>
        </member>
        <member name="M:Tekla.Common.Geometry.Ray3.Equals(System.Object)">
            <summary>
            Tests for the exact equality of two rays
            </summary>
            <param name="obj">Object to compare to</param>
            <returns>TRUE if rays are equal, FALSE if not</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Ray3.Equals(Tekla.Common.Geometry.Ray3)">
            <summary>
            Tests for the exact equality of two rays
            </summary>
            <param name="other">Ray to compare to</param>
            <returns>TRUE if rays are equal, FALSE if not</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Ray3.GetHashCode">
            <summary>
            Returns a hash code for ray
            </summary>
            <returns>The hash code</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Ray3.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Tekla.Common.Geometry.Ray3.Origin">
            <summary>
            Gets the origin
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.Ray3.Direction">
            <summary>
            Gets the direction vector, 
            defined with <c>t*D</c>, 
            where <c>D</c> is unit-length and <c>t &gt;= 0</c>. 
            The user must ensure that
            the direction vector satisfies this condition.
            </summary>
        </member>
        <member name="T:Tekla.Common.Geometry.AxisAlignedBox2">
            <summary>
            2D box (rectangle), 
            sides aligned parallel to axis
            </summary>
        </member>
        <member name="M:Tekla.Common.Geometry.AxisAlignedBox2.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the AxisAlignedBox2 struct, sides aligned parallel to axis, 
            based on two opposite vertex point coordinates (points V1 and V2) you provide as parameters.
            The caller must ensure that <c>minX</c> &lt;= <c>maxX</c> and  
            <c>minY</c> &lt;= <c>maxY</c>.
            The class will not check for validity of the input.
            </summary>
            <param name="minX">x coordinate of vertex point V1</param>
            <param name="maxX">x coordinate of the vertex point opposite to V1</param>
            <param name="minY">y coordinate of vertex point V1</param>
            <param name="maxY">y coordinate of the vertex point opposite to V1</param>
        </member>
        <member name="M:Tekla.Common.Geometry.AxisAlignedBox2.Equals(System.Object)">
            <summary>
            Tests for the exact equality of two axis aligned boxes
            </summary>
            <param name="obj">Object to compare to</param>
            <returns>TRUE if boxes are equal, FALSE if not</returns>        
        </member>
        <member name="M:Tekla.Common.Geometry.AxisAlignedBox2.Equals(Tekla.Common.Geometry.AxisAlignedBox2)">
            <summary>
            This tests for the exact equality of two axis aligned boxes
            </summary>
            <param name="other">Object to compare to</param>
            <returns>TRUE if boxes are equal, FALSE if not</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.AxisAlignedBox2.GetHashCode">
            <summary>
            Returns a hash code for axis aligned box
            </summary>
            <returns>The hash code</returns>
        </member>
        <member name="P:Tekla.Common.Geometry.AxisAlignedBox2.MinX">
            <summary>
            Gets the x coordinate of the vertex point V1,
            must be smaller than MaxX
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.AxisAlignedBox2.MaxX">
            <summary>
            Gets the x coordinate of the vertex opposite to V1,
            value must be greater than MinX
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.AxisAlignedBox2.MinY">
            <summary>
            Gets the y coordinate of the vertex point V1,
            must be smaller than MaxY
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.AxisAlignedBox2.MaxY">
            <summary>
            Gets the y coordinate of the vertex opposite to V1,
            value must be greater than MinY
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.AxisAlignedBox2.Center">
            <summary>
            Gets the center of the box.
            </summary>
            <value>The center.</value>
        </member>
        <member name="P:Tekla.Common.Geometry.AxisAlignedBox2.ExtentX">
            <summary>
            Gets the X axis extent (half-length) from the center.
            </summary>
            <value>The extent X.</value>
        </member>
        <member name="P:Tekla.Common.Geometry.AxisAlignedBox2.ExtentY">
            <summary>
            Gets the Y axis extent (half-length) from the center.
            </summary>
            <value>The extent Y.</value>
        </member>
        <member name="P:Tekla.Common.Geometry.AxisAlignedBox2.Extents">
            <summary>
            Gets the extents.
            </summary>
        </member>
        <member name="T:Tekla.Common.Geometry.Arc3">
            <summary>
            The arc is defined by circle, start angle and delta angle. Angles in radians.
            </summary>
        </member>
        <member name="M:Tekla.Common.Geometry.Arc3.#ctor(Tekla.Common.Geometry.Circle3,Tekla.Common.Geometry.Angle,Tekla.Common.Geometry.Angle)">
            <summary>
            Initializes a new instance of the Arc3 struct. The delta angle can be negative, if needed.
            </summary>
            <param name="circle">Circle containing the arc</param>
            <param name="startAngle">The start angle.</param>
            <param name="deltaAngle">The delta angle.</param>
        </member>
        <member name="M:Tekla.Common.Geometry.Arc3.GetEdgePoint(Tekla.Common.Geometry.Angle)">
            <summary>
            Gets the point located on the arc under the given <paramref name="angle"/>. The angle is capped.
            </summary>
            <param name="angle">The angle, in radians from the start .</param>
            <returns>The edge point under the given <paramref name="angle"/>.</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Arc3.Equals(System.Object)">
            <summary>
            Tests for the exact equality of two arcs
            </summary>
            <param name="obj">Object to compare to</param>
            <returns>TRUE of arcs are equal, FALSE if not</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Arc3.Equals(Tekla.Common.Geometry.Arc3)">
            <summary>
            Tests for the exact equality of two arcs
            </summary>
            <param name="other">Arc to compare to</param>
            <returns>TRUE of arcs are equal, FALSE if not</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Arc3.GetHashCode">
            <summary>
            Returns a hash code for arc
            </summary>
            <returns>The hash code</returns>
        </member>
        <member name="P:Tekla.Common.Geometry.Arc3.FullUnitCircle">
            <summary>
            Gets an arc representing full unit circle (from 0 to 360 degrees).
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.Arc3.HalfUnitCircle">
            <summary>
            Gets an arc representing half of an unit circle. (from 0 to 180 degrees).
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.Arc3.UnitCircleQuadrant1">
            <summary>
            Gets arc representing the first quadrant of an unit circle (from 0 to 90 degrees).
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.Arc3.UnitCircleQuadrant2">
            <summary>
            Gets arc representing the second quadrant of an unit circle (from 90 to 180 degrees).
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.Arc3.UnitCircleQuadrant3">
            <summary>
            Gets arc representing the third quadrant of an unit circle (from 180 to 270 degrees).
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.Arc3.UnitCircleQuadrant4">
            <summary>
            Gets arc representing the forth quadrant of an unit circle (from 270 to 360 degrees).
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.Arc3.Circle">
            <summary>
            Gets the circle the arc is in
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.Arc3.StartAngle">
            <summary>
            Gets the start angle.
            </summary>
            <value>The start angle.</value>
        </member>
        <member name="P:Tekla.Common.Geometry.Arc3.DeltaAngle">
            <summary>
            Gets the delta angle (can be negative).
            </summary>
            <value>The delta angle.</value>
        </member>
        <member name="P:Tekla.Common.Geometry.Arc3.StartPoint">
            <summary>
            Gets the start point.
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.Arc3.EndPoint">
            <summary>
            Gets the end point.
            </summary>
        </member>
        <member name="T:Tekla.Common.Geometry.UnitVector2">
            <summary>
            Vector, that has always length of 1.0
            </summary>
        </member>
        <member name="F:Tekla.Common.Geometry.UnitVector2.v">
            <summary>
            the internal storage for the data.
            </summary>
        </member>
        <member name="M:Tekla.Common.Geometry.UnitVector2.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the UnitVector2 struct.
            </summary>
            <param name="x">The x coordinate</param>
            <param name="y">The y coordinate</param>
        </member>
        <member name="M:Tekla.Common.Geometry.UnitVector2.#ctor(Tekla.Common.Geometry.Vector2)">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Common.Geometry.UnitVector2"/> struct.
            </summary>
            <param name="v">The vector, that will be normalize</param>
        </member>
        <member name="M:Tekla.Common.Geometry.UnitVector2.op_Explicit(Tekla.Common.Geometry.UnitVector2)~Tekla.Common.Geometry.Vector2">
            <summary>
            Performs an implicit conversion from <see cref="T:Tekla.Common.Geometry.UnitVector2"/> to <see cref="T:Tekla.Common.Geometry.Vector2"/>.
            </summary>
            <param name="unitVector2">The unit vector.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Tekla.Common.Geometry.UnitVector2.op_Multiply(Tekla.Common.Geometry.UnitVector2,System.Double)">
            <summary>
            The multiplier operation * multiplies the given unit vector 
            with the given double multiplier (each coordinate component is 
            multiplied with this number)
            </summary>
            <param name="vector">A vector of the <c>Vector2</c> type</param>
            <param name="scalar">The multiplier</param>
            <returns>A <c>Vector2</c> type vector</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.UnitVector2.op_Multiply(System.Double,Tekla.Common.Geometry.UnitVector2)">
            <summary>
            The multiplier operation * multiplies the given vector 
            with the given double multiplier (each coordinate is 
            multiplied with this number)
            </summary>
            <param name="scalar">The multiplier</param>
            <param name="vector">A vector of the <c>Vector2</c> type</param>
            <returns>A <c>Vector2</c> type vector</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.UnitVector2.op_UnaryNegation(Tekla.Common.Geometry.UnitVector2)">
            <summary>
             Returns a vector pointing in the opposite direction.
            </summary>
            <param name="vector">Source vector.</param>
            <returns>Vector pointing in the opposite direction.</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.UnitVector2.Dot(Tekla.Common.Geometry.Vector2)">
            <summary>
            Dot product (or the scalar product) of the given vector and this vector
            </summary>
            <param name="vector">A vector of the <c>Vector2</c> type</param>
            <returns>Dot product value</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.UnitVector2.Dot(Tekla.Common.Geometry.UnitVector2)">
            <summary>
            Dot product (or the scalar product) of the given unit vector and this vector
            </summary>
            <param name="vector">A vector of the <c>Vector2</c> type</param>
            <returns>Dot product value</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.UnitVector2.Perpendicular">
            <summary>
            Returns a vector perpendicular to this one 
            (turned 90 degrees right when compared to this).
            If this vector is <c>(x,y)</c>, the result is <c>(y, -x)</c>
            </summary>
            <returns>A <c>Vector2</c> type vector perpendicular to this one</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.UnitVector2.Equals(System.Object)">
            <summary>
            This tests for the exact equality of two unit vectors
            </summary>
            <param name="obj">The object to test with this object</param>
            <returns>Returns true if this and the parameter vector are equal</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.UnitVector2.Equals(Tekla.Common.Geometry.UnitVector2)">
            <summary>
            This tests for the exact equality of two vectors
            </summary>
            <param name="other">3D vector to test with this vector</param>
            <returns>Returns true if this and the parameter vector are equal</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.UnitVector2.GetHashCode">
            <summary>
            Returns a hash code for vector.
            </summary>
            <returns>The hash code</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.UnitVector2.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Tekla.Common.Geometry.UnitVector2.UnitX">
            <summary>
            Gets unit x-axel 2D Vector {1, 0}
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.UnitVector2.UnitY">
            <summary>
            Gets unit y-axel 2D Vector {0, 1}
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.UnitVector2.X">
            <summary>
            Gets the x coordinate
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.UnitVector2.Y">
            <summary>
            Gets the y coordinate
            </summary>
        </member>
        <member name="T:Tekla.Common.Geometry.DoubleTriple">
            <summary>
            Double Tuple for implementing internal algorithms
            </summary>
        </member>
        <member name="F:Tekla.Common.Geometry.DoubleTriple.d0">
            <summary>
            Backing field for indexed value 0
            </summary>
        </member>
        <member name="F:Tekla.Common.Geometry.DoubleTriple.d1">
            <summary>
            Backing field for indexed value 1
            </summary>
        </member>
        <member name="F:Tekla.Common.Geometry.DoubleTriple.d2">
            <summary>
            Backing field for indexed value 2
            </summary>
        </member>
        <member name="M:Tekla.Common.Geometry.DoubleTriple.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Common.Geometry.DoubleTriple"/> struct.
            </summary>
            <param name="d0">The d0.</param>
            <param name="d1">The d1.</param>
            <param name="d2">The d2.</param>
        </member>
        <member name="M:Tekla.Common.Geometry.DoubleTriple.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Tekla.Common.Geometry.DoubleTriple.Equals(Tekla.Common.Geometry.DoubleTriple)">
            <summary>
            Determines whether the specified DoubleTriple is equal to this instance.
            </summary>
            <param name="other">The other.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Tekla.Common.Geometry.DoubleTriple.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="P:Tekla.Common.Geometry.DoubleTriple.Item(System.Int32)">
            <summary>
            Gets the double at the specified index.
            </summary>
            <param name="index">the index</param>
            <returns>the indexed value.</returns>
        </member>
        <member name="T:Tekla.Common.Geometry.Arc2">
            <summary>
            The arc is defined by circle, start angle and delta angle. Angles in radians.
            </summary>
        </member>
        <member name="M:Tekla.Common.Geometry.Arc2.#ctor(Tekla.Common.Geometry.Circle2,Tekla.Common.Geometry.Angle,Tekla.Common.Geometry.Angle)">
            <summary>
            Initializes a new instance of the Arc2 struct.
            </summary>
            <param name="circle">Circle containing the arc</param>
            <param name="startAngle">The start angle.</param>
            <param name="deltaAngle">The delta angle.</param>
        </member>
        <member name="M:Tekla.Common.Geometry.Arc2.GetEdgePoint(Tekla.Common.Geometry.Angle)">
            <summary>
            Gets the point located on the arc under the given <paramref name="angle"/>. The angle is capped.
            </summary>
            <param name="angle">The angle, in radians from the start .</param>
            <returns>The edge point under the given <paramref name="angle"/>.</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Arc2.Equals(System.Object)">
            <summary>
            Tests for the exact equality of two arcs
            </summary>
            <param name="obj">Object to compare to</param>
            <returns>TRUE of arcs are equal, FALSE if not</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Arc2.Equals(Tekla.Common.Geometry.Arc2)">
            <summary>
            Tests for the exact equality of two arcs
            </summary>
            <param name="other">Arc to compare to</param>
            <returns>TRUE of arcs are equal, FALSE if not</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Arc2.GetHashCode">
            <summary>
            Returns a hash code for arc
            </summary>
            <returns>The hash code</returns>
        </member>
        <member name="P:Tekla.Common.Geometry.Arc2.FullUnitCircle">
            <summary>
            Gets an arc representing full unit circle (from 0 to 360 degrees).
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.Arc2.HalfUnitCircle">
            <summary>
            Gets an arc representing half of an unit circle. (from 0 to 180 degrees).
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.Arc2.UnitCircleQuadrant1">
            <summary>
            Gets arc representing the first quadrant of an unit circle (from 0 to 90 degrees).
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.Arc2.UnitCircleQuadrant2">
            <summary>
            Gets arc representing the second quadrant of an unit circle (from 90 to 180 degrees).
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.Arc2.UnitCircleQuadrant3">
            <summary>
            Gets arc representing the third quadrant of an unit circle (from 180 to 270 degrees).
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.Arc2.UnitCircleQuadrant4">
            <summary>
            Gets arc representing the forth quadrant of an unit circle (from 270 to 360 degrees).
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.Arc2.Circle">
            <summary>
            Gets the circle the arc is in
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.Arc2.StartAngle">
            <summary>
            Gets the start angle.
            </summary>
            <value>The start angle.</value>
        </member>
        <member name="P:Tekla.Common.Geometry.Arc2.DeltaAngle">
            <summary>
            Gets the delta angle.
            </summary>
            <value>The delta angle.</value>
        </member>
        <member name="P:Tekla.Common.Geometry.Arc2.StartPoint">
            <summary>
            Gets the start point.
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.Arc2.EndPoint">
            <summary>
            Gets the end point.
            </summary>
        </member>
        <member name="T:Tekla.Common.Geometry.Line3">
            <summary>
            The line is represented as <c>P+t*D</c> where <c>P</c> is the line origin, <c>D</c> is a
            unit-length direction vector, and <c>t</c> is any real number.  The user must
            ensure that <c>D</c> is indeed unit length.
            </summary>
        </member>
        <member name="M:Tekla.Common.Geometry.Line3.#ctor(Tekla.Common.Geometry.Vector3,Tekla.Common.Geometry.UnitVector3)">
            <summary>
             Initializes a new instance of the Line3 struct.
            </summary>
            <param name="origin">The origin of the line</param>
            <param name="direction">The unit-length direction vector of the line</param>
        </member>
        <member name="M:Tekla.Common.Geometry.Line3.Equals(System.Object)">
            <summary>
            Tests the exact equality of two lines
            </summary>
            <param name="obj">The object to test with this object</param>
            <returns>Returns TRUE of the two lines are exactly equal, FALSE if not</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Line3.Equals(Tekla.Common.Geometry.Line3)">
            <summary>
            Tests the exact equality of two lines
            </summary>
            <param name="other">A 3D line to test with this line</param>
            <returns>Returns TRUE if the two lines are exactly equal, FALSE if not</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Line3.GetHashCode">
            <summary>
            Returns a hash code for line
            </summary>
            <returns>The hash code</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Line3.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Tekla.Common.Geometry.Line3.Origin">
            <summary>
             Gets the origin of the line
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.Line3.Direction">
            <summary>
            Gets the unit-length direction vector of the line. 
            Before setting the vector with this property, you have to ensure it is indeed unit-length.
            </summary>
        </member>
        <member name="T:Tekla.Common.Geometry.Plane3">
            <summary>
            The plane is represented as <c>Dot(normal, X) = constant</c> 
            where <n>normal</n> is a unit vector, 
            <c>constant</c> is the plane constant, and 
            <c>X</c> is any point on the plane. Please note, this differs from f. ex. XNA and SlimMath.
            </summary>
        </member>
        <member name="M:Tekla.Common.Geometry.Plane3.#ctor(Tekla.Common.Geometry.UnitVector3,System.Double)">
            <summary>
            Initializes a new instance of the Plane3 struct when you specify normal and an constant 
            in the plane definition so that <c>Dot(normal, X) = constant</c>. Please note, this differs from f. ex. XNA and SlimMath.
            </summary>
            <param name="normal">unit vector <c>normal</c> that satisfies the plane definition</param>
            <param name="constant">The plane constant</param>
        </member>
        <member name="M:Tekla.Common.Geometry.Plane3.#ctor(Tekla.Common.Geometry.UnitVector3,Tekla.Common.Geometry.Vector3)">
            <summary>
            Initializes a new instance of the Plane3 struct when you specify 
            <c>normal</c> as unit vector  and <c>pointOnThePlane</c> (a point on the plane)
            </summary>
            <param name="planeNormal">Unit-length normal vector <c>N</c> that satisfies the plane definition</param>
            <param name="pointOnThePlane">A point on the plane</param>
        </member>
        <member name="M:Tekla.Common.Geometry.Plane3.#ctor(Tekla.Common.Geometry.Vector3,Tekla.Common.Geometry.Vector3,Tekla.Common.Geometry.Vector3)">
            <summary>
            Initializes a new instance of the Plane3 struct when you specify three points point0, point1 and point2 on the plane.
            </summary>
            <param name="point0">The first point on the plane</param>
            <param name="point1">The second point on the plane</param>
            <param name="point2">The third point on the plane</param>
        </member>
        <member name="M:Tekla.Common.Geometry.Plane3.Equals(System.Object)">
            <summary>
            Tests for the exact equality of two planes
            </summary>
            <param name="obj">The object to compare to</param>
            <returns>TRUE of the two planes are equal, FALSE if not</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Plane3.Equals(Tekla.Common.Geometry.Plane3)">
            <summary>
            Tests for the exact equality of two planes
            </summary>
            <param name="other">The plane to compare to</param>
            <returns>TRUE of the two planes are equal, FALSE if not</returns>    
        </member>
        <member name="M:Tekla.Common.Geometry.Plane3.GetHashCode">
            <summary>
            Returns a hash code for plane
            </summary>
            <returns>The hash code</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Plane3.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Plane3.SignedDistanceTo(Tekla.Common.Geometry.Vector3)">
            <summary>
            Signed distance to Vector3. Use internally only.
            </summary>
            <param name="point">The point.</param>
            <returns>the distance</returns>
        </member>
        <member name="P:Tekla.Common.Geometry.Plane3.Normal">
            <summary>
            Gets the normal of the plane 
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.Plane3.Constant">
            <summary>
            Gets the plane <c>constant</c>. Please note, definition differs from f. ex. XNA and SlimMath.
            </summary>
        </member>
        <member name="T:Tekla.Common.Geometry.Line2">
            <summary>
            The line is represented as <c>P+t*D</c> where <c>P</c> is the line origin, <c>D</c> is a
            unit-length direction vector, and <c>t</c> is any real number.  The user must
            ensure that <c>D</c> is indeed unit length.
            </summary>
        </member>
        <member name="M:Tekla.Common.Geometry.Line2.#ctor(Tekla.Common.Geometry.Vector2,Tekla.Common.Geometry.UnitVector2)">
            <summary>
            Initializes a new instance of the Line2 struct.
            </summary>
            <param name="origin">Line origin</param>
            <param name="direction">Unit-length direction vector</param>
        </member>
        <member name="M:Tekla.Common.Geometry.Line2.Equals(System.Object)">
            <summary>
            Tests for the exact equality of two lines, this and the one given as parameter
            </summary>
            <param name="obj">The object to which this line is compared</param>
            <returns>TRUE of the lines are equal, FALSE if not</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Line2.Equals(Tekla.Common.Geometry.Line2)">
            <summary>
            Tests for the exact equality of two lines, this and the one given as parameter
            </summary>
            <param name="other">The line to which this line is compared</param>
            <returns>TRUE of the lines are equal, FALSE if not</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Line2.GetHashCode">
            <summary>
            Returns a hash code for line
            </summary>
            <returns>The hash code</returns>
        </member>
        <member name="P:Tekla.Common.Geometry.Line2.Origin">
            <summary>
            Gets the origin of the line
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.Line2.Direction">
            <summary>
            Gets the unit-length direction vector of the line. 
            Before setting the vector with this property, you have to ensure it is indeed unit-length.
            </summary>
        </member>
        <member name="T:Tekla.Common.Geometry.Circle3">
            <summary>
            3D circle.
            The plane containing the circle is <c>Dot(N,X-C) = 0</c>, where 
            <c>X</c> is any point in the plane and <c>C</c> is the center point of the circle.
            Vectors <c>U</c>, <c>V</c>, and <c>N</c> form an orthonormal right-handed set
            (matrix <c>[U V N]</c> is orthonormal and its' determinant is 1). 
            The circle with radius <c>R</c> within the plane is parameterized by 
            <c>X = C + R*(cos(t)*U + sin(t)*V)</c>,
            where <c>t</c> is an angle in <c>[-pi,pi]</c>.
            </summary>
        </member>
        <member name="M:Tekla.Common.Geometry.Circle3.#ctor(Tekla.Common.Geometry.Vector3,Tekla.Common.Geometry.UnitVector3,Tekla.Common.Geometry.UnitVector3,Tekla.Common.Geometry.UnitVector3,System.Double)">
            <summary>
            Initializes a new instance of the Circle3 struct.
            </summary>
            <param name="center">Center point of the circle</param>
            <param name="unitU">Unit-length vector, orthogonal to <c>normal</c> and <c>unitV</c></param>
            <param name="unitV">Unit-length vector, orthogonal to <c>normal</c> and <c>unitU</c></param>
            <param name="normal">Unit-length normal vector of the plane, orthogonal to <c>unitU</c> and <c>unitV</c></param>
            <param name="radius">Radius of the circle</param>
        </member>
        <member name="M:Tekla.Common.Geometry.Circle3.GetEdgePoint(Tekla.Common.Geometry.Angle)">
            <summary>
            Gets the point located on the edge of the circle under the given <paramref name="angle"/>.
            </summary>
            <param name="angle">The angle, in radians.</param>
            <returns>The edge point under the given <paramref name="angle"/>.</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Circle3.GetRadiusDirection(Tekla.Common.Geometry.Angle)">
            <summary>
            Gets the direction from the center of the circle to the edge under the given <paramref name="angle"/>.
            </summary>
            <param name="angle">The angle, in radians.</param>
            <returns>The direction under the given <paramref name="angle"/>.</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Circle3.GetTangent(Tekla.Common.Geometry.Angle)">
            <summary>
            Gets the tangent on the edge of the circle under the given <paramref name="angle"/>.
            </summary>
            <param name="angle">The angle, in radians.</param>
            <returns>The tangent under the given <paramref name="angle"/>.</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Circle3.Equals(System.Object)">
            <summary>
            Tests for the exact equality of two circles
            </summary>
            <param name="obj">Object to compare to</param>
            <returns>TRUE if the circles are equal, FALSE if not</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Circle3.Equals(Tekla.Common.Geometry.Circle3)">
            <summary>
            Tests for the exact equality of two circles
            </summary>
            <param name="other">The other circle</param>
            <returns>TRUE if the circles are equal, FALSE if not</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Circle3.GetHashCode">
            <summary>
            Returns the hash code for circle
            </summary>
            <returns>the hash code</returns>
        </member>
        <member name="P:Tekla.Common.Geometry.Circle3.UnitCircle">
            <summary>
            Gets the unit circle, where UnitU is X direction, UnitV is Y direction and normal points to Z direction.
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.Circle3.Center">
            <summary>
            Gets the center point of the circle
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.Circle3.UnitU">
            <summary>
            Gets the unit-length vector <c>U</c>.
            Vectors <c>U</c>, <c>V</c>, and <c>N</c> form an orthonormal right-handed set
            (matrix <c>[U V N]</c> is orthonormal and its' determinant is 1).
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.Circle3.UnitV">
            <summary>
            Gets the unit-length vector <c>V</c>.
            Vectors <c>U</c>, <c>V</c> and <c>N</c> form an orthonormal right-handed set
            (matrix <c>[U V N]</c> is orthonormal and its' determinant is 1).
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.Circle3.Normal">
            <summary>
            Gets the unit-length vector <c>N</c>, 
            the normal vector of the plane containing the circle.
            Vectors <c>U</c>, <c>V</c> and <c>N</c> form an orthonormal right-handed set
            (matrix <c>[U V N]</c> is orthonormal and its' determinant is 1).
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.Circle3.Radius">
            <summary>
            Gets the radius of the circle
            </summary>
        </member>
        <member name="T:Tekla.Common.Geometry.Circle2">
            <summary>
            2D circle, defined by center and radius
            </summary>
        </member>
        <member name="M:Tekla.Common.Geometry.Circle2.#ctor(Tekla.Common.Geometry.Vector2,System.Double)">
            <summary>
            Initializes a new instance of the Circle2 struct.
            </summary>
            <param name="center">Center point of the circle</param>
            <param name="radius">Radius of the circle</param>
        </member>
        <member name="M:Tekla.Common.Geometry.Circle2.GetEdgePoint(Tekla.Common.Geometry.Angle)">
            <summary>
            Gets the point located on the edge of the circle under the given <paramref name="angle"/>.
            </summary>
            <param name="angle">The angle, in radians.</param>
            <returns>The edge point under the given <paramref name="angle"/>.</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Circle2.GetRadiusDirection(Tekla.Common.Geometry.Angle)">
            <summary>
            Gets the direction from the center of the circle to the edge under the given <paramref name="angle"/>.
            </summary>
            <param name="angle">The angle, in radians.</param>
            <returns>The direction under the given <paramref name="angle"/>.</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Circle2.GetTangent(Tekla.Common.Geometry.Angle)">
            <summary>
            Gets the tangent on the edge of the circle under the given <paramref name="angle"/>.
            </summary>
            <param name="angle">The angle, in radians.</param>
            <returns>The tangent under the given <paramref name="angle"/>.</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Circle2.Equals(System.Object)">
            <summary>
            Tests for the exact equality of two circles
            </summary>
            <param name="obj">Object to compare to</param>    
            <returns>TRUE if the circles are equal, FALSE if not</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Circle2.Equals(Tekla.Common.Geometry.Circle2)">
            <summary>
            Tests for the exact equality of two circles
            </summary>
            <param name="other">Circle to compare to</param>    
            <returns>TRUE if the circles are equal, FALSE if not</returns>       
        </member>
        <member name="M:Tekla.Common.Geometry.Circle2.GetHashCode">
            <summary>
            Returns a hash code for circle
            </summary>
            <returns>The hash code</returns>
        </member>
        <member name="P:Tekla.Common.Geometry.Circle2.UnitCircle">
            <summary>
            Gets the unit circle, where UnitU is X direction, UnitV is Y direction and normal points to Z direction.
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.Circle2.Center">
            <summary>
            Gets the center point of the circle
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.Circle2.Radius">
            <summary>
            Gets the radius of the circle
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.Circle2.Diameter">
            <summary>
            Gets the diameter of the circle
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.Circle2.Area">
            <summary>
            Gets the area of the circle.
            </summary>
        </member>
        <member name="T:Tekla.Common.Geometry.Box3">
            <summary>
            A 3D box has a center point (<c>Vector3</c> type) and axis directions <c>Axis0</c>, 
            <c>Axis1</c>, and <c>Axis2</c>, (<c>UnitVector3</c> type.
            Extents as defined as non-negative double values.
            </summary>
        </member>
        <member name="M:Tekla.Common.Geometry.Box3.#ctor(Tekla.Common.Geometry.Vector3,Tekla.Common.Geometry.UnitVector3[],System.Double[])">
            <summary>
            Initializes a new instance of the Box3 struct
            </summary>
            <param name="center">Center point of the box</param>
            <param name="axis">Array of unit-length vectors parallel the axis of the box</param>
            <param name="extent">Array of the box extents (half-lengths of the edges)</param>
        </member>
        <member name="M:Tekla.Common.Geometry.Box3.#ctor(Tekla.Common.Geometry.Vector3,Tekla.Common.Geometry.UnitVector3,Tekla.Common.Geometry.UnitVector3,Tekla.Common.Geometry.UnitVector3,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the Box3 struct
            </summary>
            <param name="center">Center point of the box</param>
            <param name="axis0">Unit-length vector parallel to one axis of the box</param>
            <param name="axis1">Unit-length vector parallel to the second axis of the box</param>
            <param name="axis2">Unit-length vector parallel to the third axis of the box</param>
            <param name="extent0">The extent (half-length) of the side parallel to axis one</param>
            <param name="extent1">The extent (half-length) of the side parallel to axis two</param>
            <param name="extent2">The extent (half-length) of the side parallel to axis three</param>
        </member>
        <member name="M:Tekla.Common.Geometry.Box3.Equals(System.Object)">
            <summary>
            Tests for the exact equality of two boxes
            </summary>
            <param name="obj">Object to compare to</param>
            <returns>TRUE if boxes are equal, FALSE if not</returns>         
        </member>
        <member name="M:Tekla.Common.Geometry.Box3.Equals(Tekla.Common.Geometry.Box3)">
            <summary>
            Tests for the exact equality of two boxes
            </summary>
            <param name="other">Object to compare to</param>
            <returns>TRUE if boxes are equal, FALSE if not</returns>              
        </member>
        <member name="M:Tekla.Common.Geometry.Box3.GetHashCode">
            <summary>
            Returns a hash code for box
            </summary>
            <returns>The hash code</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Box3.ComputeVertices">
            <summary>
            Returns corner points as array of vertices
            </summary>
            <returns>Array of eight vertices</returns>
        </member>
        <member name="P:Tekla.Common.Geometry.Box3.Center">
            <summary>
            Gets the center point
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.Box3.Axis0">
            <summary>
            Gets an axis parallel to one side of the box,
            a unit-length vector orthogonal to Axis1 and Axis2
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.Box3.Axis1">
            <summary>
            Gets an axis parallel to the second side of the box,
            a unit-length vector orthogonal to Axis0 and Axis2
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.Box3.Axis2">
            <summary>
            Gets an axis parallel to the third side of the box,
            a unit-length vector orthogonal to Axis0 and Axis1
            </summary>        
        </member>
        <member name="P:Tekla.Common.Geometry.Box3.Extent0">
            <summary>
            Gets the extent parallel to <c>Axis0</c>
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.Box3.Extent1">
            <summary>
            Gets the extent parallel to <c>Axis1</c>
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.Box3.Extent2">
            <summary>
            Gets the extent parallel to <c>Axis2</c>
            </summary> 
        </member>
        <member name="P:Tekla.Common.Geometry.Box3.Extent">
            <summary>
             Gets the box extents (half-lengths of the sides)
            </summary>
        </member>
        <member name="T:Tekla.Common.Geometry.Angle">
            <summary>
            Angle value. Internally always radians but can be constructed as degrees or radians.
            </summary>
        </member>
        <member name="M:Tekla.Common.Geometry.Angle.FromRadians(System.Double)">
            <summary>
            Creates the angle from the radian based value.
            </summary>
            <param name="radians">The value in radians.</param>
            <returns>The created angle instance</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Angle.FromDegrees(System.Double)">
            <summary>
            Creates the angle from degree value.
            </summary>
            <param name="degrees">The value in degrees.</param>
            <returns>The created angle instance</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Angle.Abs(Tekla.Common.Geometry.Angle)">
            <summary>
            Returns an new angle with the absolute value or given angle.
            </summary>
            <param name="angle">The given angle.</param>
            <returns>The new angle with absolute value.</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Angle.op_Addition(Tekla.Common.Geometry.Angle,Tekla.Common.Geometry.Angle)">
            <summary>
            The angle addition operator.
            </summary>
            <param name="left">The first angle to sum</param>
            <param name="right">The second angle to sum</param>
            <returns>The sum vector</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Angle.op_Subtraction(Tekla.Common.Geometry.Angle,Tekla.Common.Geometry.Angle)">
            <summary>
             The angle subtraction operator. 
            </summary>
            <param name="left">The minuend angle</param>
            <param name="right">The subtracter angle</param>
            <returns>The remainder angle of parameter angles</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Angle.op_UnaryNegation(Tekla.Common.Geometry.Angle)">
            <summary>
             Returns a negate for the angle.
            </summary>
            <param name="angle">Source angle.</param>
            <returns>Negate angle.</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Angle.op_Multiply(Tekla.Common.Geometry.Angle,System.Double)">
            <summary>
            The multiplier operator with scalar.
            </summary>
            <param name="angle">A angle of the <c>Angle</c> type</param>
            <param name="scalar">A double divisor</param>
            <returns>The <c>Angle</c> after division</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Angle.op_Multiply(System.Double,Tekla.Common.Geometry.Angle)">
            <summary>
            The multiplier operator with scalar.
            </summary>
            <param name="scalar">A double divisor</param>
            <param name="angle">A angle of the <c>Angle</c> type</param>
            <returns>The <c>Angle</c> after division</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Angle.op_Division(Tekla.Common.Geometry.Angle,System.Double)">
            <summary>
            The division operator with scalar.
            </summary>
            <param name="angle">A angle of the <c>Angle</c> type</param>
            <param name="scalar">A double divisor</param>
            <returns>The <c>Angle</c> after division</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Angle.op_Division(Tekla.Common.Geometry.Angle,Tekla.Common.Geometry.Angle)">
            <summary>
            The division operator with other angle.
            </summary>
            <param name="angle">A angle of the <c>Angle</c> type</param>
            <param name="divisor">An angle divisor</param>
            <returns>The <c>double</c> value after division</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Angle.op_Modulus(Tekla.Common.Geometry.Angle,Tekla.Common.Geometry.Angle)">
            <summary>
            The module operator with other angle.
            </summary>
            <param name="angle">A angle of the <c>Angle</c> type</param>
            <param name="divisor">An module angle</param>
            <returns>The <c>double</c> value after module operation</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Angle.op_LessThan(Tekla.Common.Geometry.Angle,Tekla.Common.Geometry.Angle)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="angle">The angle.</param>
            <param name="other">The other.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Angle.op_GreaterThan(Tekla.Common.Geometry.Angle,Tekla.Common.Geometry.Angle)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="angle">The angle.</param>
            <param name="other">The other.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Angle.Equals(System.Object)">
            <summary>
            Tests for the exact equality of two arcs
            </summary>
            <param name="obj">Object to compare to</param>
            <returns>TRUE of arcs are equal, FALSE if not</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Angle.Equals(Tekla.Common.Geometry.Angle)">
            <summary>
            Tests for the exact equality of two angles
            </summary>
            <param name="other">Angle to compare to</param>
            <returns>TRUE of angles are equal, FALSE if not</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Angle.GetHashCode">
            <summary>
            Returns a hash code for arc
            </summary>
            <returns>The hash code</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Angle.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Tekla.Common.Geometry.Angle.HalfCircle">
            <summary>
            Gets angle representing half circle. (180 degrees).
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.Angle.FullCircle">
            <summary>
            Gets angle representing full circle (360 degrees).
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.Angle.Quadrant">
            <summary>
            Gets angle representing a quarter of a circle (90 degrees).
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.Angle.Zero">
            <summary>
            Gets angle representing a quarter of a circle (90 degrees).
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.Angle.Radians">
            <summary>
            Gets the angle value as radians.
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.Angle.Degrees">
            <summary>
            Gets the angle value in degrees.
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.Angle.Cos">
            <summary>
            Gets the cosine of the angle.
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.Angle.Sin">
            <summary>
            Gets the sine of the angle.
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.Angle.Tan">
            <summary>
            Gets the tangent of the angle.
            </summary>
        </member>
        <member name="T:Tekla.Common.Geometry.Segment3">
            <summary>
            3D segment. The segment is represented as <c>P+t*D</c>, where <c>P</c> is the segment origin,
            <c>D</c> is a unit-length direction vector and <c>e &gt;0 |t|</c>. 
            The value <c>e</c> is the extent of the segment.  
            The end points of the segment are <c>P-e*D</c> and <c>P+e*D</c>.  
            The user must ensure that the direction
            vector is unit-length.  
            </summary>
        </member>
        <member name="M:Tekla.Common.Geometry.Segment3.#ctor(Tekla.Common.Geometry.Vector3,Tekla.Common.Geometry.UnitVector3,System.Double)">
            <summary>
            Initializes a new instance of the Segment3 struct
            </summary>
            <param name="origin">The origin of the segment3</param>
            <param name="direction">Unit-length direction vector</param>
            <param name="extent">Extent of the segment 
            (half-length of the distance between segment's end and start points)</param>
        </member>
        <member name="M:Tekla.Common.Geometry.Segment3.#ctor(Tekla.Common.Geometry.Vector3,Tekla.Common.Geometry.Vector3)">
            <summary>
            Initializes a new instance of the Segment3 struct. If the given end points are equal, the direction is UnitX and extent is zero.
            </summary>
            <param name="negativeEnd">Negative end point</param>
            <param name="positiveEnd">Positive end point</param>
        </member>
        <member name="M:Tekla.Common.Geometry.Segment3.Equals(System.Object)">
            <summary>
            Tests for the exact equality of two segments
            </summary>
            <param name="obj">Object to compare to</param>
            <returns>TRUE if segments are equal, FALSE if not</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Segment3.Equals(Tekla.Common.Geometry.Segment3)">
            <summary>
            Tests for the exact equality of two segments
            </summary>
            <param name="other">Segment to compare to</param>
            <returns>TRUE if segments are equal, FALSE if not</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Segment3.GetHashCode">
            <summary>
            Returns a hash code for segment
            </summary>
            <returns>The hash code</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Segment3.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Tekla.Common.Geometry.Segment3.Extent">
            <summary>
            Gets the extent
            (half-length of the distance between segment's end points 
            <c>PositiveEnd</c> and <c>NegativeEnd</c>)
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.Segment3.Origin">
            <summary>
            Gets the origin
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.Segment3.Direction">
            <summary>
            Gets the direction
            The vector must be unit-length.        
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.Segment3.PositiveEnd">
            <summary>
            Gets the positive end point
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.Segment3.NegativeEnd">
            <summary>
            Gets the negative end point
            </summary>
        </member>
        <member name="T:Tekla.Common.Geometry.MathBase">
            <summary>
            Internal math base, no need to be COM visible.
            </summary>
        </member>
        <member name="T:Tekla.Common.Geometry.Box2">
            <summary>
            2D box. 
            A box has a center point <c>C</c>, axis directions <c>U[0]</c> and <c>U[1]</c> (both unit-length
            vectors), and extents <c>e[0]</c> and <c>e[1]</c> (both nonnegative numbers).  A
            point <c>X = C+y[0]*U[0]+y[1]*U[1]</c> is inside or on the box whenever
            <c>|y[i]| &lt;= e[i]</c> for all <c>i</c>.
            </summary>
        </member>
        <member name="M:Tekla.Common.Geometry.Box2.#ctor(Tekla.Common.Geometry.Vector2,Tekla.Common.Geometry.UnitVector2[],System.Double[])">
            <summary>
            Initializes a new instance of the Box2 struct
            </summary>
            <param name="center">Center point of the box</param>
            <param name="axis">Array of unit-length vectors parallel the axis of the box</param>
            <param name="extent">Array of the box extents (half-lengths of the edges)</param>
        </member>
        <member name="M:Tekla.Common.Geometry.Box2.#ctor(Tekla.Common.Geometry.Vector2,Tekla.Common.Geometry.UnitVector2,Tekla.Common.Geometry.UnitVector2,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the Box2 struct
            </summary>
            <param name="center">Center point of the box</param>
            <param name="axis0">Unit-length vector parallel to one axis of the box</param>
            <param name="axis1">Unit-length vector parallel to the other axis of the box</param>
            <param name="extent0">The extent (half-length) of the side parallel to axis one</param>
            <param name="extent1">The extent (half-length) of the side parallel to axis two</param>
        </member>
        <member name="M:Tekla.Common.Geometry.Box2.Equals(System.Object)">
            <summary>
            Tests for the exact equality of two boxes
            </summary>
            <param name="obj">Object to compare to</param>
            <returns>TRUE if boxes are equal, FALSE if not</returns>        
        </member>
        <member name="M:Tekla.Common.Geometry.Box2.Equals(Tekla.Common.Geometry.Box2)">
            <summary>
            Tests for the exact equality of two boxes
            </summary>
            <param name="other">Box to compare to</param>
            <returns>TRUE if boxes are equal, FALSE if not</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Box2.GetHashCode">
            <summary>
            Returns a hash code for box
            </summary>
            <returns>The hash code</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Box2.ComputeVertices">
            <summary>
             Returns an array of vertices
            </summary>
            <returns>Array of four vertices</returns>
        </member>
        <member name="P:Tekla.Common.Geometry.Box2.Center">
            <summary>
            Gets the center point
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.Box2.Axis0">
            <summary>
            Gets an axis parallel to one side of the box,
            a unit-length vector orthogonal to Axis1
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.Box2.Axis1">
            <summary>
            Gets an axis parallel to the other side of the box, 
            a unit-length vector orthogonal to Axis0
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.Box2.Extent0">
            <summary>
            Gets the extent parallel to the first axis (<c>Axis0</c>) of the box
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.Box2.Extent1">
            <summary>
            Gets the extent parallel to the second axis (<c>Axis1</c>) of the box
            </summary>
        </member>
        <member name="T:Tekla.Common.Geometry.Triangle3">
            <summary>
            3D triangle, represented as an array of three vertices, V0, V1, V2.
            </summary>
        </member>
        <member name="M:Tekla.Common.Geometry.Triangle3.#ctor(Tekla.Common.Geometry.Vector3,Tekla.Common.Geometry.Vector3,Tekla.Common.Geometry.Vector3)">
            <summary>
            Initializes a new instance of the Triangle3 struct.
            </summary>
            <param name="vector0">Vertex point V0</param>
            <param name="vector1">Vertex point V1</param>
            <param name="vector2">Vertex point V2</param>        
        </member>
        <member name="M:Tekla.Common.Geometry.Triangle3.Equals(System.Object)">
            <summary>
            Tests for the exact equality of two triangles
            </summary>
            <param name="obj">The object to compare to</param>
            <returns>TRUE if triangles are equal, FALSE if not</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Triangle3.Equals(Tekla.Common.Geometry.Triangle3)">
            <summary>
            Tests for the exact equality of two triangles
            </summary>
            <param name="other">The object to compare to</param>
            <returns>TRUE if triangles are equal, FALSE if not</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Triangle3.GetHashCode">
            <summary>
            Returns a hash code for triangle
            </summary>
            <returns>The hash code</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Triangle3.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Tekla.Common.Geometry.Triangle3.V0">
            <summary>
            Gets vertex point V0
            </summary>        
        </member>
        <member name="P:Tekla.Common.Geometry.Triangle3.V1">
            <summary>
            Gets vertex point V1
            </summary>        
        </member>
        <member name="P:Tekla.Common.Geometry.Triangle3.V2">
            <summary>
            Gets vertex point V2
            </summary>        
        </member>
        <member name="P:Tekla.Common.Geometry.Triangle3.Item(System.Int32)">
            <summary>
            Gets or sets the vertex point specified by the index
            </summary>
            <param name="index">Identiefies the vertex point to get or set, 
            0 (for V0), 1 (for V1) or 2 (for V2)</param>
            <returns>Returns vertex point coordinates</returns>        
        </member>
        <member name="T:Tekla.Common.Geometry.Segment2">
            <summary>
            2D segment. The segment is represented as <c>P+t*D</c>, where <c>P</c> is the segment origin,
            <c>D</c> is a unit-length direction vector and <c>e &gt;0 |t|</c>. 
            The value <c>e</c> is the extent of the segment.  
            The end points of the segment are <c>P-e*D</c> and <c>P+e*D</c>.  
            The user must ensure that the direction
            vector is unit-length.  
            </summary>
        </member>
        <member name="M:Tekla.Common.Geometry.Segment2.#ctor(Tekla.Common.Geometry.Vector2,Tekla.Common.Geometry.UnitVector2,System.Double)">
            <summary>
            Initializes a new instance of the Segment2 struct
            </summary>
            <param name="origin">The origin of the segment</param>
            <param name="direction">Unit-length direction vector</param>
            <param name="extent">Extent of the segment 
            (half-length of the distance between segment's end and start points)</param>
        </member>
        <member name="M:Tekla.Common.Geometry.Segment2.#ctor(Tekla.Common.Geometry.Vector2,Tekla.Common.Geometry.Vector2)">
            <summary>
            Initializes a new instance of the Segment2 struct 
            between two end points.
            </summary>
            <param name="end0">First end point</param>
            <param name="end1">Second end point</param>
        </member>
        <member name="M:Tekla.Common.Geometry.Segment2.Equals(System.Object)">
            <summary>
            Tests for the exact equality of two segments
            </summary>
            <param name="obj">Object to compare to</param>
            <returns>TRUE if segments are equal, FALSE if not</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Segment2.Equals(Tekla.Common.Geometry.Segment2)">
            <summary>
            Tests for the exact equality of two segments
            </summary>
            <param name="other">Segment to compare to</param>
            <returns>TRUE if segments are equal, FALSE if not</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Segment2.GetHashCode">
            <summary>
            Returns a hash code for segment
            </summary>
            <returns>The hash code</returns>
        </member>
        <member name="P:Tekla.Common.Geometry.Segment2.Origin">
            <summary>
            Gets the origin
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.Segment2.Direction">
            <summary>
            Gets the direction vector. 
            The vector must be unit-length.
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.Segment2.Extent">
            <summary>
            Gets the segment extent 
            (half-length of the distance between segment's end points 
            <c>PositiveEnd</c> and <c>NegativeEnd</c>)
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.Segment2.PositiveEnd">
            <summary>
            Gets the first end point
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.Segment2.NegativeEnd">
            <summary>
            Gets the second end point
            </summary>
        </member>
        <member name="T:Tekla.Common.Geometry.Matrix4">
            <summary>
            4x4 matrix containing four 4D vectors, 
            each vector stored in a column
            </summary>
        </member>
        <member name="M:Tekla.Common.Geometry.Matrix4.#ctor(Tekla.Common.Geometry.Vector4,Tekla.Common.Geometry.Vector4,Tekla.Common.Geometry.Vector4,Tekla.Common.Geometry.Vector4)">
            <summary>
            Initializes a new instance of the Matrix4 struct 
            based on vector input.
            </summary>
            <param name="column0">A <c>Vector4</c> type vector
            (the first column of the matrix)</param>
            <param name="column1">A <c>Vector4</c> type vector 
            (the second column of the matrix)</param>
            <param name="column2">A <c>Vector4</c> type vector 
            (the third column of the matrix)</param>
            <param name="column3">A <c>Vector4</c> type vector
            (the fourth column of the matrix)</param>
        </member>
        <member name="M:Tekla.Common.Geometry.Matrix4.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the Matrix4 struct,
            a diagonal matrix. Provide the diagonal entries as 
            parameters.
            </summary>
            <param name="entry00">Entry (0,0)</param>
            <param name="entry11">Entry (1,1)</param>
            <param name="entry22">Entry (2,2)</param>
            <param name="entry33">Entry (3,3)</param>
        </member>
        <member name="M:Tekla.Common.Geometry.Matrix4.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the Matrix4 struct.
            </summary>
            <param name="m00">The M00.</param>
            <param name="m01">The M01.</param>
            <param name="m02">The M02.</param>
            <param name="m03">The M03.</param>
            <param name="m10">The M10.</param>
            <param name="m11">The M11.</param>
            <param name="m12">The M12.</param>
            <param name="m13">The M13.</param>
            <param name="m20">The M20.</param>
            <param name="m21">The M21.</param>
            <param name="m22">The M22.</param>
            <param name="m23">The M23.</param>
            <param name="m30">The M30.</param>
            <param name="m31">The M31.</param>
            <param name="m32">The M32.</param>
            <param name="m33">The M33.</param>
        </member>
        <member name="M:Tekla.Common.Geometry.Matrix4.op_Addition(Tekla.Common.Geometry.Matrix4,Tekla.Common.Geometry.Matrix4)">
            <summary>
            Addition of matrices
            </summary>
            <param name="left">Left operand</param>
            <param name="right">Right operand</param>
            <returns>The sum matrix</returns>        
        </member>
        <member name="M:Tekla.Common.Geometry.Matrix4.op_Subtraction(Tekla.Common.Geometry.Matrix4,Tekla.Common.Geometry.Matrix4)">
            <summary>
            Subtraction of matrices
            </summary>
            <param name="left">A <c>Matrix4</c> type matrix</param>
            <param name="right">A <c>Matrix4</c> type matrix, the subtractor</param>
            <returns>The subtraction matrix</returns>        
        </member>
        <member name="M:Tekla.Common.Geometry.Matrix4.op_Multiply(Tekla.Common.Geometry.Matrix4,Tekla.Common.Geometry.Matrix4)">
            <summary>
            Multiplication of matrices
            </summary>
            <param name="left">The left operand</param>
            <param name="right">The right operand</param>
            <returns>The product matrix</returns>        
        </member>
        <member name="M:Tekla.Common.Geometry.Matrix4.op_Multiply(System.Double,Tekla.Common.Geometry.Matrix4)">
            <summary>
            Multiplies the given matrix by a scalar multiplier,
            each entry multiplied with the scalar
            </summary>
            <param name="scalar">A double multiplier</param>
            <param name="matrix">A <c>Matrix3</c> type matrix</param>
            <returns>The product matrix</returns>        
        </member>
        <member name="M:Tekla.Common.Geometry.Matrix4.op_Multiply(Tekla.Common.Geometry.Matrix4,System.Double)">
            <summary>
            Multiplies the given matrix by a scalar multiplier,
            each entry multiplied with the scalar
            </summary>
            <param name="matrix">A <c>Matrix4</c> type matrix</param>
            <param name="scalar">A double multiplier</param>
            <returns>The product matrix</returns>        
        </member>
        <member name="M:Tekla.Common.Geometry.Matrix4.op_Multiply(Tekla.Common.Geometry.Matrix4,Tekla.Common.Geometry.Vector4)">
            <summary>
            Multiplication of a <c>Matrix4</c> matrix and a <c>Vector4</c> vector 
            </summary>
            <param name="matrix">A <c>Matrix4</c> type matrix</param>
            <param name="vector">A <c>Vector4</c> type vector</param>
            <returns>The product vector of <c>Vector3</c> type</returns>        
        </member>
        <member name="M:Tekla.Common.Geometry.Matrix4.op_Division(Tekla.Common.Geometry.Matrix4,System.Double)">
            <summary>
            Divides the given matrix with a scalar divider,
            each entry divided with the scalar
            </summary>
            <param name="matrix">A <c>Matrix4</c> type matrix</param>
            <param name="scalar">A scalar divider</param>
            <returns>The result matrix</returns>        
        </member>
        <member name="M:Tekla.Common.Geometry.Matrix4.SetColumn(System.Int32,Tekla.Common.Geometry.Vector4)">
            <summary>
            Sets the column specified by the index
            </summary>
            <param name="index">Column index</param>
            <param name="column">Column values</param>        
        </member>
        <member name="M:Tekla.Common.Geometry.Matrix4.GetColumn(System.Int32)">
            <summary>
            Gets the column specified by the index
            </summary>
            <param name="index">Column index</param> 
            <returns>The column specified by the index</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Matrix4.Equals(System.Object)">
            <summary>
            Tests for the exact equality of two matrices
            </summary>
            <param name="obj">Object to compare to</param>
            <returns>TRUE if matrices are equal, FALSE if not</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Matrix4.Equals(Tekla.Common.Geometry.Matrix4)">
            <summary>
            Tests for the exact equality of two matrices
            </summary>
            <param name="other">Matrix to compare to</param>
            <returns>TRUE if matrices are equal, FALSE if not</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Matrix4.GetHashCode">
            <summary>
            Returns a hash code for matrix
            </summary>
            <returns>The hash code</returns>
        </member>
        <member name="M:Tekla.Common.Geometry.Matrix4.Transpose">
            <summary>
            Returns the transpose of this matrix.
            The transpose matrix contains the columns of this matrix
            turned into rows.
            </summary>
            <returns>Transpose matrix</returns>        
        </member>
        <member name="M:Tekla.Common.Geometry.Matrix4.Inverse">
            <summary>
            Returns the inverse of this matrix.
            The original matrix <c>M</c> and the inverse matrix <c>M*</c>
            fulfill the equation <c>MM* = I</c> (<c>I</c> is identity matrix).
            This method calculates the inverse using cofactors.
            </summary>
            <returns>Inverse matrix</returns>            
        </member>
        <member name="M:Tekla.Common.Geometry.Matrix4.Adjoint">
            <summary>
            Returns the adjugate of this matrix 
            (also referred to as the classical adjoint).
            </summary>
            <returns>Adjugate matrix</returns>        
        </member>
        <member name="M:Tekla.Common.Geometry.Matrix4.Determinant">
            <summary>
            Determinant of this matrix
            </summary>
            <returns>Determinant value</returns>   
        </member>
        <member name="P:Tekla.Common.Geometry.Matrix4.Zero">
            <summary>
            Gets a 4x4 zero matrix.
            This is an easy way to create an empty matrix which 
            you can then fill later.
            </summary>
            <example>
            <code> 
            Matrix4 matrix = Matrix4.Zero; 
            matrix[0,0] = 1; 
            matrix[0,1] = 2;
            matrix[0,2] = 3;
            matrix[0,3] = 4;
            matrix[1,0] = 5;
            ...
            </code>
            </example>
        </member>
        <member name="P:Tekla.Common.Geometry.Matrix4.Identity">
            <summary>
            Gets a 4x4 identity matrix
            </summary>
        </member>
        <member name="P:Tekla.Common.Geometry.Matrix4.Column0">
            <summary>
            Gets the vector in the first column
            </summary>              
        </member>
        <member name="P:Tekla.Common.Geometry.Matrix4.Column1">
            <summary>
            Gets the vector in the second column
            </summary>                
        </member>
        <member name="P:Tekla.Common.Geometry.Matrix4.Column2">
            <summary>
            Gets the vector in the third column
            </summary>                
        </member>
        <member name="P:Tekla.Common.Geometry.Matrix4.Column3">
            <summary>
            Gets the vector in the fourth column
            </summary>        
        </member>
        <member name="P:Tekla.Common.Geometry.Matrix4.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets the matrix entry specified 
            by the row and column indices
            </summary>
            <param name="rowIndex">Row index, 0, 1, 2 or 3</param>
            <param name="columnIndex">Column index, 0, 1, 2 or 3</param>
            <returns>The get operation returns the requested entry</returns>
        </member>
    </members>
</doc>
